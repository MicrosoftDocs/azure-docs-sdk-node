### YamlMime:TSType
name: DataLakeServiceClient
uid: '@azure/storage-file-datalake.DataLakeServiceClient'
package: '@azure/storage-file-datalake'
summary: |-
  DataLakeServiceClient allows you to manipulate Azure
  Data Lake service resources and file systems. The storage account provides
  the top-level namespace for the Data Lake service.
fullName: DataLakeServiceClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: DataLakeServiceClient(string, Pipeline)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.constructor_1'
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeServiceClient from url and pipeline.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new DataLakeServiceClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage data lake service, such as
                                "https://myaccount.dfs.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-file-datalake.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      DataLakeServiceClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.constructor'
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeServiceClient from url.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new DataLakeServiceClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage data lake service, such as
                                "https://myaccount.dfs.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-file-datalake.StorageSharedKeyCredential"
            /> | <xref uid="@azure/storage-file-datalake.AnonymousCredential" />
            | <xref uid="@azure/core-auth.TokenCredential" />
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-file-datalake.StoragePipelineOptions" />
          description: Optional. Options to configure the HTTP pipeline.
inheritedProperties:
  - name: accountName
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.accountName'
    package: '@azure/storage-file-datalake'
    summary: ''
    fullName: accountName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.accountName
  - name: credential
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.credential'
    package: '@azure/storage-file-datalake'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the `@azure/identity` package to authenticate requests to the
      service. You can also provide an object that implements the
      TokenCredential interface. If not specified, AnonymousCredential is used.
    fullName: credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        description: ''
        type: >-
          <xref uid="@azure/storage-file-datalake.StorageSharedKeyCredential" />
          | <xref uid="@azure/storage-file-datalake.AnonymousCredential" /> |
          <xref uid="@azure/core-auth.TokenCredential" />
    inheritanceDescription: <b>Inherited From</b> StorageClient.credential
  - name: url
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.url'
    package: '@azure/storage-file-datalake'
    summary: Encoded URL string value.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.url
methods:
  - name: fromConnectionString(string, StoragePipelineOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.fromConnectionString'
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeServiceClient from connection string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string, options?:
        StoragePipelineOptions): DataLakeServiceClient
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: options
          type: <xref uid="@azure/storage-file-datalake.StoragePipelineOptions" />
          description: Optional. Options to configure the HTTP pipeline.
      return:
        description: ''
        type: <xref uid="@azure/storage-file-datalake.DataLakeServiceClient" />
  - name: >-
      generateAccountSasUrl(Date, AccountSASPermissions, string,
      ServiceGenerateAccountSasUrlOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.generateAccountSasUrl'
    package: '@azure/storage-file-datalake'
    summary: >-
      Only available for DataLakeServiceClient constructed with a shared key
      credential.


      Generates an account Shared Access Signature (SAS) URI based on the client
      properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-account-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateAccountSasUrl(expiresOn?: Date, permissions?:
        AccountSASPermissions, resourceTypes?: string, options?:
        ServiceGenerateAccountSasUrlOptions): string
      parameters:
        - id: expiresOn
          type: Date
          description: >-
            Optional. The time at which the shared access signature becomes
            invalid. Default to an hour later if not specified.
        - id: permissions
          type: <xref uid="@azure/storage-file-datalake.AccountSASPermissions" />
          description: Specifies the list of permissions to be associated with the SAS.
        - id: resourceTypes
          type: string
          description: >-
            Specifies the resource types associated with the shared access
            signature.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceGenerateAccountSasUrlOptions"
            />
          description: Optional parameters.
      return:
        description: >-
          An account SAS URI consisting of the URI to the resource represented
          by this client, followed by the generated SAS token.
        type: string
  - name: >-
      generateSasStringToSign(Date, AccountSASPermissions, string,
      ServiceGenerateAccountSasUrlOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.generateSasStringToSign'
    package: '@azure/storage-file-datalake'
    summary: >-
      Only available for DataLakeServiceClient constructed with a shared key
      credential.


      Generates string to sign for an account Shared Access Signature (SAS)
      based on the client properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-account-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSasStringToSign(expiresOn?: Date, permissions?:
        AccountSASPermissions, resourceTypes?: string, options?:
        ServiceGenerateAccountSasUrlOptions): string
      parameters:
        - id: expiresOn
          type: Date
          description: >-
            Optional. The time at which the shared access signature becomes
            invalid. Default to an hour later if not specified.
        - id: permissions
          type: <xref uid="@azure/storage-file-datalake.AccountSASPermissions" />
          description: Specifies the list of permissions to be associated with the SAS.
        - id: resourceTypes
          type: string
          description: >-
            Specifies the resource types associated with the shared access
            signature.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceGenerateAccountSasUrlOptions"
            />
          description: Optional parameters.
      return:
        description: >-
          An account SAS URI consisting of the URI to the resource represented
          by this client, followed by the generated SAS token.
        type: string
  - name: getFileSystemClient(string)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.getFileSystemClient'
    package: '@azure/storage-file-datalake'
    summary: >-
      Creates a
      [DataLakeFileSystemClient](xref:@azure/storage-file-datalake.DataLakeFileSystemClient)
      object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFileSystemClient(fileSystemName: string):
        DataLakeFileSystemClient
      parameters:
        - id: fileSystemName
          type: string
          description: File system name.
      return:
        description: ''
        type: <xref uid="@azure/storage-file-datalake.DataLakeFileSystemClient" />
  - name: getProperties(ServiceGetPropertiesOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.getProperties'
    package: '@azure/storage-file-datalake'
    summary: >-
      Gets the properties of a storage account’s Blob service endpoint,
      including properties

      for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: ServiceGetPropertiesOptions):
        Promise<ServiceGetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceGetPropertiesOptions" />
          description: Options to the Service Get Properties operation.
      return:
        description: Response data for the Service Get Properties operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.DataLakeServiceGetPropertiesResponse"
          />&gt;
  - name: getUserDelegationKey(Date, Date, ServiceGetUserDelegationKeyOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.getUserDelegationKey'
    package: '@azure/storage-file-datalake'
    summary: >-
      ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).


      Retrieves a user delegation key for the Data Lake service. This is only a
      valid operation when using

      bearer token authentication.


      **Example**


      ```ts snippet:DatalakeServiceClientGetUserDelegationKey

      import {
        DataLakeServiceClient,
        generateDataLakeSASQueryParameters,
        FileSystemSASPermissions,
        SASProtocol,
      } from "@azure/storage-file-datalake";


      const account = "<account>";

      const sas = "<sas token>";

      const datalakeServiceClient = new DataLakeServiceClient(
        `https://${account}.dfs.core.windows.net${sas}`,
      );


      const fileSystemName = "<file system name>";

      const accountName = "<account name>";

      const startsOn = new Date();

      const expiresOn = new Date(+new Date() + 86400 * 1000);

      // Generate user delegation SAS for a file system

      const userDelegationKey = await
      datalakeServiceClient.getUserDelegationKey(startsOn, expiresOn);

      const fileSystemSAS = generateDataLakeSASQueryParameters(
        {
          fileSystemName, // Required
          permissions: FileSystemSASPermissions.parse("racwdl"), // Required
          startsOn, // Required. Date type
          expiresOn, // Optional. Date type
          ipRange: { start: "0.0.0.0", end: "255.255.255.255" }, // Optional
          protocol: SASProtocol.HttpsAndHttp, // Optional
          version: "2018-11-09", // Must greater than or equal to 2018-11-09 to generate user delegation SAS
        },
        userDelegationKey, // UserDelegationKey
        accountName,
      ).toString();

      ```




      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUserDelegationKey(startsOn: Date, expiresOn: Date, options?:
        ServiceGetUserDelegationKeyOptions):
        Promise<ServiceGetUserDelegationKeyResponse>
      parameters:
        - id: startsOn
          type: Date
          description: >-
            The start time for the user delegation SAS. Must be within 7 days of
            the current time.
        - id: expiresOn
          type: Date
          description: >-
            The end time for the user delegation SAS. Must be within 7 days of
            the current time.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceGetUserDelegationKeyOptions"
            />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.ServiceGetUserDelegationKeyResponse"
          />&gt;
  - name: listFileSystems(ServiceListFileSystemsOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.listFileSystems'
    package: '@azure/storage-file-datalake'
    summary: >-
      Returns an async iterable iterator to list all the file systems

      under the specified account.


      .byPage() returns an async iterable iterator to list the file systems in
      pages.


      Example using `for await` syntax:


      ```ts snippet:ReadmeSampleListFileSystems

      import { DataLakeServiceClient } from "@azure/storage-file-datalake";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const datalakeServiceClient = new DataLakeServiceClient(
        `https://${account}.dfs.core.windows.net`,
        new DefaultAzureCredential(),
      );


      let i = 1;

      const fileSystems = datalakeServiceClient.listFileSystems();

      for await (const fileSystem of fileSystems) {
        console.log(`File system ${i++}: ${fileSystem.name}`);
      }

      ```


      Example using `iter.next()`:


      ```ts snippet:ReadmeSampleListFileSystems_Iterator

      import { DataLakeServiceClient } from "@azure/storage-file-datalake";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const datalakeServiceClient = new DataLakeServiceClient(
        `https://${account}.dfs.core.windows.net`,
        new DefaultAzureCredential(),
      );


      let i = 1;

      const fileSystems = datalakeServiceClient.listFileSystems();

      let { value, done } = await fileSystems.next();

      while (!done) {
        console.log(`File system ${i++}: ${value.name}`);
        ({ value, done } = await fileSystems.next());
      }

      ```


      Example using `byPage()`:


      ```ts snippet:ReadmeSampleListFileSystems_ByPage

      import { DataLakeServiceClient } from "@azure/storage-file-datalake";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const datalakeServiceClient = new DataLakeServiceClient(
        `https://${account}.dfs.core.windows.net`,
        new DefaultAzureCredential(),
      );


      let i = 1;

      for await (const response of
      datalakeServiceClient.listFileSystems().byPage({ maxPageSize: 20 })) {
        if (response.fileSystemItems) {
          for (const fileSystem of response.fileSystemItems) {
            console.log(`File System ${i++}: ${fileSystem.name}`);
          }
        }
      }

      ```


      Example using paging with a marker:


      ```ts snippet:ReadmeSampleListFileSystems_Continuation

      import { DataLakeServiceClient } from "@azure/storage-file-datalake";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const datalakeServiceClient = new DataLakeServiceClient(
        `https://${account}.dfs.core.windows.net`,
        new DefaultAzureCredential(),
      );


      let i = 1;

      let fileSystems = datalakeServiceClient.listFileSystems().byPage({
      maxPageSize: 2 });

      let response = (await fileSystems.next()).value;

      // Prints 2 file systems

      if (response.fileSystemItems) {
        for (const fileSystem of response.fileSystemItems) {
          console.log(`File system ${i++}: ${fileSystem.name}`);
        }
      }

      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      fileSystems = datalakeServiceClient
        .listFileSystems()
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await fileSystems.next()).value;

      // Prints 10 file systems

      if (response.fileSystemItems) {
        for (const fileSystem of response.fileSystemItems) {
          console.log(`File system ${i++}: ${fileSystem.name}`);
        }
      }

      ```


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/list-containers2
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFileSystems(options?: ServiceListFileSystemsOptions):
        PagedAsyncIterableIterator<FileSystemItem,
        ServiceListFileSystemsSegmentResponse, PageSettings>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceListFileSystemsOptions" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/storage-file-datalake.FileSystemItem" />, <xref
          uid="@azure/storage-file-datalake.ServiceListFileSystemsSegmentResponse"
          />, <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: setProperties(BlobServiceProperties, ServiceSetPropertiesOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.setProperties'
    package: '@azure/storage-file-datalake'
    summary: >-
      Sets properties for a storage account’s Blob service endpoint, including
      properties

      for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft
      delete settings.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties: BlobServiceProperties, options?:
        ServiceSetPropertiesOptions): Promise<ServiceSetPropertiesResponse>
      parameters:
        - id: properties
          type: >-
            <xref uid="@azure/storage-file-datalake.DataLakeServiceProperties"
            />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceSetPropertiesOptions" />
          description: Options to the Service Set Properties operation.
      return:
        description: Response data for the Service Set Properties operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ServiceSetPropertiesResponse" />&gt;
  - name: undeleteFileSystem(string, string, ServiceUndeleteFileSystemOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.undeleteFileSystem'
    package: '@azure/storage-file-datalake'
    summary: >-
      Restore a previously deleted File System.

      This API is only functional if Container Soft Delete is enabled for the
      storage account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function undeleteFileSystem(deletedFileSystemName: string,
        deleteFileSystemVersion: string, options?:
        ServiceUndeleteFileSystemOptions): Promise<{ fileSystemClient:
        DataLakeFileSystemClient, fileSystemUndeleteResponse:
        ContainerUndeleteResponse }>
      parameters:
        - id: deletedFileSystemName
          type: string
          description: The name of the source File System.
        - id: deleteFileSystemVersion
          type: string
          description: The new name of the File System.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceUndeleteFileSystemOptions"
            />
          description: Options to configure File System Restore operation.
      return:
        description: ''
        type: >-
          Promise&lt;{ fileSystemClient: DataLakeFileSystemClient,
          fileSystemUndeleteResponse: ContainerUndeleteResponse }&gt;
extends: StorageClient
