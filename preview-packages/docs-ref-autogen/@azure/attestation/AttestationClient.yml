### YamlMime:TSType
name: AttestationClient
uid: '@azure/attestation.AttestationClient'
package: '@azure/attestation'
summary: |-
  Attestation Client class.

  The AttestationClient class enables access to the Attestation related APIs:

  - getOpenIdMetadata
  - getAttestationSigners
  - attestSgxEnclave
  - attestOpenEnclave
  - attestTpm
fullName: AttestationClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: AttestationClient(string, AttestationClientOptions)
    uid: '@azure/attestation.AttestationClient.constructor'
    package: '@azure/attestation'
    summary: >-
      Creates an instance of AttestationClient.


      Example usage:

      ```ts snippet:Attestation_Constructor_NoCreds

      import { AttestationClient } from "@azure/attestation";


      const endpoint =
      "https://<attestation-instance>.<region>.attest.azure.net";

      const client = new AttestationClient(endpoint);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new AttestationClient(endpoint: string, options?:
        AttestationClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: >-
            The attestation instance base URI, for example
            https://mytenant.attest.azure.net.
        - id: options
          type: <xref uid="@azure/attestation.AttestationClientOptions" />
          description: Options used to configure the Attestation Client.
  - name: AttestationClient(string, TokenCredential, AttestationClientOptions)
    uid: '@azure/attestation.AttestationClient.constructor_1'
    package: '@azure/attestation'
    summary: >-
      Creates an instance of AttestationClient with options and credentials.


      Example usage:

      ```ts snippet:Attestation_Constructor_Creds

      import { DefaultAzureCredential } from "@azure/identity";

      import { AttestationClient } from "@azure/attestation";


      const endpoint =
      "https://<attestation-instance>.<region>.attest.azure.net";

      const credentials = new DefaultAzureCredential();

      const client = new AttestationClient(endpoint, credentials);

      ```


      Note that credentials are required to call the `attestTpm` API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new AttestationClient(endpoint: string, credentials: TokenCredential,
        options?: AttestationClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: >-
            The attestation instance base URI, for example
            https://mytenant.attest.azure.net.
        - id: credentials
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: Credentials used to configure the attestation client.
        - id: options
          type: <xref uid="@azure/attestation.AttestationClientOptions" />
          description: ''
methods:
  - name: attestOpenEnclave(Uint8Array | Buffer | Blob, AttestOpenEnclaveOptions)
    uid: '@azure/attestation.AttestationClient.attestOpenEnclave'
    package: '@azure/attestation'
    summary: >-
      Attests an OpenEnclave report generated from an SGX Enclave using the
      OpenEnclave SDK.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function attestOpenEnclave(report: Uint8Array | Buffer | Blob, options?:
        AttestOpenEnclaveOptions):
        Promise<AttestationResponse<AttestationResult>>
      parameters:
        - id: report
          type: Uint8Array | Buffer | Blob
          description: An OpenEnclave report generated by an SGX enclave.
        - id: options
          type: <xref uid="@azure/attestation.AttestOpenEnclaveOptions" />
          description: Operation options for the attestOpenEnclave API call.
      return:
        description: >-
          Returns an AttestationResponse whose body is an AttestationResult
          describing
             the claims returned by the attestation service.
        type: >-
          Promise&lt;<xref uid="@azure/attestation.AttestationResponse"
          />&lt;<xref uid="@azure/attestation.AttestationResult" />&gt;&gt;
  - name: attestSgxEnclave(Uint8Array | Buffer | Blob, AttestSgxEnclaveOptions)
    uid: '@azure/attestation.AttestationClient.attestSgxEnclave'
    package: '@azure/attestation'
    summary: Attests a quote generated from SGX Enclave using the Intel SDK.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function attestSgxEnclave(quote: Uint8Array | Buffer | Blob, options?:
        AttestSgxEnclaveOptions):
        Promise<AttestationResponse<AttestationResult>>
      parameters:
        - id: quote
          type: Uint8Array | Buffer | Blob
          description: An SGX quote generated by an SGX enclave.
        - id: options
          type: <xref uid="@azure/attestation.AttestSgxEnclaveOptions" />
          description: Operation options for the attestOpenEnclave API call.
      return:
        description: >-
          Returns an AttestationResponse whose body is an AttestationResult
          describing
             the claims returned by the attestation service.
        type: >-
          Promise&lt;<xref uid="@azure/attestation.AttestationResponse"
          />&lt;<xref uid="@azure/attestation.AttestationResult" />&gt;&gt;
  - name: attestTpm(string, AttestTpmOptions)
    uid: '@azure/attestation.AttestationClient.attestTpm'
    package: '@azure/attestation'
    summary: >+
      Attest a TPM based enclave.


      See the  [TPM Attestation Protocol
      Reference](https://learn.microsoft.com/azure/attestation/virtualization-based-security-protocol)
      for more information.


      **Example**


      For example, the initial call for a TPM attestation operation is:


      ```snippet:AttestationClient_AttestTpm

      const encodedPayload = JSON.stringify({ payload: { type: "aikcert" } });

      const result = await client.attestTpm(encodedPayload);

      ```


      where stringToBytes converts the string to UTF8.


      Note that the attestTpm requires an attestation client which is configured
      with

      authentication credentials.

    remarks: >-
      The incoming requests to the TPM attestation API are stringified JSON
      objects.
    isDeprecated: false
    syntax:
      content: >-
        function attestTpm(request: string, options?: AttestTpmOptions):
        Promise<string>
      parameters:
        - id: request
          type: string
          description: >-
            Incoming request to send to the TPM attestation service, Utf8
            encoded.
        - id: options
          type: <xref uid="@azure/attestation.AttestTpmOptions" />
          description: Pipeline options for TPM attestation request.
      return:
        description: >-
          A structure containing the response from the TPM attestation, Utf8
          encoded.
        type: Promise&lt;string&gt;
  - name: getAttestationSigners(AttestationClientOperationOptions)
    uid: '@azure/attestation.AttestationClient.getAttestationSigners'
    package: '@azure/attestation'
    summary: >-
      Returns the list of attestation signers which can be used to sign
      attestation

      service tokens.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAttestationSigners(options?:
        AttestationClientOperationOptions): Promise<AttestationSigner[]>
      parameters:
        - id: options
          type: <xref uid="@azure/attestation.AttestationClientOperationOptions" />
          description: Client operation options.
      return:
        description: >-
          the set of AttestationSigners which may be used to sign attestation
          tokens.
        type: Promise&lt;<xref uid="@azure/attestation.AttestationSigner" />[]&gt;
  - name: getOpenIdMetadata(AttestationClientOperationOptions)
    uid: '@azure/attestation.AttestationClient.getOpenIdMetadata'
    package: '@azure/attestation'
    summary: >-
      Returns the OpenID Metadata discovery document for the attestation service
      instance.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getOpenIdMetadata(options?: AttestationClientOperationOptions):
        Promise<Record<string, unknown>>
      parameters:
        - id: options
          type: <xref uid="@azure/attestation.AttestationClientOperationOptions" />
          description: Client operation options.
      return:
        description: The OpenID metadata discovery document for the attestation service.
        type: Promise&lt;Record&lt;string, unknown&gt;&gt;
