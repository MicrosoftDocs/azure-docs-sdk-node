### YamlMime:TSType
name: PollerLike
uid: '@azure/core-lro.PollerLike'
package: '@azure/core-lro'
summary: A poller for an operation.
fullName: PollerLike<TState, TResult>
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: isDone
    uid: '@azure/core-lro.PollerLike.isDone'
    package: '@azure/core-lro'
    summary: Is true if the poller has finished polling.
    fullName: isDone
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'isDone: boolean'
      return:
        description: ''
        type: boolean
  - name: operationState
    uid: '@azure/core-lro.PollerLike.operationState'
    package: '@azure/core-lro'
    summary: |-
      The state of the operation.
      It can be undefined if the poller has not been submitted yet.
    fullName: operationState
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'operationState: undefined | TState'
      return:
        description: ''
        type: undefined | TState
  - name: result
    uid: '@azure/core-lro.PollerLike.result'
    package: '@azure/core-lro'
    summary: |-
      The result value of the operation, regardless of the state of the poller.
      It can be undefined or an incomplete form of the final TResult value
      depending on the implementation.
    fullName: result
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'result: undefined | TResult'
      return:
        description: ''
        type: undefined | TResult
inheritedProperties:
  - name: '[toStringTag]'
    uid: '@azure/core-lro.PollerLike.[toStringTag]'
    package: '@azure/core-lro'
    summary: ''
    fullName: '[toStringTag]'
    remarks: ''
    isDeprecated: false
    syntax:
      content: '[toStringTag]: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Promise.__@toStringTag@66
inheritedMethods:
  - name: 'catch<TResult>(null | (reason: any) => TResult | PromiseLike<TResult>)'
    uid: '@azure/core-lro.PollerLike.catch'
    package: '@azure/core-lro'
    summary: Attaches a callback for only the rejection of the Promise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function catch<TResult>(onrejected?: null | (reason: any) => TResult |
        PromiseLike<TResult>): Promise<TResult | TResult>
      parameters:
        - id: onrejected
          type: 'null | (reason: any) =&gt; TResult | PromiseLike&lt;TResult&gt;'
          description: The callback to execute when the Promise is rejected.
      return:
        description: A Promise for the completion of the callback.
        type: Promise&lt;TResult | TResult&gt;
    inheritanceDescription: <b>Inherited From</b> Promise.catch
  - name: finally(null | () => void)
    uid: '@azure/core-lro.PollerLike.finally'
    package: '@azure/core-lro'
    summary: >-
      Attaches a callback that is invoked when the Promise is settled (fulfilled
      or rejected). The

      resolved value cannot be modified from the callback.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function finally(onfinally?: null | () => void): Promise<TResult>'
      parameters:
        - id: onfinally
          type: null | () =&gt; void
          description: >-
            The callback to execute when the Promise is settled (fulfilled or
            rejected).
      return:
        description: A Promise for the completion of the callback.
        type: Promise&lt;TResult&gt;
    inheritanceDescription: <b>Inherited From</b> Promise.finally
  - name: >-
      then<TResult1, TResult2>(null | (value: TResult) => TResult1 |
      PromiseLike<TResult1>, null | (reason: any) => TResult2 |
      PromiseLike<TResult2>)
    uid: '@azure/core-lro.PollerLike.then'
    package: '@azure/core-lro'
    summary: Attaches callbacks for the resolution and/or rejection of the Promise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function then<TResult1, TResult2>(onfulfilled?: null | (value: TResult)
        => TResult1 | PromiseLike<TResult1>, onrejected?: null | (reason: any)
        => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>
      parameters:
        - id: onfulfilled
          type: 'null | (value: TResult) =&gt; TResult1 | PromiseLike&lt;TResult1&gt;'
          description: The callback to execute when the Promise is resolved.
        - id: onrejected
          type: 'null | (reason: any) =&gt; TResult2 | PromiseLike&lt;TResult2&gt;'
          description: The callback to execute when the Promise is rejected.
      return:
        description: A Promise for the completion of which ever callback is executed.
        type: Promise&lt;TResult1 | TResult2&gt;
    inheritanceDescription: <b>Inherited From</b> Promise.then
methods:
  - name: 'onProgress((state: TState) => void)'
    uid: '@azure/core-lro.PollerLike.onProgress'
    package: '@azure/core-lro'
    summary: >-
      Invokes the provided callback after each polling is completed,

      sending the current state of the poller's operation.


      It returns a method that can be used to stop receiving updates on the
      given callback function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function onProgress(callback: (state: TState) => void): CancelOnProgress'
      parameters:
        - id: callback
          type: '(state: TState) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-lro.CancelOnProgress" />
  - name: 'poll({ abortSignal?: AbortSignalLike })'
    uid: '@azure/core-lro.PollerLike.poll'
    package: '@azure/core-lro'
    summary: >-
      Returns a promise that will resolve once a single polling request
      finishes.

      It does this by calling the update method of the Poller's operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function poll(options?: { abortSignal?: AbortSignalLike }):
        Promise<TState>
      parameters:
        - id: options
          type: '{ abortSignal?: AbortSignalLike }'
          description: ''
      return:
        description: ''
        type: Promise&lt;TState&gt;
  - name: 'pollUntilDone({ abortSignal?: AbortSignalLike })'
    uid: '@azure/core-lro.PollerLike.pollUntilDone'
    package: '@azure/core-lro'
    summary: >-
      Returns a promise that will resolve once the underlying operation is
      completed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function pollUntilDone(pollOptions?: { abortSignal?: AbortSignalLike }):
        Promise<TResult>
      parameters:
        - id: pollOptions
          type: '{ abortSignal?: AbortSignalLike }'
          description: ''
      return:
        description: ''
        type: Promise&lt;TResult&gt;
  - name: serialize()
    uid: '@azure/core-lro.PollerLike.serialize'
    package: '@azure/core-lro'
    summary: >-
      Returns a promise that could be used for serialized version of the
      poller's operation

      by invoking the operation's serialize method.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function serialize(): Promise<string>'
      return:
        description: ''
        type: Promise&lt;string&gt;
  - name: submitted()
    uid: '@azure/core-lro.PollerLike.submitted'
    package: '@azure/core-lro'
    summary: >-
      Returns a promise that could be used to check if the poller has been
      submitted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function submitted(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
extends: Promise&lt;TResult&gt;
