### YamlMime:TSType
name: ShareFileClient
uid: '@azure/storage-file-share.ShareFileClient'
package: '@azure/storage-file-share'
summary: A ShareFileClient represents a URL to an Azure Storage file.
fullName: ShareFileClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      ShareFileClient(string, Credential_2 | TokenCredential,
      ShareClientOptions)
    uid: '@azure/storage-file-share.ShareFileClient.constructor'
    package: '@azure/storage-file-share'
    summary: Creates an instance of ShareFileClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ShareFileClient(url: string, credential?: Credential_2 |
        TokenCredential, options?: ShareClientOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a file.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a file or directory name includes %, file or directory name must be encoded in the URL.
                                Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
        - id: credential
          type: >-
            <xref uid="@azure/storage-file-share.Credential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: |-
            Such as , StorageSharedKeyCredential or TokenCredential,
                                             If not specified, AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareClientOptions" />
          description: Optional. Options to configure the HTTP pipeline.
  - name: ShareFileClient(string, Pipeline, ShareClientConfig)
    uid: '@azure/storage-file-share.ShareFileClient.constructor_1'
    package: '@azure/storage-file-share'
    summary: Creates an instance of ShareFileClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ShareFileClient(url: string, pipeline: Pipeline, options?:
        ShareClientConfig)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a file.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a file or directory name includes %, file or directory name must be encoded in the URL.
                                Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
        - id: pipeline
          type: <xref uid="@azure/storage-file-share.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareClientConfig" />
          description: ''
properties:
  - name: name
    uid: '@azure/storage-file-share.ShareFileClient.name'
    package: '@azure/storage-file-share'
    summary: The name of the file
    fullName: name
    remarks: ''
    isDeprecated: false
    syntax:
      content: string name
      return:
        description: ''
        type: string
  - name: path
    uid: '@azure/storage-file-share.ShareFileClient.path'
    package: '@azure/storage-file-share'
    summary: The full path of the file
    fullName: path
    remarks: ''
    isDeprecated: false
    syntax:
      content: string path
      return:
        description: ''
        type: string
  - name: shareName
    uid: '@azure/storage-file-share.ShareFileClient.shareName'
    package: '@azure/storage-file-share'
    summary: The share name corresponding to this file client
    fullName: shareName
    remarks: ''
    isDeprecated: false
    syntax:
      content: string shareName
      return:
        description: ''
        type: string
inheritedProperties:
  - name: accountName
    uid: '@azure/storage-file-share.ShareFileClient.accountName'
    package: '@azure/storage-file-share'
    summary: ''
    fullName: accountName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.accountName
  - name: url
    uid: '@azure/storage-file-share.ShareFileClient.url'
    package: '@azure/storage-file-share'
    summary: URL string value.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.url
methods:
  - name: abortCopyFromURL(string, FileAbortCopyFromURLOptions)
    uid: '@azure/storage-file-share.ShareFileClient.abortCopyFromURL'
    package: '@azure/storage-file-share'
    summary: >-
      Aborts a pending Copy File operation, and leaves a destination file with
      zero length and full

      metadata.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/abort-copy-file
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options?:
        FileAbortCopyFromURLOptions): Promise<FileAbortCopyResponse>
      parameters:
        - id: copyId
          type: string
          description: Id of the Copy File operation to abort.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileAbortCopyFromURLOptions" />
          description: Options to File Abort Copy From URL operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.FileAbortCopyResponse"
          />&gt;
  - name: clearRange(number, number, FileClearRangeOptions)
    uid: '@azure/storage-file-share.ShareFileClient.clearRange'
    package: '@azure/storage-file-share'
    summary: |-
      Clears the specified range and
      releases the space used in storage for that range.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function clearRange(offset: number, contentLength: number, options?:
        FileClearRangeOptions): Promise<FileUploadRangeResponse>
      parameters:
        - id: offset
          type: number
          description: ''
        - id: contentLength
          type: number
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.FileClearRangeOptions" />
          description: Options to File Clear Range operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileUploadRangeResponse" />&gt;
  - name: create(number, FileCreateOptions)
    uid: '@azure/storage-file-share.ShareFileClient.create'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new file or replaces a file. Note it only initializes the file
      with no content.


      See https://learn.microsoft.com/en-us/rest/api/storageservices/create-file
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(size: number, options?: FileCreateOptions):
        Promise<FileCreateResponse>
      parameters:
        - id: size
          type: number
          description: Specifies the maximum size in bytes for the file, up to 4 TB.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileCreateOptions" />
          description: Options to File Create operation.
      return:
        description: |-
          Response data for the File Create  operation.

          Example usage:

          ```js
          const content = "Hello world!";

          // Create the file
          await fileClient.create(content.length);
          console.log("Created file successfully!");

          // Then upload data to the file
          await fileClient.uploadRange(content, 0, content.length);
          console.log("Updated file successfully!")
          ```
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.FileCreateResponse"
          />&gt;
  - name: createHardLink(string, FileCreateHardLinkOptions)
    uid: '@azure/storage-file-share.ShareFileClient.createHardLink'
    package: '@azure/storage-file-share'
    summary: NFS only.  Creates a hard link to the file file specified by path.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createHardLink(targetFile: string, options?:
        FileCreateHardLinkOptions): Promise<FileCreateHardLinkResponse>
      parameters:
        - id: targetFile
          type: string
          description: >-
            Path of the file to create the hard link to, not including the
            share.
             For example: "targetDirectory/targetSubDirectory/.../targetFile"
        - id: options
          type: <xref uid="@azure/storage-file-share.FileCreateHardLinkOptions" />
          description: Options to create hard link operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileCreateHardLinkResponse" />&gt;
  - name: delete(FileDeleteOptions)
    uid: '@azure/storage-file-share.ShareFileClient.delete'
    package: '@azure/storage-file-share'
    summary: >-
      Removes the file from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.


      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-file2
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?: FileDeleteOptions):
        Promise<FileDeleteResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDeleteOptions" />
          description: Options to File Delete operation.
      return:
        description: Response data for the File Delete operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.FileDeleteResponse"
          />&gt;
  - name: deleteIfExists(FileDeleteOptions)
    uid: '@azure/storage-file-share.ShareFileClient.deleteIfExists'
    package: '@azure/storage-file-share'
    summary: >-
      Removes the file from the storage account if it exists.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.


      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-file2
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteIfExists(options?: FileDeleteOptions):
        Promise<FileDeleteIfExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDeleteOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileDeleteIfExistsResponse" />&gt;
  - name: download(number, number, FileDownloadOptions)
    uid: '@azure/storage-file-share.ShareFileClient.download'
    package: '@azure/storage-file-share'
    summary: >-
      Reads or downloads a file from the system, including its metadata and
      properties.


      * In Node.js, data returns in a Readable stream `readableStreamBody`

      * In browsers, data returns in a promise `contentAsBlob`


      See https://learn.microsoft.com/en-us/rest/api/storageservices/get-file
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function download(offset?: number, count?: number, options?:
        FileDownloadOptions): Promise<FileDownloadResponseModel>
      parameters:
        - id: offset
          type: number
          description: >-
            From which position of the file to download, greater than or equal
            to 0
        - id: count
          type: number
          description: >-
            How much data to be downloaded, greater than 0. Will download to the
            end when undefined
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDownloadOptions" />
          description: Options to File Download operation.
      return:
        description: |-
          Response data for the File Download operation.

          Example usage (Node.js):

          ```js
          // Download a file to a string
          const downloadFileResponse = await fileClient.download();
          console.log(
            "Downloaded file content:",
            (await streamToBuffer(downloadFileResponse.readableStreamBody)).toString()}
          );

          // A helper method used to read a Node.js readable stream into string
          async function streamToBuffer(readableStream) {
            return new Promise((resolve, reject) => {
              const chunks = [];
              readableStream.on("data", (data) => {
                chunks.push(typeof data === "string" ? Buffer.from(data) : data);
              });
              readableStream.on("end", () => {
                resolve(Buffer.concat(chunks));
              });
              readableStream.on("error", reject);
            });
          }
          ```

          Example usage (browsers):

          ```js
          // Download a file to a string
          const downloadFileResponse = await fileClient.download(0);
          console.log(
            "Downloaded file content:",
            await blobToString(await downloadFileResponse.blobBody)}
          );

          // A helper method used to convert a browser Blob into string.
          export async function blobToString(blob: Blob): Promise<string> {
            const fileReader = new FileReader();
            return new Promise<string>((resolve, reject) => {
              fileReader.onloadend = (ev: any) => {
                resolve(ev.target!.result);
              };
              fileReader.onerror = reject;
              fileReader.readAsText(blob);
            });
          }
          ```
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileDownloadResponseModel" />&gt;
  - name: downloadToBuffer(Buffer, number, number, FileDownloadToBufferOptions)
    uid: '@azure/storage-file-share.ShareFileClient.downloadToBuffer'
    package: '@azure/storage-file-share'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME.


      Downloads an Azure file in parallel to a buffer.

      Offset and count are optional, pass 0 for both to download the entire
      file.


      Warning: Buffers can only support files up to about one gigabyte on 32-bit
      systems or about two

      gigabytes on 64-bit systems due to limitations of Node.js/V8. For files
      larger than this size,

      consider
      [downloadToFile](xref:@azure/storage-file-share.ShareFileClient.downloadToFile).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function downloadToBuffer(buffer: Buffer, offset?: number, count?:
        number, options?: FileDownloadToBufferOptions): Promise<Buffer>
      parameters:
        - id: buffer
          type: Buffer
          description: Buffer to be fill, must have length larger than count
        - id: offset
          type: number
          description: From which position of the Azure File to download
        - id: count
          type: number
          description: >-
            How much data to be downloaded. Will download to the end when
            passing undefined
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDownloadToBufferOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;Buffer&gt;
  - name: downloadToBuffer(number, number, FileDownloadToBufferOptions)
    uid: '@azure/storage-file-share.ShareFileClient.downloadToBuffer_1'
    package: '@azure/storage-file-share'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME


      Downloads an Azure file in parallel to a buffer.

      Offset and count are optional, pass 0 for both to download the entire file


      Warning: Buffers can only support files up to about one gigabyte on 32-bit
      systems or about two

      gigabytes on 64-bit systems due to limitations of Node.js/V8. For files
      larger than this size,

      consider
      [downloadToFile](xref:@azure/storage-file-share.ShareFileClient.downloadToFile).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function downloadToBuffer(offset?: number, count?: number, options?:
        FileDownloadToBufferOptions): Promise<Buffer>
      parameters:
        - id: offset
          type: number
          description: From which position of the Azure file to download
        - id: count
          type: number
          description: >-
            How much data to be downloaded. Will download to the end when
            passing undefined
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDownloadToBufferOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;Buffer&gt;
  - name: downloadToFile(string, number, number, FileDownloadOptions)
    uid: '@azure/storage-file-share.ShareFileClient.downloadToFile'
    package: '@azure/storage-file-share'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME.


      Downloads an Azure Blob to a local file.

      Fails if the the given file path already exits.

      Offset and count are optional, pass 0 and undefined respectively to
      download the entire blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function downloadToFile(filePath: string, offset?: number, count?:
        number, options?: FileDownloadOptions):
        Promise<FileDownloadResponseModel>
      parameters:
        - id: filePath
          type: string
          description: ''
        - id: offset
          type: number
          description: From which position of the block blob to download.
        - id: count
          type: number
          description: >-
            How much data to be downloaded. Will download to the end when
            passing undefined.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDownloadOptions" />
          description: Options to Blob download options.
      return:
        description: |-
          The response data for blob download operation,
                                                          but with readableStreamBody set to undefined since its
                                                          content is already read and written into a local file
                                                          at the specified path.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileDownloadResponseModel" />&gt;
  - name: exists(FileExistsOptions)
    uid: '@azure/storage-file-share.ShareFileClient.exists'
    package: '@azure/storage-file-share'
    summary: >-
      Returns true if the specified file exists; false otherwise.


      NOTE: use this function with care since an existing file might be deleted
      by other clients or

      applications. Vice versa new files might be added by other clients or
      applications after this

      function completes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function exists(options?: FileExistsOptions): Promise<boolean>'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.FileExistsOptions" />
          description: options to Exists operation.
      return:
        description: ''
        type: Promise&lt;boolean&gt;
  - name: forceCloseAllHandles(FileForceCloseHandlesOptions)
    uid: '@azure/storage-file-share.ShareFileClient.forceCloseAllHandles'
    package: '@azure/storage-file-share'
    summary: >-
      Force close all handles for a file.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/force-close-handles
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseAllHandles(options?: FileForceCloseHandlesOptions):
        Promise<CloseHandlesInfo>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/storage-file-share.FileForceCloseHandlesOptions"
            />
          description: Options to force close handles operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.CloseHandlesInfo"
          />&gt;
  - name: forceCloseHandle(string, FileForceCloseHandlesOptions)
    uid: '@azure/storage-file-share.ShareFileClient.forceCloseHandle'
    package: '@azure/storage-file-share'
    summary: >-
      Force close a specific handle for a file.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/force-close-handles
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseHandle(handleId: string, options?:
        FileForceCloseHandlesOptions): Promise<FileForceCloseHandlesResponse>
      parameters:
        - id: handleId
          type: string
          description: |-
            Specific handle ID, cannot be asterisk "*".
                                     Use forceCloseAllHandles() to close all handles.
        - id: options
          type: >-
            <xref uid="@azure/storage-file-share.FileForceCloseHandlesOptions"
            />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileForceCloseHandlesResponse" />&gt;
  - name: generateSasStringToSign(FileGenerateSasUrlOptions)
    uid: '@azure/storage-file-share.ShareFileClient.generateSasStringToSign'
    package: '@azure/storage-file-share'
    summary: >-
      Only available for clients constructed with a shared key credential.


      Generates string to sign for a Service Shared Access Signature (SAS) URI
      based on the client properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSasStringToSign(options: FileGenerateSasUrlOptions):
        string
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.FileGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
  - name: generateSasUrl(FileGenerateSasUrlOptions)
    uid: '@azure/storage-file-share.ShareFileClient.generateSasUrl'
    package: '@azure/storage-file-share'
    summary: >-
      Only available for clients constructed with a shared key credential.


      Generates a Service Shared Access Signature (SAS) URI based on the client
      properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function generateSasUrl(options: FileGenerateSasUrlOptions): string'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.FileGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
  - name: getProperties(FileGetPropertiesOptions)
    uid: '@azure/storage-file-share.ShareFileClient.getProperties'
    package: '@azure/storage-file-share'
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the file. It does not return the content of the file.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-file-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: FileGetPropertiesOptions):
        Promise<FileGetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.FileGetPropertiesOptions" />
          description: Options to File Get Properties operation.
      return:
        description: Response data for the File Get Properties operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileGetPropertiesResponse" />&gt;
  - name: getRangeList(FileGetRangeListOptions)
    uid: '@azure/storage-file-share.ShareFileClient.getRangeList'
    package: '@azure/storage-file-share'
    summary: Returns the list of valid ranges for a file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRangeList(options?: FileGetRangeListOptions):
        Promise<FileGetRangeListResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.FileGetRangeListOptions" />
          description: Options to File Get range List operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileGetRangeListResponse" />&gt;
  - name: getRangeListDiff(string, FileGetRangeListOptions)
    uid: '@azure/storage-file-share.ShareFileClient.getRangeListDiff'
    package: '@azure/storage-file-share'
    summary: >-
      Returns the list of ranges that differ between a previous share snapshot
      and this file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRangeListDiff(prevShareSnapshot: string, options?:
        FileGetRangeListOptions): Promise<FileGetRangeListDiffResponse>
      parameters:
        - id: prevShareSnapshot
          type: string
          description: >-
            The previous snapshot parameter is an opaque DateTime value that
            specifies the previous share snapshot to compare with.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileGetRangeListOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileGetRangeListDiffResponse" />&gt;
  - name: getShareLeaseClient(string)
    uid: '@azure/storage-file-share.ShareFileClient.getShareLeaseClient'
    package: '@azure/storage-file-share'
    summary: >-
      Get a [ShareLeaseClient](xref:@azure/storage-file-share.ShareLeaseClient)
      that manages leases on the file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getShareLeaseClient(proposeLeaseId?: string): ShareLeaseClient'
      parameters:
        - id: proposeLeaseId
          type: string
          description: Initial proposed lease Id.
      return:
        description: A new ShareLeaseClient object for managing leases on the file.
        type: <xref uid="@azure/storage-file-share.ShareLeaseClient" />
  - name: listHandles(FileListHandlesOptions)
    uid: '@azure/storage-file-share.ShareFileClient.listHandles'
    package: '@azure/storage-file-share'
    summary: |-
      Returns an async iterable iterator to list all the handles.
      under the specified account.

      .byPage() returns an async iterable iterator to list the handles in pages.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listHandles(options?: FileListHandlesOptions):
        PagedAsyncIterableIterator<HandleItem, FileListHandlesResponse,
        PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.FileListHandlesOptions" />
          description: |-
            Options to list handles operation.

            An asyncIterableIterator that supports paging.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/storage-file-share.HandleItem" />, <xref
          uid="@azure/storage-file-share.FileListHandlesResponse" />, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: rename(string, FileRenameOptions)
    uid: '@azure/storage-file-share.ShareFileClient.rename'
    package: '@azure/storage-file-share'
    summary: |-
      Renames a file.
      This API only supports renaming a file in the same share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rename(destinationPath: string, options?: FileRenameOptions):
        Promise<{ destinationFileClient: ShareFileClient, fileRenameResponse:
        FileRenameResponse }>
      parameters:
        - id: destinationPath
          type: string
          description: >-
            Specifies the destination path to rename to. The path will be
            encoded to put into a URL to specify the destination.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileRenameOptions" />
          description: Options for the renaming operation.
      return:
        description: |-
          Response data for the file renaming operation.

          Example usage:

          ```js

          // Rename the file
          await fileClient.rename(destinationPath);
          console.log("Renamed file successfully!");
          ```
        type: >-
          Promise&lt;{ destinationFileClient: ShareFileClient,
          fileRenameResponse: FileRenameResponse }&gt;
  - name: resize(number, FileResizeOptions)
    uid: '@azure/storage-file-share.ShareFileClient.resize'
    package: '@azure/storage-file-share'
    summary: >-
      Resize file.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-file-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resize(length: number, options?: FileResizeOptions):
        Promise<FileSetHTTPHeadersResponse>
      parameters:
        - id: length
          type: number
          description: |-
            Resizes a file to the specified size in bytes.
                                   If the specified byte value is less than the current size of the file,
                                   then all ranges above the specified byte value are cleared.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileResizeOptions" />
          description: Options to File Resize operation.
      return:
        description: Response data for the File Set HTTP Headers operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileSetHTTPHeadersResponse" />&gt;
  - name: setHttpHeaders(FileHttpHeaders, FileSetHttpHeadersOptions)
    uid: '@azure/storage-file-share.ShareFileClient.setHttpHeaders'
    package: '@azure/storage-file-share'
    summary: >-
      Sets HTTP headers on the file.


      If no option provided, or no value provided for the file HTTP headers in
      the options,

      these file HTTP headers without a value will be cleared.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-file-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setHttpHeaders(fileHttpHeaders?: FileHttpHeaders, options?:
        FileSetHttpHeadersOptions): Promise<FileSetHTTPHeadersResponse>
      parameters:
        - id: fileHttpHeaders
          type: <xref uid="@azure/storage-file-share.FileHttpHeaders" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.FileSetHttpHeadersOptions" />
          description: Options to File Set HTTP Headers operation.
      return:
        description: Response data for the File Set HTTP Headers operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileSetHTTPHeadersResponse" />&gt;
  - name: setMetadata(Metadata, FileSetMetadataOptions)
    uid: '@azure/storage-file-share.ShareFileClient.setMetadata'
    package: '@azure/storage-file-share'
    summary: >-
      Updates user-defined metadata for the specified file.


      If no metadata defined in the option parameter, the file

      metadata will be removed.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-file-metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        FileSetMetadataOptions): Promise<FileSetMetadataResponse>
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-file-share.Metadata" />
          description: >-
            If no metadata provided, all existing directory metadata will be
            removed
        - id: options
          type: <xref uid="@azure/storage-file-share.FileSetMetadataOptions" />
          description: Options to File Set Metadata operation.
      return:
        description: Response data for the File Set Metadata operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileSetMetadataResponse" />&gt;
  - name: setProperties(FileProperties)
    uid: '@azure/storage-file-share.ShareFileClient.setProperties'
    package: '@azure/storage-file-share'
    summary: >-
      Sets properties on the file.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-file-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties?: FileProperties):
        Promise<SetPropertiesResponse>
      parameters:
        - id: properties
          type: <xref uid="@azure/storage-file-share.FileProperties" />
          description: |-
            File properties. For file HTTP headers(e.g. Content-Type),
                                                  if no values are provided, existing HTTP headers will be removed.
                                                  For other file properties(e.g. fileAttributes), if no values are provided,
                                                  existing values will be preserved.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.SetPropertiesResponse"
          />&gt;
  - name: startCopyFromURL(string, FileStartCopyOptions)
    uid: '@azure/storage-file-share.ShareFileClient.startCopyFromURL'
    package: '@azure/storage-file-share'
    summary: Copies a blob or file to a destination file within the storage account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, options?:
        FileStartCopyOptions): Promise<FileStartCopyResponse>
      parameters:
        - id: copySource
          type: string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.

            To copy a file to another file within the same storage account, you
            may use Shared Key to

            authenticate the source file. If you are copying a file from another
            storage account, or if you

            are copying a blob from the same storage account or another storage
            account, then you must

            authenticate the source file or blob using a shared access
            signature. If the source is a public

            blob, no authentication is required to perform the copy operation. A
            file in a share snapshot

            can also be specified as a copy source.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileStartCopyOptions" />
          description: Options to File Start Copy operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.FileStartCopyResponse"
          />&gt;
  - name: >-
      uploadData(Blob | ArrayBuffer | ArrayBufferView | Buffer,
      FileParallelUploadOptions)
    uid: '@azure/storage-file-share.ShareFileClient.uploadData'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new Azure File or replaces an existing Azure File, and then
      uploads a Buffer(Node)/Blob/ArrayBuffer/ArrayBufferView to it.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadData(data: Blob | ArrayBuffer | ArrayBufferView | Buffer,
        options?: FileParallelUploadOptions): Promise<void>
      parameters:
        - id: data
          type: Blob | ArrayBuffer | ArrayBufferView | Buffer
          description: Buffer(Node), Blob, ArrayBuffer or ArrayBufferView
        - id: options
          type: <xref uid="@azure/storage-file-share.FileParallelUploadOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: uploadFile(string, FileParallelUploadOptions)
    uid: '@azure/storage-file-share.ShareFileClient.uploadFile'
    package: '@azure/storage-file-share'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME.


      Creates a new Azure File or replaces an existing Azure File, and then
      uploads a local file to it.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadFile(filePath: string, options?:
        FileParallelUploadOptions): Promise<void>
      parameters:
        - id: filePath
          type: string
          description: Full path of local file
        - id: options
          type: <xref uid="@azure/storage-file-share.FileParallelUploadOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: uploadRange(RequestBodyType, number, number, FileUploadRangeOptions)
    uid: '@azure/storage-file-share.ShareFileClient.uploadRange'
    package: '@azure/storage-file-share'
    summary: >-
      Upload a range of bytes to a file. This operation can only be called on an
      existing file.

      It won't change the size, properties or metadata of the file.

      Both the start and count of the range must be specified. The range can be
      up to 4 MB in size.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadRange(body: RequestBodyType, offset: number,
        contentLength: number, options?: FileUploadRangeOptions):
        Promise<FileUploadRangeResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/storage-file-share.HttpRequestBody" />
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: offset
          type: number
          description: Offset position of the destination Azure File to upload.
        - id: contentLength
          type: number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileUploadRangeOptions" />
          description: Options to File Upload Range operation.
      return:
        description: |-
          Response data for the File Upload Range operation.

          Example usage:

          ```js
          const content = "Hello world!";

          // Create the file
          await fileClient.create(content.length);
          console.log("Created file successfully!");

          // Then upload data to the file
          await fileClient.uploadRange(content, 0, content.length);
          console.log("Updated file successfully!")
          ```
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileUploadRangeResponse" />&gt;
  - name: >-
      uploadRangeFromURL(string, number, number, number,
      FileUploadRangeFromURLOptions)
    uid: '@azure/storage-file-share.ShareFileClient.uploadRangeFromURL'
    package: '@azure/storage-file-share'
    summary: >-
      Upload a range of bytes to a file where the contents are read from a
      another file's URL.

      The range can be up to 4 MB in size.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadRangeFromURL(sourceURL: string, sourceOffset: number,
        destOffset: number, count: number, options?:
        FileUploadRangeFromURLOptions): Promise<FileUploadRangeFromURLResponse>
      parameters:
        - id: sourceURL
          type: string
          description: >-
            Specify a URL to the copy source, Shared Access Signature(SAS) maybe
            needed for authentication.
        - id: sourceOffset
          type: number
          description: >-
            The source offset to copy from. Pass 0 to copy from the beginning of
            source file.
        - id: destOffset
          type: number
          description: Offset of destination file.
        - id: count
          type: number
          description: Number of bytes to be uploaded from source file.
        - id: options
          type: >-
            <xref uid="@azure/storage-file-share.FileUploadRangeFromURLOptions"
            />
          description: Options to configure File - Upload Range from URL operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.FileUploadRangeFromURLResponse" />&gt;
  - name: >-
      uploadResetableStream((offset: number, count?: number) => ReadableStream,
      number, FileParallelUploadOptions)
    uid: '@azure/storage-file-share.ShareFileClient.uploadResetableStream'
    package: '@azure/storage-file-share'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME.


      Accepts a Node.js Readable stream factory, and uploads in blocks to an
      Azure File.

      The Readable stream factory must returns a Node.js Readable stream
      starting from the offset defined. The offset

      is the offset in the Azure file to be uploaded.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadResetableStream(streamFactory: (offset: number, count?:
        number) => ReadableStream, size: number, options?:
        FileParallelUploadOptions): Promise<void>
      parameters:
        - id: streamFactory
          type: '(offset: number, count?: number) =&gt; ReadableStream'
          description: |-
            Returns a Node.js Readable stream starting
                                                                             from the offset defined
        - id: size
          type: number
          description: Size of the Azure file
        - id: options
          type: <xref uid="@azure/storage-file-share.FileParallelUploadOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      uploadSeekableBlob((offset: number, size: number) => Blob, number,
      FileParallelUploadOptions)
    uid: '@azure/storage-file-share.ShareFileClient.uploadSeekableBlob'
    package: '@azure/storage-file-share'
    summary: >-
      ONLY AVAILABLE IN BROWSERS.


      Uploads a browser Blob object to an Azure file. Requires a blobFactory as
      the data source,

      which need to return a Blob object with the offset and size provided.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadSeekableBlob(blobFactory: (offset: number, size: number)
        => Blob, size: number, options?: FileParallelUploadOptions):
        Promise<void>
      parameters:
        - id: blobFactory
          type: '(offset: number, size: number) =&gt; Blob'
          description: ''
        - id: size
          type: number
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.FileParallelUploadOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: uploadStream(Readable, number, number, number, FileUploadStreamOptions)
    uid: '@azure/storage-file-share.ShareFileClient.uploadStream'
    package: '@azure/storage-file-share'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME.


      Creates a new Azure File or replaces an existing Azure File, and then
      uploads a Node.js Readable stream into it.

      This method will try to create an Azure File, then starts uploading chunk
      by chunk.

      Size of chunk is defined by `bufferSize` parameter.

      Please make sure potential size of stream doesn't exceed file size.


      PERFORMANCE IMPROVEMENT TIPS:

      * Input stream highWaterMark is better to set a same value with bufferSize
        parameter, which will avoid Buffer.concat() operations.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadStream(stream: Readable, size: number, bufferSize:
        number, maxBuffers: number, options?: FileUploadStreamOptions):
        Promise<void>
      parameters:
        - id: stream
          type: Readable
          description: Node.js Readable stream. Must be less or equal than file size.
        - id: size
          type: number
          description: |-
            Size of file to be created. Maximum size allowed is 4 TB.
                                 If this value is larger than stream size, there will be empty bytes in file tail.
        - id: bufferSize
          type: number
          description: >-
            Size of every buffer allocated in bytes, also the chunk/range size
            during
                                       the uploaded file. Size must be greater than 0 and lesser than or equal to 4 * 1024 * 1024 (4MB)
        - id: maxBuffers
          type: number
          description: |-
            Max buffers will allocate during uploading, positive correlation
                                       with max uploading concurrency
        - id: options
          type: <xref uid="@azure/storage-file-share.FileUploadStreamOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: withShareSnapshot(string)
    uid: '@azure/storage-file-share.ShareFileClient.withShareSnapshot'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new ShareFileClient object identical to the source but with the
      specified share snapshot timestamp.

      Provide "" will remove the snapshot and return a URL to the base
      ShareFileClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function withShareSnapshot(shareSnapshot: string): ShareFileClient'
      parameters:
        - id: shareSnapshot
          type: string
          description: The share snapshot timestamp.
      return:
        description: >-
          A new ShareFileClient object identical to the source but with the
          specified share snapshot timestamp.
        type: <xref uid="@azure/storage-file-share.ShareFileClient" />
extends: StorageClient
