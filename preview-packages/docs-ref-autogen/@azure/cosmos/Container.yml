### YamlMime:TSType
name: Container
uid: '@azure/cosmos.Container'
package: '@azure/cosmos'
summary: >-
  Operations for reading, replacing, or deleting a specific, existing container
  by id.


  See [Containers](xref:@azure/cosmos.Containers) for creating new containers,
  and reading/querying all containers; use `.containers`.


  Note: all these operations make calls against a fixed budget.

  You should design your system such that these calls scale sublinearly with
  your application.

  For instance, do not call `container(id).read()` before every single
  `item.read()` call, to ensure the container exists;

  do this once on application start up.
fullName: Container
remarks: ''
isDeprecated: false
type: class
properties:
  - name: conflicts
    uid: '@azure/cosmos.Container.conflicts'
    package: '@azure/cosmos'
    summary: |-
      Operations for reading and querying conflicts for the given container.

      For reading or deleting a specific conflict, use `.conflict(id)`.
    fullName: conflicts
    remarks: ''
    isDeprecated: false
    syntax:
      content: Conflicts conflicts
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Conflicts" />
  - name: database
    uid: '@azure/cosmos.Container.database'
    package: '@azure/cosmos'
    summary: ''
    fullName: database
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'database: Database'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Database" />
  - name: id
    uid: '@azure/cosmos.Container.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: items
    uid: '@azure/cosmos.Container.items'
    package: '@azure/cosmos'
    summary: >+
      Operations for creating new items, and reading/querying all items


      For reading, replacing, or deleting an existing item, use `.item(id)`.


      **Example**


      Create a new item

      ```ts snippet:ContainerItems

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const { resource: createdItem } = await container.items.create({
        id: "<item id>",
        properties: {},
      });

      ```

    fullName: items
    remarks: ''
    isDeprecated: false
    syntax:
      content: Items items
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Items" />
  - name: scripts
    uid: '@azure/cosmos.Container.scripts'
    package: '@azure/cosmos'
    summary: All operations for Stored Procedures, Triggers, and User Defined Functions
    fullName: scripts
    remarks: ''
    isDeprecated: false
    syntax:
      content: Scripts scripts
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Scripts" />
  - name: url
    uid: '@azure/cosmos.Container.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
methods:
  - name: conflict(string, PartitionKey)
    uid: '@azure/cosmos.Container.conflict'
    package: '@azure/cosmos'
    summary: >+
      Used to read, replace, or delete a specific, existing
      [Conflict](xref:@azure/cosmos.Conflict) by id.


      Use `.conflicts` for creating new conflicts, or querying/reading all
      conflicts.


      **Example**


      ```ts snippet:ConflictRead

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const container = database.container("Test Container");


      const { resource: conflict } = await
      container.conflict("<conflict-id>").read();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function conflict(id: string, partitionKey?: PartitionKey): Conflict'
      parameters:
        - id: id
          type: string
          description: The id of the [Conflict](xref:@azure/cosmos.Conflict).
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Conflict" />
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Container.delete'
    package: '@azure/cosmos'
    summary: |+
      Delete the container

      **Example**

      ```ts snippet:DatabaseDeleteContainer
      import { CosmosClient } from "@azure/cosmos";

      const endpoint = "https://your-account.documents.azure.com";
      const key = "<database account masterkey>";
      const client = new CosmosClient({ endpoint, key });

      await client.database("<db id>").container("<container id>").delete();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<ContainerResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
  - name: deleteAllItemsForPartitionKey(PartitionKey, RequestOptions)
    uid: '@azure/cosmos.Container.deleteAllItemsForPartitionKey'
    package: '@azure/cosmos'
    summary: >+
      Delete all documents belong to the container for the provided partition
      key value


      **Example**


      ```ts snippet:ContainerDeleteAllItemsForPartitionKey

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { container } = await database.containers.createIfNotExists({
        id: "Test Container",
        partitionKey: {
          paths: ["/state"],
        },
      });


      const cities = [
        { id: "1", name: "Olympia", state: "WA", isCapitol: true },
        { id: "2", name: "Redmond", state: "WA", isCapitol: false },
        { id: "3", name: "Olympia", state: "IL", isCapitol: false },
      ];

      for (const city of cities) {
        await container.items.create(city);
      }


      await container.deleteAllItemsForPartitionKey("WA");

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteAllItemsForPartitionKey(partitionKey: PartitionKey,
        options?: RequestOptions): Promise<ContainerResponse>
      parameters:
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: The partition key value of the items to be deleted
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
  - name: getFeedRanges()
    uid: '@azure/cosmos.Container.getFeedRanges'
    package: '@azure/cosmos'
    summary: >+


      **Example**


      ```ts snippet:ContainerGetFeedRanges

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const { resources: ranges } = await container.getFeedRanges();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getFeedRanges(): Promise<readonly FeedRange[]>'
      return:
        description: all the feed ranges for which changefeed could be fetched.
        type: Promise&lt;readonly FeedRange[]&gt;
  - name: getPartitionKeyDefinition()
    uid: '@azure/cosmos.Container.getPartitionKeyDefinition'
    package: '@azure/cosmos'
    summary: >-
      Gets the partition key definition first by looking into the cache
      otherwise by reading the collection.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: This method has been renamed to readPartitionKeyDefinition.
    syntax:
      content: >-
        function getPartitionKeyDefinition():
        Promise<ResourceResponse<PartitionKeyDefinition>>
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ResourceResponse" />&lt;<xref
          uid="@azure/cosmos.PartitionKeyDefinition" />&gt;&gt;
  - name: getQueryPlan(string | SqlQuerySpec)
    uid: '@azure/cosmos.Container.getQueryPlan'
    package: '@azure/cosmos'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getQueryPlan(query: string | SqlQuerySpec):
        Promise<Response<PartitionedQueryExecutionInfo>>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: ''
      return:
        description: ''
        type: Promise&lt;Response&lt;PartitionedQueryExecutionInfo&gt;&gt;
  - name: initializeEncryption()
    uid: '@azure/cosmos.Container.initializeEncryption'
    package: '@azure/cosmos'
    summary: >+
      Warms up encryption related caches for the container.


      **Example**


      ```ts snippet:ContainerIntializeEncryption

      import { ClientSecretCredential } from "@azure/identity";

      import {
        AzureKeyVaultEncryptionKeyResolver,
        CosmosClient,
        EncryptionType,
        EncryptionAlgorithm,
        ClientEncryptionIncludedPath,
        ClientEncryptionPolicy,
      } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const credentials = new ClientSecretCredential("<tenant-id>",
      "<client-id>", "<app-secret>");

      const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);

      const client = new CosmosClient({
        endpoint,
        key,
        clientEncryptionOptions: {
          keyEncryptionKeyResolver: keyResolver,
        },
      });

      const { database } = await client.databases.createIfNotExists({ id: "<db
      id>" });


      const paths = ["/path1", "/path2", "/path3"].map(
        (path) =>
          ({
            path: path,
            clientEncryptionKeyId: "< cek - id >",
            encryptionType: EncryptionType.DETERMINISTIC,
            encryptionAlgorithm: EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,
          }) as ClientEncryptionIncludedPath,
      );

      const clientEncryptionPolicy: ClientEncryptionPolicy = {
        includedPaths: paths,
        policyFormatVersion: 2,
      };

      const containerDefinition = {
        id: "Test Container",
        partitionKey: {
          paths: ["/id"],
        },
        clientEncryptionPolicy: clientEncryptionPolicy,
      };

      const { container } = await
      database.containers.createIfNotExists(containerDefinition);


      await container.initializeEncryption();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function initializeEncryption(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: item(string, PartitionKey)
    uid: '@azure/cosmos.Container.item'
    package: '@azure/cosmos'
    summary: >+
      Used to read, replace, or delete a specific, existing
      [Item](xref:@azure/cosmos.Item) by id.


      Use `.items` for creating new items, or querying/reading all items.


      **Example**


      Replace an item

      ```ts snippet:ContainerItem

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const { body: replacedItem } = await container
        .item("<item id>", "<partition key value>")
        .replace({ id: "<item id>", title: "Updated post", authorID: 5 });
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function item(id: string, partitionKeyValue?: PartitionKey): Item'
      parameters:
        - id: id
          type: string
          description: The id of the [Item](xref:@azure/cosmos.Item).
        - id: partitionKeyValue
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: The value of the [Item](xref:@azure/cosmos.Item) partition key
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Item" />
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Container.read'
    package: '@azure/cosmos'
    summary: >+
      Read the container's definition


      **Example**


      ```ts snippet:ContainerRead

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { resource: database } = await client.database("<db
      id>").container("<container id>").read();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<ContainerResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
  - name: readOffer(RequestOptions)
    uid: '@azure/cosmos.Container.readOffer'
    package: '@azure/cosmos'
    summary: >+
      Gets offer on container. If none exists, returns an OfferResponse with
      undefined.


      **Example**


      ```ts snippet:ContainerReadOffer

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { resource: offer } = await client
        .database("<db id>")
        .container("<container id>")
        .readOffer();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function readOffer(options?: RequestOptions): Promise<OfferResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.OfferResponse" />&gt;
  - name: readPartitionKeyRanges(FeedOptions)
    uid: '@azure/cosmos.Container.readPartitionKeyRanges'
    package: '@azure/cosmos'
    summary: >+
      Gets the partition key ranges for the container.


      **Example**


      ```ts snippet:ContainerReadPartitionKeyRanges

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const { resources: ranges } = await
      container.readPartitionKeyRanges().fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readPartitionKeyRanges(feedOptions?: FeedOptions):
        QueryIterator<PartitionKeyRange>
      parameters:
        - id: feedOptions
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: Options for the request.
      return:
        description: An iterator of partition key ranges.
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;PartitionKeyRange&gt;
  - name: replace(ContainerDefinition, RequestOptions)
    uid: '@azure/cosmos.Container.replace'
    package: '@azure/cosmos'
    summary: >+
      Replace the container's definition


      **Example**


      ```ts snippet:ContainerReplace

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const containerDefinition = {
        id: "Test Container",
        partitionKey: {
          paths: ["/key1"],
        },
        throughput: 1000,
      };

      const { container } = await
      database.containers.createIfNotExists(containerDefinition);


      containerDefinition.throughput = 400;

      const { container: replacedContainer } = await
      container.replace(containerDefinition);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replace(body: ContainerDefinition, options?: RequestOptions):
        Promise<ContainerResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ContainerDefinition" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
