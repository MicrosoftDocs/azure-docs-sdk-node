### YamlMime:TSType
name: KeyVaultAccessControlClient
uid: '@azure/keyvault-admin.KeyVaultAccessControlClient'
package: '@azure/keyvault-admin'
summary: |-
  The KeyVaultAccessControlClient provides methods to manage
  access control and role assignments in any given Azure Key Vault instance.
  The client supports creating, retrieving and deleting roles.
fullName: KeyVaultAccessControlClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      KeyVaultAccessControlClient(string, TokenCredential,
      AccessControlClientOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.constructor'
    package: '@azure/keyvault-admin'
    summary: |-
      Creates an instance of the KeyVaultAccessControlClient.

      Example usage:
      ```ts snippet:ReadmeSampleCreateAccessControlClient
      import { DefaultAzureCredential } from "@azure/identity";
      import { KeyVaultAccessControlClient } from "@azure/keyvault-admin";

      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;
      const credentials = new DefaultAzureCredential();
      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new KeyVaultAccessControlClient(vaultUrl: string, credential:
        TokenCredential, options?: AccessControlClientOptions)
      parameters:
        - id: vaultUrl
          type: string
          description: >-
            the URL of the Key Vault. It should have this shape:
            `https://${your-key-vault-name}.vault.azure.net`. You should
            validate that this URL references a valid Key Vault or Managed HSM
            resource. See https://aka.ms/azsdk/blog/vault-uri for details.
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: options
          type: <xref uid="@azure/keyvault-admin.AccessControlClientOptions" />
          description: >-
            Options used to configure Key Vault API requests. Omit this
            parameter to use the default configuration.
properties:
  - name: vaultUrl
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.vaultUrl'
    package: '@azure/keyvault-admin'
    summary: The base URL to the vault
    fullName: vaultUrl
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'vaultUrl: string'
      return:
        description: ''
        type: string
methods:
  - name: >-
      createRoleAssignment(string, string, string, string,
      CreateRoleAssignmentOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.createRoleAssignment'
    package: '@azure/keyvault-admin'
    summary: >-
      Creates a role assignment in an Azure Key Vault.


      Example usage:

      ```ts snippet:ReadmeSampleCreateRoleAssignment

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyVaultAccessControlClient } from "@azure/keyvault-admin";


      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;

      const credentials = new DefaultAzureCredential();

      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);


      const { value: roleDefinition } = await
      client.listRoleDefinitions("/").next();


      const principalId = "4871f6a6-374f-4b6b-8b0c-f5d84db823f6";

      const result = await client.createRoleAssignment(
        "/",
        "295c179b-9ad3-4117-99cd-b1aa66cf4517",
        roleDefinition.id,
        principalId,
      );

      ```

      Creates a new role assignment.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createRoleAssignment(roleScope: string, name: string,
        roleDefinitionId: string, principalId: string, options?:
        CreateRoleAssignmentOptions): Promise<KeyVaultRoleAssignment>
      parameters:
        - id: roleScope
          type: string
          description: The scope of the role assignment.
        - id: name
          type: string
          description: The name of the role assignment. Must be a UUID.
        - id: roleDefinitionId
          type: string
          description: The role definition ID used in the role assignment.
        - id: principalId
          type: string
          description: >-
            The principal ID assigned to the role. This maps to the ID inside
            the Active Directory. It can point to a user, service principal, or
            security group.
        - id: options
          type: <xref uid="@azure/keyvault-admin.CreateRoleAssignmentOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-admin.KeyVaultRoleAssignment"
          />&gt;
  - name: deleteRoleAssignment(string, string, DeleteRoleAssignmentOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.deleteRoleAssignment'
    package: '@azure/keyvault-admin'
    summary: >-
      Deletes role assignments previously created in an Azure Key Vault.


      Example usage:

      ```ts snippet:ReadmeSampleDeleteRoleAssignment

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyVaultAccessControlClient } from "@azure/keyvault-admin";


      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;

      const credentials = new DefaultAzureCredential();

      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);


      const { value: roleDefinition } = await
      client.listRoleDefinitions("/").next();

      const principalId = "4871f6a6-374f-4b6b-8b0c-f5d84db823f6";


      const roleAssignment = await client.createRoleAssignment(
        "/",
        "295c179b-9ad3-4117-99cd-b1aa66cf4517",
        roleDefinition.id,
        principalId,
      );


      await client.deleteRoleAssignment(roleAssignment.properties.scope,
      roleAssignment.name);

      ```

      Deletes an existing role assignment.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteRoleAssignment(roleScope: string, name: string, options?:
        DeleteRoleAssignmentOptions): Promise<void>
      parameters:
        - id: roleScope
          type: string
          description: The scope of the role assignment.
        - id: name
          type: string
          description: The name of the role assignment.
        - id: options
          type: <xref uid="@azure/keyvault-admin.DeleteRoleAssignmentOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: deleteRoleDefinition(string, string, DeleteRoleDefinitionOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.deleteRoleDefinition'
    package: '@azure/keyvault-admin'
    summary: >-
      Deletes a custom role definition previously created in an Azure Key Vault.


      Example usage:

      ```ts snippet:ReadmeSampleDeleteRoleDefinition

      import { DefaultAzureCredential } from "@azure/identity";

      import {
        KeyVaultAccessControlClient,
        KnownKeyVaultDataAction,
        KnownKeyVaultRoleScope,
      } from "@azure/keyvault-admin";


      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;

      const credentials = new DefaultAzureCredential();

      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);


      const permissions = [{ dataActions:
      [KnownKeyVaultDataAction.BackupHsmKeys] }];

      const roleDefinitionName = "23b8bb1a-39c0-4c89-a85b-dd3c99273a8a";

      const roleDefinition = await
      client.setRoleDefinition(KnownKeyVaultRoleScope.Global, {
        permissions,
        roleDefinitionName,
      });


      await client.deleteRoleDefinition("/", roleDefinition.name);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteRoleDefinition(roleScope: string, name: string, options?:
        DeleteRoleDefinitionOptions): Promise<void>
      parameters:
        - id: roleScope
          type: string
          description: The scope of the role definition.
        - id: name
          type: string
          description: The name of the role definition to delete.
        - id: options
          type: <xref uid="@azure/keyvault-admin.DeleteRoleDefinitionOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: getRoleAssignment(string, string, GetRoleAssignmentOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.getRoleAssignment'
    package: '@azure/keyvault-admin'
    summary: >-
      Gets a role assignments previously created in an Azure Key Vault.


      Example usage:

      ```ts snippet:ReadmeSampleGetRoleAssignment

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyVaultAccessControlClient } from "@azure/keyvault-admin";


      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;

      const credentials = new DefaultAzureCredential();

      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);


      const { value: roleDefinition } = await
      client.listRoleDefinitions("/").next();

      const principalId = "4871f6a6-374f-4b6b-8b0c-f5d84db823f6";


      let roleAssignment = await client.createRoleAssignment(
        "/",
        "295c179b-9ad3-4117-99cd-b1aa66cf4517",
        roleDefinition.id,
        principalId,
      );


      roleAssignment = await client.getRoleAssignment(
        roleAssignment.properties.scope,
        roleAssignment.name,
      );

      console.log(roleAssignment);

      ```

      Gets an existing role assignment.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRoleAssignment(roleScope: string, name: string, options?:
        GetRoleAssignmentOptions): Promise<KeyVaultRoleAssignment>
      parameters:
        - id: roleScope
          type: string
          description: The scope of the role assignment.
        - id: name
          type: string
          description: The name of the role assignment.
        - id: options
          type: <xref uid="@azure/keyvault-admin.GetRoleAssignmentOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-admin.KeyVaultRoleAssignment"
          />&gt;
  - name: getRoleDefinition(string, string, GetRoleDefinitionOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.getRoleDefinition'
    package: '@azure/keyvault-admin'
    summary: >-
      Gets a role definition from Azure Key Vault.


      Example usage:

      ```ts snippet:ReadmeSampleGetRoleDefinition

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyVaultAccessControlClient } from "@azure/keyvault-admin";


      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;

      const credentials = new DefaultAzureCredential();

      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);


      const roleDefinition = await client.getRoleDefinition("/",
      "b86a8fe4-44ce-4948-aee5-eccb2c155cd7");

      console.log(roleDefinition);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRoleDefinition(roleScope: string, name: string, options?:
        GetRoleDefinitionOptions): Promise<KeyVaultRoleDefinition>
      parameters:
        - id: roleScope
          type: string
          description: The scope of the role definition.
        - id: name
          type: string
          description: The name of the role definition.
        - id: options
          type: <xref uid="@azure/keyvault-admin.GetRoleDefinitionOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-admin.KeyVaultRoleDefinition"
          />&gt;
  - name: listRoleAssignments(string, ListRoleAssignmentsOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.listRoleAssignments'
    package: '@azure/keyvault-admin'
    summary: |-
      Iterates over all of the available role assignments in an Azure Key Vault.

      Example usage:
      ```ts snippet:ReadmeSampleListRoleAssignments
      import { DefaultAzureCredential } from "@azure/identity";
      import { KeyVaultAccessControlClient } from "@azure/keyvault-admin";

      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;
      const credentials = new DefaultAzureCredential();
      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);

      for await (const roleAssignment of client.listRoleAssignments("/")) {
        console.log("Role assignment: ", roleAssignment);
      }
      ```
      Lists all of the role assignments in a given scope.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRoleAssignments(roleScope: string, options?:
        ListRoleAssignmentsOptions):
        PagedAsyncIterableIterator<KeyVaultRoleAssignment,
        KeyVaultRoleAssignment[], PageSettings>
      parameters:
        - id: roleScope
          type: string
          description: The scope of the role assignments.
        - id: options
          type: <xref uid="@azure/keyvault-admin.ListRoleAssignmentsOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/keyvault-admin.KeyVaultRoleAssignment" />, <xref
          uid="@azure/keyvault-admin.KeyVaultRoleAssignment" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listRoleDefinitions(string, ListRoleDefinitionsOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.listRoleDefinitions'
    package: '@azure/keyvault-admin'
    summary: |-
      Iterates over all of the available role definitions in an Azure Key Vault.

      Example usage:
      ```ts snippet:ReadmeSampleListRoleDefinitions
      import { DefaultAzureCredential } from "@azure/identity";
      import { KeyVaultAccessControlClient } from "@azure/keyvault-admin";

      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;
      const credentials = new DefaultAzureCredential();
      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);

      for await (const roleDefinitions of client.listRoleDefinitions("/")) {
        console.log("Role definition: ", roleDefinitions);
      }
      ```
      Lists all of the role definition in a given scope.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRoleDefinitions(roleScope: string, options?:
        ListRoleDefinitionsOptions):
        PagedAsyncIterableIterator<KeyVaultRoleDefinition,
        KeyVaultRoleDefinition[], PageSettings>
      parameters:
        - id: roleScope
          type: string
          description: The scope of the role definition.
        - id: options
          type: <xref uid="@azure/keyvault-admin.ListRoleDefinitionsOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/keyvault-admin.KeyVaultRoleDefinition" />, <xref
          uid="@azure/keyvault-admin.KeyVaultRoleDefinition" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: setRoleDefinition(string, SetRoleDefinitionOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.setRoleDefinition'
    package: '@azure/keyvault-admin'
    summary: >-
      Creates or updates a role definition in an Azure Key Vault.


      Example usage:

      ```ts snippet:ReadmeSampleSetRoleDefinition

      import { DefaultAzureCredential } from "@azure/identity";

      import {
        KeyVaultAccessControlClient,
        KnownKeyVaultDataAction,
        KnownKeyVaultRoleScope,
      } from "@azure/keyvault-admin";


      const vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;

      const credentials = new DefaultAzureCredential();

      const client = new KeyVaultAccessControlClient(vaultUrl, credentials);


      const permissions = [{ dataActions:
      [KnownKeyVaultDataAction.BackupHsmKeys] }];

      const roleDefinitionName = "23b8bb1a-39c0-4c89-a85b-dd3c99273a8a";

      const roleDefinition = await
      client.setRoleDefinition(KnownKeyVaultRoleScope.Global, {
        permissions,
        roleDefinitionName,
      });

      console.log(roleDefinition);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setRoleDefinition(roleScope: string, options?:
        SetRoleDefinitionOptions): Promise<KeyVaultRoleDefinition>
      parameters:
        - id: roleScope
          type: string
          description: The scope of the role definition.
        - id: options
          type: <xref uid="@azure/keyvault-admin.SetRoleDefinitionOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-admin.KeyVaultRoleDefinition"
          />&gt;
