### YamlMime:TSType
name: Client
uid: azure-iot-device.Client
package: azure-iot-device
summary: >-
  IoT Hub device client used to connect a device with an Azure IoT hub.


  Users of the SDK should call one of the factory methods,

  [fromConnectionString](xref:azure-iot-device.Client.fromConnectionString)

  or
  [fromSharedAccessSignature](xref:azure-iot-device.Client.fromSharedAccessSignature)

  to create an IoT Hub device client.
fullName: Client
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: Client(DeviceTransport, string, BlobUploadClient, FileUploadInterface)
    uid: azure-iot-device.Client.constructor
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new Client(transport: DeviceTransport, connStr?: string,
        blobUploadClient?: BlobUploadClient, fileUploadApi?:
        FileUploadInterface)
      parameters:
        - id: transport
          type: <xref uid="azure-iot-device.DeviceTransport" />
          description: |-
            An object that implements the interface
                                               expected of a transport object, e.g.,
                                               [Http](xref:azure-iot-device-http.Http).
        - id: connStr
          type: string
          description: >-
            A connection string (optional: when not provided,
            updateSharedAccessSignature must be called to set the
            SharedAccessSignature token directly).
        - id: blobUploadClient
          type: BlobUploadClient
          description: An object that is capable of uploading a stream to a blob.
        - id: fileUploadApi
          type: FileUploadInterface
          description: >-
            An object that is used for communicating with IoT Hub for Blob
            Storage related actions.
inheritedProperties:
  - name: captureRejections
    uid: azure-iot-device.Client.captureRejections
    package: azure-iot-device
    summary: >-
      Value:
      [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)


      Change the default `captureRejections` option on all new `EventEmitter`
      objects.
    fullName: captureRejections
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejections: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> InternalClient.captureRejections
  - name: captureRejectionSymbol
    uid: azure-iot-device.Client.captureRejectionSymbol
    package: azure-iot-device
    summary: |-
      Value: `Symbol.for('nodejs.rejection')`

      See how to write a custom `rejection handler`.
    fullName: captureRejectionSymbol
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static captureRejectionSymbol: typeof captureRejectionSymbol'
      return:
        description: ''
        type: typeof captureRejectionSymbol
    inheritanceDescription: <b>Inherited From</b> InternalClient.captureRejectionSymbol
  - name: defaultMaxListeners
    uid: azure-iot-device.Client.defaultMaxListeners
    package: azure-iot-device
    summary: >-
      By default, a maximum of `10` listeners can be registered for any single

      event. This limit can be changed for individual `EventEmitter` instances

      using the `emitter.setMaxListeners(n)` method. To change the default

      for _all_`EventEmitter` instances, the `events.defaultMaxListeners`
      property

      can be used. If this value is not a positive number, a `RangeError` is
      thrown.


      Take caution when setting the `events.defaultMaxListeners` because the

      change affects _all_ `EventEmitter` instances, including those created
      before

      the change is made. However, calling `emitter.setMaxListeners(n)` still
      has

      precedence over `events.defaultMaxListeners`.


      This is not a hard limit. The `EventEmitter` instance will allow

      more listeners to be added but will output a trace warning to stderr
      indicating

      that a "possible EventEmitter memory leak" has been detected. For any
      single

      `EventEmitter`, the `emitter.getMaxListeners()` and
      `emitter.setMaxListeners()` methods can be used to

      temporarily avoid this warning:


      ```js

      import { EventEmitter } from 'node:events';

      const emitter = new EventEmitter();

      emitter.setMaxListeners(emitter.getMaxListeners() + 1);

      emitter.once('event', () => {
        // do stuff
        emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));
      });

      ```


      The `--trace-warnings` command-line flag can be used to display the

      stack trace for such warnings.


      The emitted warning can be inspected with `process.on('warning')` and will

      have the additional `emitter`, `type`, and `count` properties, referring
      to

      the event emitter instance, the event's name and the number of attached

      listeners, respectively.

      Its `name` property is set to `'MaxListenersExceededWarning'`.
    fullName: defaultMaxListeners
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> InternalClient.defaultMaxListeners
  - name: errorMonitor
    uid: azure-iot-device.Client.errorMonitor
    package: azure-iot-device
    summary: >-
      This symbol shall be used to install a listener for only monitoring
      `'error'` events. Listeners installed using this symbol are called before
      the regular `'error'` listeners are called.


      Installing a listener using this symbol does not change the behavior once
      an `'error'` event is emitted. Therefore, the process will still crash if
      no

      regular `'error'` listener is installed.
    fullName: errorMonitor
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static errorMonitor: typeof errorMonitor'
      return:
        description: ''
        type: typeof errorMonitor
    inheritanceDescription: <b>Inherited From</b> InternalClient.errorMonitor
inheritedMethods:
  - name: abandon(Message)
    uid: azure-iot-device.Client.abandon_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function abandon(message: Message): Promise<MessageAbandoned>'
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageAbandoned&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.abandon
  - name: abandon(Message, Callback<MessageAbandoned>)
    uid: azure-iot-device.Client.abandon
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function abandon(message: Message, abandonCallback:
        Callback<MessageAbandoned>)
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: abandonCallback
          type: Callback&lt;MessageAbandoned&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.abandon
  - name: 'addAbortListener(AbortSignal, (event: Event) => void)'
    uid: azure-iot-device.Client.addAbortListener
    package: azure-iot-device
    summary: >-
      Listens once to the `abort` event on the provided `signal`.


      Listening to the `abort` event on abort signals is unsafe and may

      lead to resource leaks since another third party with the signal can

      call `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change

      this since it would violate the web standard. Additionally, the original

      API makes it easy to forget to remove listeners.


      This API allows safely using `AbortSignal`s in Node.js APIs by solving
      these

      two issues by listening to the event such that `stopImmediatePropagation`
      does

      not prevent the listener from running.


      Returns a disposable so that it may be unsubscribed from more easily.


      ```js

      import { addAbortListener } from 'node:events';


      function example(signal) {
        let disposable;
        try {
          signal.addEventListener('abort', (e) => e.stopImmediatePropagation());
          disposable = addAbortListener(signal, (e) => {
            // Do something when signal is aborted.
          });
        } finally {
          disposable?.[Symbol.dispose]();
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function addAbortListener(signal: AbortSignal, resource: (event:
        Event) => void): Disposable
      parameters:
        - id: signal
          type: AbortSignal
          description: ''
        - id: resource
          type: '(event: Event) =&gt; void'
          description: ''
      return:
        description: Disposable that removes the `abort` listener.
        type: Disposable
    inheritanceDescription: <b>Inherited From</b> InternalClient.addAbortListener
  - name: 'addListener<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.addListener
    package: azure-iot-device
    summary: Alias for `emitter.on(eventName, listener)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): Client
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.addListener
  - name: complete(Message)
    uid: azure-iot-device.Client.complete_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function complete(message: Message): Promise<MessageCompleted>'
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageCompleted&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.complete
  - name: complete(Message, Callback<MessageCompleted>)
    uid: azure-iot-device.Client.complete
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function complete(message: Message, completeCallback:
        Callback<MessageCompleted>)
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: completeCallback
          type: Callback&lt;MessageCompleted&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.complete
  - name: emit<K>(string | symbol, AnyRest)
    uid: azure-iot-device.Client.emit
    package: azure-iot-device
    summary: >-
      Synchronously calls each of the listeners registered for the event named
      `eventName`, in the order they were registered, passing the supplied
      arguments

      to each.


      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      import { EventEmitter } from 'node:events';

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit<K>(eventName: string | symbol, args: AnyRest): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> InternalClient.emit
  - name: eventNames()
    uid: azure-iot-device.Client.eventNames
    package: azure-iot-device
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.

      ```js
      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventNames(): (string | symbol)[]'
      return:
        description: ''
        type: (string | symbol)[]
    inheritanceDescription: <b>Inherited From</b> InternalClient.eventNames
  - name: >-
      getEventListeners(EventEmitter<DefaultEventMap> | EventTarget, string |
      symbol)
    uid: azure-iot-device.Client.getEventListeners
    package: azure-iot-device
    summary: >-
      Returns a copy of the array of listeners for the event named `eventName`.


      For `EventEmitter`s this behaves exactly the same as calling `.listeners`
      on

      the emitter.


      For `EventTarget`s this is the only way to get the event listeners for the

      event target. This is useful for debugging and diagnostic purposes.


      ```js

      import { getEventListeners, EventEmitter } from 'node:events';


      {
        const ee = new EventEmitter();
        const listener = () => console.log('Events are fun');
        ee.on('foo', listener);
        console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]
      }

      {
        const et = new EventTarget();
        const listener = () => console.log('Events are fun');
        et.addEventListener('foo', listener);
        console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getEventListeners(emitter: EventEmitter<DefaultEventMap>
        | EventTarget, name: string | symbol): Function[]
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt; | EventTarget
          description: ''
        - id: name
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> InternalClient.getEventListeners
  - name: getMaxListeners()
    uid: azure-iot-device.Client.getMaxListeners
    package: azure-iot-device
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:EventEmitter.defaultMaxListeners>.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> InternalClient.getMaxListeners
  - name: getMaxListeners(EventEmitter<DefaultEventMap> | EventTarget)
    uid: azure-iot-device.Client.getMaxListeners_1
    package: azure-iot-device
    summary: >-
      Returns the currently set max amount of listeners.


      For `EventEmitter`s this behaves exactly the same as calling
      `.getMaxListeners` on

      the emitter.


      For `EventTarget`s this is the only way to get the max event listeners for
      the

      event target. If the number of event handlers on a single EventTarget
      exceeds

      the max set, the EventTarget will print a warning.


      ```js

      import { getMaxListeners, setMaxListeners, EventEmitter } from
      'node:events';


      {
        const ee = new EventEmitter();
        console.log(getMaxListeners(ee)); // 10
        setMaxListeners(11, ee);
        console.log(getMaxListeners(ee)); // 11
      }

      {
        const et = new EventTarget();
        console.log(getMaxListeners(et)); // 10
        setMaxListeners(11, et);
        console.log(getMaxListeners(et)); // 11
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getMaxListeners(emitter: EventEmitter<DefaultEventMap> |
        EventTarget): number
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt; | EventTarget
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> InternalClient.getMaxListeners
  - name: getTwin()
    uid: azure-iot-device.Client.getTwin_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTwin(): Promise<Twin>'
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-iot-device.Twin" />&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.getTwin
  - name: getTwin(Callback<Twin>)
    uid: azure-iot-device.Client.getTwin
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTwin(done: Callback<Twin>)'
      parameters:
        - id: done
          type: Callback&lt;<xref uid="azure-iot-device.Twin" />&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.getTwin
  - name: listenerCount(EventEmitter<DefaultEventMap>, string | symbol)
    uid: azure-iot-device.Client.listenerCount_1
    package: azure-iot-device
    summary: >-
      A class method that returns the number of listeners for the given
      `eventName` registered on the given `emitter`.


      ```js

      import { EventEmitter, listenerCount } from 'node:events';


      const myEmitter = new EventEmitter();

      myEmitter.on('event', () => {});

      myEmitter.on('event', () => {});

      console.log(listenerCount(myEmitter, 'event'));

      // Prints: 2

      ```
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Since v3.2.0 - Use `listenerCount` instead.
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter<DefaultEventMap>,
        eventName: string | symbol): number
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: The emitter to query
        - id: eventName
          type: string | symbol
          description: The event name
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> InternalClient.listenerCount
  - name: listenerCount<K>(string | symbol, Function)
    uid: azure-iot-device.Client.listenerCount
    package: azure-iot-device
    summary: >-
      Returns the number of listeners listening for the event named `eventName`.

      If `listener` is provided, it will return how many times the listener is
      found

      in the list of the listeners of the event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listenerCount<K>(eventName: string | symbol, listener?:
        Function): number
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event being listened for
        - id: listener
          type: Function
          description: The event handler function
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> InternalClient.listenerCount
  - name: listeners<K>(string | symbol)
    uid: azure-iot-device.Client.listeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.

      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> InternalClient.listeners
  - name: 'off<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.off
    package: azure-iot-device
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): Client
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.off
  - name: >-
      on(EventEmitter<DefaultEventMap>, string | symbol,
      StaticEventEmitterIteratorOptions)
    uid: azure-iot-device.Client.on_1
    package: azure-iot-device
    summary: >-
      ```js

      import { on, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ee = new EventEmitter();


      // Emit later on

      process.nextTick(() => {
        ee.emit('foo', 'bar');
        ee.emit('foo', 42);
      });


      for await (const event of on(ee, 'foo')) {
        // The execution of this inner block is synchronous and it
        // processes one event at a time (even with await). Do not use
        // if concurrent execution is required.
        console.log(event); // prints ['bar'] [42]
      }

      // Unreachable here

      ```


      Returns an `AsyncIterator` that iterates `eventName` events. It will throw

      if the `EventEmitter` emits `'error'`. It removes all listeners when

      exiting the loop. The `value` returned by each iteration is an array

      composed of the emitted event arguments.


      An `AbortSignal` can be used to cancel waiting on events:


      ```js

      import { on, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ac = new AbortController();


      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo', { signal: ac.signal })) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();


      process.nextTick(() => ac.abort());

      ```


      Use the `close` option to specify an array of event names that will end
      the iteration:


      ```js

      import { on, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ee = new EventEmitter();


      // Emit later on

      process.nextTick(() => {
        ee.emit('foo', 'bar');
        ee.emit('foo', 42);
        ee.emit('close');
      });


      for await (const event of on(ee, 'foo', { close: ['close'] })) {
        console.log(event); // prints ['bar'] [42]
      }

      // the loop will exit after 'close' is emitted

      console.log('done'); // prints 'done'

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventEmitter<DefaultEventMap>, eventName:
        string | symbol, options?: StaticEventEmitterIteratorOptions):
        AsyncIterator<any[], undefined, any>
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterIteratorOptions
          description: ''
      return:
        description: >-
          An `AsyncIterator` that iterates `eventName` events emitted by the
          `emitter`
        type: AsyncIterator&lt;any[], undefined, any&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.on
  - name: on(EventTarget, string, StaticEventEmitterIteratorOptions)
    uid: azure-iot-device.Client.on_1_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventTarget, eventName: string, options?:
        StaticEventEmitterIteratorOptions): AsyncIterator<any[], undefined, any>
      parameters:
        - id: emitter
          type: EventTarget
          description: ''
        - id: eventName
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterIteratorOptions
          description: ''
      return:
        description: ''
        type: AsyncIterator&lt;any[], undefined, any&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.on
  - name: 'on<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.on
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the end of the listeners array for the
      event

      named `eventName`. No checks are made to see if the `listener` has already

      been added. Multiple calls passing the same combination of `eventName` and

      `listener` will result in the `listener` being added, and called, multiple
      times.


      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added. The
      `emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): Client
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.on
  - name: >-
      once(EventEmitter<DefaultEventMap>, string | symbol,
      StaticEventEmitterOptions)
    uid: azure-iot-device.Client.once_1
    package: azure-iot-device
    summary: >-
      Creates a `Promise` that is fulfilled when the `EventEmitter` emits the
      given

      event or that is rejected if the `EventEmitter` emits `'error'` while
      waiting.

      The `Promise` will resolve with an array of all the arguments emitted to
      the

      given event.


      This method is intentionally generic and works with the web platform
      [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget)
      interface, which has no special`'error'` event

      semantics and does not listen to the `'error'` event.


      ```js

      import { once, EventEmitter } from 'node:events';

      import process from 'node:process';


      const ee = new EventEmitter();


      process.nextTick(() => {
        ee.emit('myevent', 42);
      });


      const [value] = await once(ee, 'myevent');

      console.log(value);


      const err = new Error('kaboom');

      process.nextTick(() => {
        ee.emit('error', err);
      });


      try {
        await once(ee, 'myevent');
      } catch (err) {
        console.error('error happened', err);
      }

      ```


      The special handling of the `'error'` event is only used when
      `events.once()` is used to wait for another event. If `events.once()` is
      used to wait for the

      '`error'` event itself, then it is treated as any other kind of event
      without

      special handling:


      ```js

      import { EventEmitter, once } from 'node:events';


      const ee = new EventEmitter();


      once(ee, 'error')
        .then(([err]) => console.log('ok', err.message))
        .catch((err) => console.error('error', err.message));

      ee.emit('error', new Error('boom'));


      // Prints: ok boom

      ```


      An `AbortSignal` can be used to cancel waiting for the event:


      ```js

      import { EventEmitter, once } from 'node:events';


      const ee = new EventEmitter();

      const ac = new AbortController();


      async function foo(emitter, event, signal) {
        try {
          await once(emitter, event, { signal });
          console.log('event emitted!');
        } catch (error) {
          if (error.name === 'AbortError') {
            console.error('Waiting for the event was canceled!');
          } else {
            console.error('There was an error', error.message);
          }
        }
      }


      foo(ee, 'foo', ac.signal);

      ac.abort(); // Abort waiting for the event

      ee.emit('foo'); // Prints: Waiting for the event was canceled!

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: EventEmitter<DefaultEventMap>, eventName:
        string | symbol, options?: StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: EventEmitter&lt;DefaultEventMap&gt;
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.once
  - name: once(EventTarget, string, StaticEventEmitterOptions)
    uid: azure-iot-device.Client.once_1_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: EventTarget, eventName: string, options?:
        StaticEventEmitterOptions): Promise<any[]>
      parameters:
        - id: emitter
          type: EventTarget
          description: ''
        - id: eventName
          type: string
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        description: ''
        type: Promise&lt;any[]&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.once
  - name: 'once<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.once
    package: azure-iot-device
    summary: >-
      Adds a **one-time** `listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.


      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added. The
      `emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function once<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): Client
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.once
  - name: open()
    uid: azure-iot-device.Client.open_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function open(): Promise<Connected>'
      return:
        description: ''
        type: Promise&lt;Connected&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.open
  - name: open(Callback<Connected>)
    uid: azure-iot-device.Client.open
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function open(openCallback: Callback<Connected>)'
      parameters:
        - id: openCallback
          type: Callback&lt;Connected&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.open
  - name: 'prependListener<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.prependListener
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`

      and `listener` will result in the `listener` being added, and called,
      multiple times.


      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): Client
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.prependListener
  - name: 'prependOnceListener<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.prependOnceListener
    package: azure-iot-device
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.


      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener<K>(eventName: string | symbol, listener:
        (args: any[]) => void): Client
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.prependOnceListener
  - name: rawListeners<K>(string | symbol)
    uid: azure-iot-device.Client.rawListeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).

      ```js
      import { EventEmitter } from 'node:events';
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rawListeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> InternalClient.rawListeners
  - name: reject(Message)
    uid: azure-iot-device.Client.reject_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function reject(message: Message): Promise<MessageRejected>'
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageRejected&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.reject
  - name: reject(Message, Callback<MessageRejected>)
    uid: azure-iot-device.Client.reject
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reject(message: Message, rejectCallback:
        Callback<MessageRejected>)
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: rejectCallback
          type: Callback&lt;MessageRejected&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.reject
  - name: removeAllListeners(string | symbol)
    uid: azure-iot-device.Client.removeAllListeners
    package: azure-iot-device
    summary: |-
      Removes all listeners, or those of the specified `eventName`.

      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(eventName?: string | symbol): Client'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.removeAllListeners
  - name: 'removeListener<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.removeListener
    package: azure-iot-device
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named `eventName`.


      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that any
      `removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      import { EventEmitter } from 'node:events';

      class MyEmitter extends EventEmitter {}

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')` listener is
      removed:


      ```js

      import { EventEmitter } from 'node:events';

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): Client
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.removeListener
  - name: sendEvent(Message)
    uid: azure-iot-device.Client.sendEvent_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function sendEvent(message: Message): Promise<MessageEnqueued>'
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageEnqueued&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.sendEvent
  - name: sendEvent(Message, Callback<MessageEnqueued>)
    uid: azure-iot-device.Client.sendEvent
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendEvent(message: Message, sendEventCallback:
        Callback<MessageEnqueued>)
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: sendEventCallback
          type: Callback&lt;MessageEnqueued&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.sendEvent
  - name: sendEventBatch(Message[])
    uid: azure-iot-device.Client.sendEventBatch_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function sendEventBatch(messages: Message[]): Promise<MessageEnqueued>'
      parameters:
        - id: messages
          type: <xref uid="azure-iot-device.Message" />[]
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageEnqueued&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.sendEventBatch
  - name: sendEventBatch(Message[], Callback<MessageEnqueued>)
    uid: azure-iot-device.Client.sendEventBatch
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendEventBatch(messages: Message[], sendEventBatchCallback:
        Callback<MessageEnqueued>)
      parameters:
        - id: messages
          type: <xref uid="azure-iot-device.Message" />[]
          description: ''
        - id: sendEventBatchCallback
          type: Callback&lt;MessageEnqueued&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.sendEventBatch
  - name: setMaxListeners(number)
    uid: azure-iot-device.Client.setMaxListeners
    package: azure-iot-device
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to `Infinity` (or `0`) to indicate an unlimited number of listeners.


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): Client'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
    inheritanceDescription: <b>Inherited From</b> InternalClient.setMaxListeners
  - name: setMaxListeners(number, (EventEmitter<DefaultEventMap> | EventTarget)[])
    uid: azure-iot-device.Client.setMaxListeners_1
    package: azure-iot-device
    summary: |-
      ```js
      import { setMaxListeners, EventEmitter } from 'node:events';

      const target = new EventTarget();
      const emitter = new EventEmitter();

      setMaxListeners(5, target, emitter);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function setMaxListeners(n?: number, eventTargets:
        (EventEmitter<DefaultEventMap> | EventTarget)[])
      parameters:
        - id: 'n'
          type: number
          description: >-
            A non-negative number. The maximum number of listeners per
            `EventTarget` event.
        - id: eventTargets
          type: (EventEmitter&lt;DefaultEventMap&gt; | EventTarget)[]
          description: >-
            Zero or more {EventTarget} or {EventEmitter} instances. If none are
            specified, `n` is set as the default max for all newly created
            {EventTarget} and {EventEmitter}

            objects.
    inheritanceDescription: <b>Inherited From</b> InternalClient.setMaxListeners
  - name: setRetryPolicy(RetryPolicy)
    uid: azure-iot-device.Client.setRetryPolicy
    package: azure-iot-device
    summary: >-
      Sets the retry policy used by the client on all operations. The default is
      [ExponentialBackoffWithJitter](xref:azure-iot-common.ExponentialBackoffWithJitter).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setRetryPolicy(policy: RetryPolicy)'
      parameters:
        - id: policy
          type: RetryPolicy
          description: >-
            {RetryPolicy}  The retry policy that should be used for all future
            operations.
    inheritanceDescription: <b>Inherited From</b> InternalClient.setRetryPolicy
  - name: setTransportOptions(any)
    uid: azure-iot-device.Client.setTransportOptions_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setTransportOptions(options: any): Promise<TransportConfigured>'
      parameters:
        - id: options
          type: any
          description: ''
      return:
        description: ''
        type: Promise&lt;TransportConfigured&gt;
    inheritanceDescription: <b>Inherited From</b> InternalClient.setTransportOptions
  - name: setTransportOptions(any, Callback<TransportConfigured>)
    uid: azure-iot-device.Client.setTransportOptions
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setTransportOptions(options: any, done:
        Callback<TransportConfigured>)
      parameters:
        - id: options
          type: any
          description: ''
        - id: done
          type: Callback&lt;TransportConfigured&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.setTransportOptions
  - name: >-
      updateSharedAccessSignature(string,
      Callback<SharedAccessSignatureUpdated>)
    uid: azure-iot-device.Client.updateSharedAccessSignature
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSharedAccessSignature(sharedAccessSignature: string,
        updateSasCallback?: Callback<SharedAccessSignatureUpdated>)
      parameters:
        - id: sharedAccessSignature
          type: string
          description: ''
        - id: updateSasCallback
          type: Callback&lt;SharedAccessSignatureUpdated&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.updateSharedAccessSignature
  - name: '[captureRejectionSymbol]<K>(Error, string | symbol, AnyRest)'
    uid: azure-iot-device.Client.[captureRejectionSymbol]
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function [captureRejectionSymbol]<K>(error: Error, event: string |
        symbol, args: AnyRest)
      parameters:
        - id: error
          type: Error
          description: ''
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
    inheritanceDescription: <b>Inherited From</b> InternalClient.__@captureRejectionSymbol@139
methods:
  - name: close()
    uid: azure-iot-device.Client.close_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<Disconnected>'
      return:
        description: ''
        type: Promise&lt;Disconnected&gt;
  - name: close(Callback<Disconnected>)
    uid: azure-iot-device.Client.close
    package: azure-iot-device
    summary: |-
      Closes the transport connection and destroys the client resources.

      *Note: After calling this method the Client object cannot be reused.*
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(closeCallback?: Callback<Disconnected>)'
      parameters:
        - id: closeCallback
          type: Callback&lt;Disconnected&gt;
          description: >-
            Optional function to call once the transport is disconnected and the
            client closed.
  - name: fromAuthenticationProvider(AuthenticationProvider, any)
    uid: azure-iot-device.Client.fromAuthenticationProvider
    package: azure-iot-device
    summary: >-
      Creates an IoT Hub device client from the given authentication method and
      using the given transport type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function fromAuthenticationProvider(authenticationProvider:
        AuthenticationProvider, transportCtor: any): Client
      parameters:
        - id: authenticationProvider
          type: AuthenticationProvider
          description: Object used to obtain the authentication parameters for the IoT hub.
        - id: transportCtor
          type: any
          description: Transport protocol used to connect to IoT hub.
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
  - name: fromConnectionString(string, any)
    uid: azure-iot-device.Client.fromConnectionString
    package: azure-iot-device
    summary: >-
      Creates an IoT Hub device client from the given connection string using
      the given transport type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connStr: string, transportCtor:
        any): Client
      parameters:
        - id: connStr
          type: string
          description: >-
            A connection string which encapsulates "device connect" permissions
            on an IoT hub.
        - id: transportCtor
          type: any
          description: A transport constructor.
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
  - name: fromSharedAccessSignature(string, any)
    uid: azure-iot-device.Client.fromSharedAccessSignature
    package: azure-iot-device
    summary: |-
      Creates an IoT Hub device client from the given
                         shared access signature using the given transport type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function fromSharedAccessSignature(sharedAccessSignature: string,
        transportCtor: any): Client
      parameters:
        - id: sharedAccessSignature
          type: string
          description: |-
            A shared access signature which encapsulates "device
                                             connect" permissions on an IoT hub.
        - id: transportCtor
          type: any
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
  - name: getBlobSharedAccessSignature(string)
    uid: azure-iot-device.Client.getBlobSharedAccessSignature_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getBlobSharedAccessSignature(blobName: string):
        Promise<UploadParams>
      parameters:
        - id: blobName
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;UploadParams&gt;
  - name: getBlobSharedAccessSignature(string, Callback<UploadParams>)
    uid: azure-iot-device.Client.getBlobSharedAccessSignature
    package: azure-iot-device
    summary: >-
      The `getBlobSharedAccessSignature` gets the linked storage account SAS
      Token from IoT Hub
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getBlobSharedAccessSignature(blobName: string, callback?:
        Callback<UploadParams>)
      parameters:
        - id: blobName
          type: string
          description: >-
            The name to use for the blob that will be created with the content
            of the stream.
        - id: callback
          type: Callback&lt;UploadParams&gt;
          description: Optional callback to call when the upload is complete.
  - name: notifyBlobUploadStatus(string, boolean, number, string)
    uid: azure-iot-device.Client.notifyBlobUploadStatus_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function notifyBlobUploadStatus(correlationId: string, isSuccess:
        boolean, statusCode: number, statusDescription: string): Promise<void>
      parameters:
        - id: correlationId
          type: string
          description: ''
        - id: isSuccess
          type: boolean
          description: ''
        - id: statusCode
          type: number
          description: ''
        - id: statusDescription
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: notifyBlobUploadStatus(string, boolean, number, string, ErrorCallback)
    uid: azure-iot-device.Client.notifyBlobUploadStatus
    package: azure-iot-device
    summary: >-
      The `notifyBlobUploadStatus` method sends IoT Hub the result of a blob
      upload.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function notifyBlobUploadStatus(correlationId: string, isSuccess:
        boolean, statusCode: number, statusDescription: string, callback?:
        ErrorCallback)
      parameters:
        - id: correlationId
          type: string
          description: >-
            An id for correlating a upload status to a specific blob. Generated
            during the call to `getBlobSharedAccessSignature`.
        - id: isSuccess
          type: boolean
          description: >-
            The success or failure status from the storage blob operation
            result.
        - id: statusCode
          type: number
          description: The HTTP status code associated with the storage blob result.
        - id: statusDescription
          type: string
          description: The description of the HTTP status code.
        - id: callback
          type: ErrorCallback
          description: Optional callback to call when the upload is complete.
  - name: >-
      onDeviceMethod(string, (request: DeviceMethodRequest, response:
      DeviceMethodResponse) => void)
    uid: azure-iot-device.Client.onDeviceMethod
    package: azure-iot-device
    summary: Registers a callback for a method named `methodName`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onDeviceMethod(methodName: string, callback: (request:
        DeviceMethodRequest, response: DeviceMethodResponse) => void)
      parameters:
        - id: methodName
          type: string
          description: Name of the method that will be handled by the callback
        - id: callback
          type: >-
            (request: DeviceMethodRequest, response: DeviceMethodResponse) =&gt;
            void
          description: >-
            Function that shall be called whenever a method request for the
            method called `methodName` is received.
  - name: setOptions(DeviceClientOptions)
    uid: azure-iot-device.Client.setOptions_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setOptions(options: DeviceClientOptions):
        Promise<TransportConfigured>
      parameters:
        - id: options
          type: <xref uid="azure-iot-device.DeviceClientOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;TransportConfigured&gt;
  - name: setOptions(DeviceClientOptions, Callback<TransportConfigured>)
    uid: azure-iot-device.Client.setOptions
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setOptions(options: DeviceClientOptions, done:
        Callback<TransportConfigured>)
      parameters:
        - id: options
          type: <xref uid="azure-iot-device.DeviceClientOptions" />
          description: ''
        - id: done
          type: Callback&lt;TransportConfigured&gt;
          description: ''
  - name: uploadToBlob(string, Stream, number)
    uid: azure-iot-device.Client.uploadToBlob_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadToBlob(blobName: string, stream: Stream, streamLength:
        number): Promise<void>
      parameters:
        - id: blobName
          type: string
          description: ''
        - id: stream
          type: Stream
          description: ''
        - id: streamLength
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: uploadToBlob(string, Stream, number, ErrorCallback)
    uid: azure-iot-device.Client.uploadToBlob
    package: azure-iot-device
    summary: The `uploadToBlob` method uploads a stream to a blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadToBlob(blobName: string, stream: Stream, streamLength:
        number, callback: ErrorCallback)
      parameters:
        - id: blobName
          type: string
          description: >-
            The name to use for the blob that will be created with the content
            of the stream.
        - id: stream
          type: Stream
          description: The data to that should be uploaded to the blob.
        - id: streamLength
          type: number
          description: The size of the data to that should be uploaded to the blob.
        - id: callback
          type: ErrorCallback
          description: ''
extends: InternalClient
