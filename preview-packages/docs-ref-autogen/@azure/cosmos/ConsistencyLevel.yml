### YamlMime:TSEnum
name: ConsistencyLevel
uid: '@azure/cosmos.ConsistencyLevel'
package: '@azure/cosmos'
summary: >-
  Represents the consistency levels supported for Azure Cosmos DB client
  operations.<br>

  The requested ConsistencyLevel must match or be weaker than that provisioned
  for the database account.

  Consistency levels.


  Consistency levels by order of strength are Strong, BoundedStaleness, Session,
  Consistent Prefix, and Eventual.


  See https://aka.ms/cosmos-consistency for more detailed documentation on
  Consistency Levels.
fullName: ConsistencyLevel
remarks: ''
isDeprecated: false
fields:
  - name: BoundedStaleness
    uid: '@azure/cosmos.ConsistencyLevel.BoundedStaleness'
    package: '@azure/cosmos'
    summary: >-
      Bounded Staleness guarantees that reads are not too out-of-date.

      This can be configured based on number of operations (MaxStalenessPrefix)
      or time (MaxStalenessIntervalInSeconds).
  - name: ConsistentPrefix
    uid: '@azure/cosmos.ConsistencyLevel.ConsistentPrefix'
    package: '@azure/cosmos'
    summary: >-
      ConsistentPrefix Consistency guarantees that reads will return some prefix
      of all writes with no gaps.

      All writes will be eventually be available for reads.
  - name: Eventual
    uid: '@azure/cosmos.ConsistencyLevel.Eventual'
    package: '@azure/cosmos'
    summary: |-
      Eventual Consistency guarantees that reads will return a subset of writes.
      All writes will be eventually be available for reads.
  - name: Session
    uid: '@azure/cosmos.ConsistencyLevel.Session'
    package: '@azure/cosmos'
    summary: >-
      Session Consistency guarantees monotonic reads (you never read old data,
      then new, then old again),

      monotonic writes (writes are ordered) and read your writes (your writes
      are immediately visible to your reads)

      within any single session.
  - name: Strong
    uid: '@azure/cosmos.ConsistencyLevel.Strong'
    package: '@azure/cosmos'
    summary: >-
      Strong Consistency guarantees that read operations always return the value
      that was last written.
