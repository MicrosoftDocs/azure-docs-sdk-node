### YamlMime:TSType
name: EventGridReceiverClient
uid: '@azure/eventgrid-namespaces.EventGridReceiverClient'
package: '@azure/eventgrid-namespaces'
summary: Event Grid Namespaces Client
fullName: EventGridReceiverClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      EventGridReceiverClient(string, AzureKeyCredential | TokenCredential,
      string, string, EventGridReceiverClientOptions)
    uid: '@azure/eventgrid-namespaces.EventGridReceiverClient.constructor'
    package: '@azure/eventgrid-namespaces'
    summary: Azure Messaging EventGrid Client
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventGridReceiverClient(endpoint: string, credential:
        AzureKeyCredential | TokenCredential, topicName: string,
        subscriptionName: string, options?: EventGridReceiverClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: ''
        - id: credential
          type: >-
            <xref uid="@azure/eventgrid-namespaces.AzureKeyCredential" /> |
            <xref uid="@azure/core-auth.TokenCredential" />
          description: ''
        - id: topicName
          type: string
          description: ''
        - id: subscriptionName
          type: string
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/eventgrid-namespaces.EventGridReceiverClientOptions" />
          description: ''
methods:
  - name: acknowledgeEvents(string[], AcknowledgeEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridReceiverClient.acknowledgeEvents'
    package: '@azure/eventgrid-namespaces'
    summary: >-
      Acknowledge batch of Cloud Events. The server responds with an HTTP 200
      status code if at least one

      event is successfully acknowledged. The response body will include the set
      of successfully acknowledged

      lockTokens, along with other failed lockTokens with their corresponding
      error information. Successfully

      acknowledged events will no longer be available to any consumer.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acknowledgeEvents(lockTokens: string[], options?:
        AcknowledgeEventsOptions): Promise<AcknowledgeResult>
      parameters:
        - id: lockTokens
          type: string[]
          description: Lock Tokens
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.AcknowledgeEventsOptions" />
          description: Options to Acknowledge
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/eventgrid-namespaces.AcknowledgeResult"
          />&gt;
  - name: receiveEvents<T>(ReceiveEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridReceiverClient.receiveEvents'
    package: '@azure/eventgrid-namespaces'
    summary: Receive Batch of Cloud Events from the Event Subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveEvents<T>(options?: ReceiveEventsOptions):
        Promise<ReceiveResult<T>>
      parameters:
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.ReceiveEventsOptions" />
          description: Options to receive
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/eventgrid-namespaces.ReceiveResult"
          />&lt;T&gt;&gt;
  - name: rejectEvents(string[], RejectEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridReceiverClient.rejectEvents'
    package: '@azure/eventgrid-namespaces'
    summary: Reject batch of Cloud Events.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rejectEvents(lockTokens: string[], options?:
        RejectEventsOptions): Promise<RejectResult>
      parameters:
        - id: lockTokens
          type: string[]
          description: Lock Tokens
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.RejectEventsOptions" />
          description: Options to reject
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/eventgrid-namespaces.RejectResult" />&gt;
  - name: releaseEvents(string[], ReleaseEventsOptions)
    uid: '@azure/eventgrid-namespaces.EventGridReceiverClient.releaseEvents'
    package: '@azure/eventgrid-namespaces'
    summary: >-
      Release batch of Cloud Events. The server responds with an HTTP 200 status
      code if at least one event is

      successfully released. The response body will include the set of
      successfully released lockTokens, along

      with other failed lockTokens with their corresponding error information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function releaseEvents(lockTokens: string[], options?:
        ReleaseEventsOptions): Promise<ReleaseResult>
      parameters:
        - id: lockTokens
          type: string[]
          description: Lock Tokens
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.ReleaseEventsOptions" />
          description: Options to release
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/eventgrid-namespaces.ReleaseResult"
          />&gt;
  - name: renewEventLocks(string[], RenewEventLocksOptions)
    uid: '@azure/eventgrid-namespaces.EventGridReceiverClient.renewEventLocks'
    package: '@azure/eventgrid-namespaces'
    summary: Renew lock for batch of Cloud Events.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function renewEventLocks(lockTokens: string[], options?:
        RenewEventLocksOptions): Promise<RenewLocksResult>
      parameters:
        - id: lockTokens
          type: string[]
          description: Lock Tokens
        - id: options
          type: <xref uid="@azure/eventgrid-namespaces.RenewEventLocksOptions" />
          description: Options to renew
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/eventgrid-namespaces.RenewLocksResult"
          />&gt;
