### YamlMime:TSType
name: User
uid: '@azure/cosmos.User'
package: '@azure/cosmos'
summary: >-
  Used to read, replace, and delete Users.


  Additionally, you can access the permissions for a given user via
  `user.permission` and `user.permissions`.


  See [Users](xref:@azure/cosmos.Users) to create, upsert, query, or read all.
fullName: User
remarks: ''
isDeprecated: false
type: class
properties:
  - name: database
    uid: '@azure/cosmos.User.database'
    package: '@azure/cosmos'
    summary: ''
    fullName: database
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'database: Database'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Database" />
  - name: id
    uid: '@azure/cosmos.User.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: permissions
    uid: '@azure/cosmos.User.permissions'
    package: '@azure/cosmos'
    summary: >-
      Operations for creating, upserting, querying, or reading all operations.


      See `client.permission(id)` to read, replace, or delete a specific
      Permission by id.
    fullName: permissions
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'permissions: Permissions'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Permissions" />
  - name: url
    uid: '@azure/cosmos.User.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
methods:
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.User.delete'
    package: '@azure/cosmos'
    summary: >+
      Delete the given [User](xref:@azure/cosmos.User).


      **Example**


      ```ts snippet:UserDelete

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      await database.user("<user-id>").delete();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<UserResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.UserResponse" />&gt;
  - name: permission(string)
    uid: '@azure/cosmos.User.permission'
    package: '@azure/cosmos'
    summary: >-
      Operations to read, replace, or delete a specific Permission by id.


      See `client.permissions` for creating, upserting, querying, or reading all
      operations.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function permission(id: string): Permission'
      parameters:
        - id: id
          type: string
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Permission" />
  - name: read(RequestOptions)
    uid: '@azure/cosmos.User.read'
    package: '@azure/cosmos'
    summary: >+
      Read the [UserDefinition](xref:@azure/cosmos.UserDefinition) for the given
      [User](xref:@azure/cosmos.User).


      **Example**


      ```ts snippet:UserRead

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { resource: user } = await database.user("<user-id>").read();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<UserResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.UserResponse" />&gt;
  - name: replace(UserDefinition, RequestOptions)
    uid: '@azure/cosmos.User.replace'
    package: '@azure/cosmos'
    summary: >+
      Replace the given [User](xref:@azure/cosmos.User)'s definition with the
      specified [UserDefinition](xref:@azure/cosmos.UserDefinition).


      **Example**


      ```ts snippet:UserReplace

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { resource: user } = await database.user("<user-id>").read();

      user.id = "<new user id>";


      await database.user("<user-id>").replace(user);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replace(body: UserDefinition, options?: RequestOptions):
        Promise<UserResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.UserDefinition" />
          description: >-
            The specified [UserDefinition](xref:@azure/cosmos.UserDefinition) to
            replace the definition.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.UserResponse" />&gt;
