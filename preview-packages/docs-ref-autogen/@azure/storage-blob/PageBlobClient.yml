### YamlMime:TSType
name: PageBlobClient
uid: '@azure/storage-blob.PageBlobClient'
package: '@azure/storage-blob'
summary: PageBlobClient defines a set of operations applicable to page blobs.
fullName: PageBlobClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: PageBlobClient(string, PipelineLike)
    uid: '@azure/storage-blob.PageBlobClient.constructor_2'
    package: '@azure/storage-blob'
    summary: Creates an instance of PageBlobClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new PageBlobClient(url: string, pipeline: PipelineLike)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage page blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob".
                                You can append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: pipeline
          type: <xref uid="@azure/storage-blob.PipelineLike" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      PageBlobClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-blob.PageBlobClient.constructor_1'
    package: '@azure/storage-blob'
    summary: >-
      Creates an instance of PageBlobClient.

      This method accepts an encoded URL or non-encoded URL pointing to a blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new PageBlobClient(url: string, credential: StorageSharedKeyCredential |
        AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage page blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-blob.AnonymousCredential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: Optional. Options to configure the HTTP pipeline.
  - name: PageBlobClient(string, string, string, StoragePipelineOptions)
    uid: '@azure/storage-blob.PageBlobClient.constructor'
    package: '@azure/storage-blob'
    summary: Creates an instance of PageBlobClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new PageBlobClient(connectionString: string, containerName: string,
        blobName: string, options?: StoragePipelineOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: containerName
          type: string
          description: Container name.
        - id: blobName
          type: string
          description: Blob name.
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: Optional. Options to configure the HTTP pipeline.
properties:
  - name: containerName
    uid: '@azure/storage-blob.PageBlobClient.containerName'
    package: '@azure/storage-blob'
    summary: The name of the storage container the blob is associated with.
    fullName: containerName
    remarks: ''
    isDeprecated: false
    syntax:
      content: string containerName
      return:
        description: ''
        type: string
  - name: name
    uid: '@azure/storage-blob.PageBlobClient.name'
    package: '@azure/storage-blob'
    summary: The name of the blob.
    fullName: name
    remarks: ''
    isDeprecated: false
    syntax:
      content: string name
      return:
        description: ''
        type: string
inheritedProperties:
  - name: accountName
    uid: '@azure/storage-blob.PageBlobClient.accountName'
    package: '@azure/storage-blob'
    summary: ''
    fullName: accountName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.accountName](xref:@azure/storage-blob.BlobClient.accountName)
  - name: credential
    uid: '@azure/storage-blob.PageBlobClient.credential'
    package: '@azure/storage-blob'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the `@azure/identity` package to authenticate requests to the
      service. You can also provide an object that implements the
      TokenCredential interface. If not specified, AnonymousCredential is used.
    fullName: credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        description: ''
        type: >-
          <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> | <xref
          uid="@azure/storage-blob.AnonymousCredential" /> | <xref
          uid="@azure/core-auth.TokenCredential" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.credential](xref:@azure/storage-blob.BlobClient.credential)
  - name: url
    uid: '@azure/storage-blob.PageBlobClient.url'
    package: '@azure/storage-blob'
    summary: Encoded URL string value.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.url](xref:@azure/storage-blob.BlobClient.url)
inheritedMethods:
  - name: abortCopyFromURL(string, BlobAbortCopyFromURLOptions)
    uid: '@azure/storage-blob.PageBlobClient.abortCopyFromURL'
    package: '@azure/storage-blob'
    summary: >-
      Aborts a pending asynchronous Copy Blob operation, and leaves a
      destination blob with zero

      length and full metadata. Version 2012-02-12 and newer.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options?:
        BlobAbortCopyFromURLOptions): Promise<BlobAbortCopyFromURLResponse>
      parameters:
        - id: copyId
          type: string
          description: Id of the Copy From URL operation.
        - id: options
          type: <xref uid="@azure/storage-blob.BlobAbortCopyFromURLOptions" />
          description: Optional options to the Blob Abort Copy From URL operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.BlobAbortCopyFromURLResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.abortCopyFromURL](xref:@azure/storage-blob.BlobClient.abortCopyFromURL)
  - name: beginCopyFromURL(string, BlobBeginCopyFromURLOptions)
    uid: '@azure/storage-blob.PageBlobClient.beginCopyFromURL'
    package: '@azure/storage-blob'
    summary: >-
      Asynchronously copies a blob to a destination within the storage account.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the copy is completed.

      You can also cancel a copy before it is completed by calling
      `cancelOperation` on the poller.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.


      In version 2012-02-12 and later, the source for a Copy Blob operation can
      be

      a committed blob in any Azure storage account.

      Beginning with version 2015-02-21, the source for a Copy Blob operation
      can be

      an Azure file in any Azure storage account.

      Only storage accounts created on or after June 7th, 2012 allow the Copy
      Blob

      operation to copy from another storage account.


      See https://learn.microsoft.com/en-us/rest/api/storageservices/copy-blob


      ```ts snippet:ClientsBeginCopyFromURL

      import { BlobServiceClient } from "@azure/storage-blob";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const blobServiceClient = new BlobServiceClient(
        `https://${account}.blob.core.windows.net`,
        new DefaultAzureCredential(),
      );


      const containerName = "<container name>";

      const blobName = "<blob name>";

      const containerClient =
      blobServiceClient.getContainerClient(containerName);

      const blobClient = containerClient.getBlobClient(blobName);


      // Example using automatic polling

      const automaticCopyPoller = await blobClient.beginCopyFromURL("url");

      const automaticResult = await automaticCopyPoller.pollUntilDone();


      // Example using manual polling

      const manualCopyPoller = await blobClient.beginCopyFromURL("url");

      while (!manualCopyPoller.isDone()) {
        await manualCopyPoller.poll();
      }

      const manualResult = manualCopyPoller.getResult();


      // Example using progress updates

      const progressUpdatesCopyPoller = await blobClient.beginCopyFromURL("url",
      {
        onProgress(state) {
          console.log(`Progress: ${state.copyProgress}`);
        },
      });

      const progressUpdatesResult = await
      progressUpdatesCopyPoller.pollUntilDone();


      // Example using a changing polling interval (default 15 seconds)

      const pollingIntervalCopyPoller = await blobClient.beginCopyFromURL("url",
      {
        intervalInMs: 1000, // poll blob every 1 second for copy progress
      });

      const pollingIntervalResult = await
      pollingIntervalCopyPoller.pollUntilDone();


      // Example using copy cancellation:

      const cancelCopyPoller = await blobClient.beginCopyFromURL("url");

      // cancel operation after starting it.

      try {
        await cancelCopyPoller.cancelOperation();
        // calls to get the result now throw PollerCancelledError
        cancelCopyPoller.getResult();
      } catch (err: any) {
        if (err.name === "PollerCancelledError") {
          console.log("The copy was cancelled.");
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCopyFromURL(copySource: string, options?:
        BlobBeginCopyFromURLOptions):
        Promise<PollerLikeWithCancellation<PollOperationState<BlobBeginCopyFromURLResponse>,
        BlobBeginCopyFromURLResponse>>
      parameters:
        - id: copySource
          type: string
          description: url to the source Azure Blob/File.
        - id: options
          type: <xref uid="@azure/storage-blob.BlobBeginCopyFromURLOptions" />
          description: Optional options to the Blob Start Copy From URL operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.PollerLikeWithCancellation"
          />&lt;<xref uid="@azure/storage-blob.PollOperationState" />&lt;<xref
          uid="@azure/storage-blob.BlobBeginCopyFromURLResponse" />&gt;, <xref
          uid="@azure/storage-blob.BlobBeginCopyFromURLResponse" />&gt;&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.beginCopyFromURL](xref:@azure/storage-blob.BlobClient.beginCopyFromURL)
  - name: createSnapshot(BlobCreateSnapshotOptions)
    uid: '@azure/storage-blob.PageBlobClient.createSnapshot'
    package: '@azure/storage-blob'
    summary: >-
      Creates a read-only snapshot of a blob.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createSnapshot(options?: BlobCreateSnapshotOptions):
        Promise<BlobCreateSnapshotResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobCreateSnapshotOptions" />
          description: Optional options to the Blob Create Snapshot operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobCreateSnapshotResponse"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.createSnapshot](xref:@azure/storage-blob.BlobClient.createSnapshot)
  - name: delete(BlobDeleteOptions)
    uid: '@azure/storage-blob.PageBlobClient.delete'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.


      See https://learn.microsoft.com/en-us/rest/api/storageservices/delete-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?: BlobDeleteOptions):
        Promise<BlobDeleteResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobDeleteOptions" />
          description: Optional options to Blob Delete operation.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/storage-blob.BlobDeleteResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.delete](xref:@azure/storage-blob.BlobClient.delete)
  - name: deleteIfExists(BlobDeleteOptions)
    uid: '@azure/storage-blob.PageBlobClient.deleteIfExists'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified blob or snapshot for deletion if it exists. The blob
      is later deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.


      See https://learn.microsoft.com/en-us/rest/api/storageservices/delete-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteIfExists(options?: BlobDeleteOptions):
        Promise<BlobDeleteIfExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobDeleteOptions" />
          description: Optional options to Blob Delete operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobDeleteIfExistsResponse"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.deleteIfExists](xref:@azure/storage-blob.BlobClient.deleteIfExists)
  - name: deleteImmutabilityPolicy(BlobDeleteImmutabilityPolicyOptions)
    uid: '@azure/storage-blob.PageBlobClient.deleteImmutabilityPolicy'
    package: '@azure/storage-blob'
    summary: Delete the immutablility policy on the blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteImmutabilityPolicy(options?:
        BlobDeleteImmutabilityPolicyOptions):
        Promise<BlobDeleteImmutabilityPolicyResponse>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.BlobDeleteImmutabilityPolicyOptions"
            />
          description: Optional options to delete immutability policy on the blob.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.BlobDeleteImmutabilityPolicyResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.deleteImmutabilityPolicy](xref:@azure/storage-blob.BlobClient.deleteImmutabilityPolicy)
  - name: download(number, number, BlobDownloadOptions)
    uid: '@azure/storage-blob.PageBlobClient.download'
    package: '@azure/storage-blob'
    summary: >-
      Reads or downloads a blob from the system, including its metadata and
      properties.

      You can also call Get Blob to read a snapshot.


      * In Node.js, data returns in a Readable stream readableStreamBody

      * In browsers, data returns in a promise blobBody


      See https://learn.microsoft.com/en-us/rest/api/storageservices/get-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function download(offset?: number, count?: number, options?:
        BlobDownloadOptions): Promise<BlobDownloadResponseParsed>
      parameters:
        - id: offset
          type: number
          description: >-
            From which position of the blob to download, greater than or equal
            to 0
        - id: count
          type: number
          description: >-
            How much data to be downloaded, greater than 0. Will download to the
            end when undefined
        - id: options
          type: <xref uid="@azure/storage-blob.BlobDownloadOptions" />
          description: >-
            Optional options to Blob Download operation.



            Example usage (Node.js):


            ```ts snippet:ReadmeSampleDownloadBlob_Node

            import { BlobServiceClient } from "@azure/storage-blob";

            import { DefaultAzureCredential } from "@azure/identity";


            const account = "<account>";

            const blobServiceClient = new BlobServiceClient(
              `https://${account}.blob.core.windows.net`,
              new DefaultAzureCredential(),
            );


            const containerName = "<container name>";

            const blobName = "<blob name>";

            const containerClient =
            blobServiceClient.getContainerClient(containerName);

            const blobClient = containerClient.getBlobClient(blobName);


            // Get blob content from position 0 to the end

            // In Node.js, get downloaded data by accessing
            downloadBlockBlobResponse.readableStreamBody

            const downloadBlockBlobResponse = await blobClient.download();

            if (downloadBlockBlobResponse.readableStreamBody) {
              const downloaded = await streamToString(downloadBlockBlobResponse.readableStreamBody);
              console.log(`Downloaded blob content: ${downloaded}`);
            }


            async function streamToString(stream: NodeJS.ReadableStream):
            Promise<string> {
              const result = await new Promise<Buffer<ArrayBuffer>>((resolve, reject) => {
                const chunks: Buffer[] = [];
                stream.on("data", (data) => {
                  chunks.push(Buffer.isBuffer(data) ? data : Buffer.from(data));
                });
                stream.on("end", () => {
                  resolve(Buffer.concat(chunks));
                });
                stream.on("error", reject);
              });
              return result.toString();
            }

            ```


            Example usage (browser):


            ```ts snippet:ReadmeSampleDownloadBlob_Browser

            import { BlobServiceClient } from "@azure/storage-blob";

            import { DefaultAzureCredential } from "@azure/identity";


            const account = "<account>";

            const blobServiceClient = new BlobServiceClient(
              `https://${account}.blob.core.windows.net`,
              new DefaultAzureCredential(),
            );


            const containerName = "<container name>";

            const blobName = "<blob name>";

            const containerClient =
            blobServiceClient.getContainerClient(containerName);

            const blobClient = containerClient.getBlobClient(blobName);


            // Get blob content from position 0 to the end

            // In browsers, get downloaded data by accessing
            downloadBlockBlobResponse.blobBody

            const downloadBlockBlobResponse = await blobClient.download();

            const blobBody = await downloadBlockBlobResponse.blobBody;

            if (blobBody) {
              const downloaded = await blobBody.text();
              console.log(`Downloaded blob content: ${downloaded}`);
            }

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobDownloadResponseParsed"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.download](xref:@azure/storage-blob.BlobClient.download)
  - name: downloadToBuffer(Buffer, number, number, BlobDownloadToBufferOptions)
    uid: '@azure/storage-blob.PageBlobClient.downloadToBuffer_1'
    package: '@azure/storage-blob'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME.


      Downloads an Azure Blob in parallel to a buffer.

      Offset and count are optional, downloads the entire blob if they are not
      provided.


      Warning: Buffers can only support files up to about one gigabyte on 32-bit
      systems or about two

      gigabytes on 64-bit systems due to limitations of Node.js/V8. For blobs
      larger than this size,

      consider
      [downloadToFile](xref:@azure/storage-blob.PageBlobClient.downloadToFile).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function downloadToBuffer(buffer: Buffer, offset?: number, count?:
        number, options?: BlobDownloadToBufferOptions): Promise<Buffer>
      parameters:
        - id: buffer
          type: Buffer
          description: Buffer to be fill, must have length larger than count
        - id: offset
          type: number
          description: From which position of the block blob to download(in bytes)
        - id: count
          type: number
          description: >-
            How much data(in bytes) to be downloaded. Will download to the end
            when passing undefined
        - id: options
          type: <xref uid="@azure/storage-blob.BlobDownloadToBufferOptions" />
          description: BlobDownloadToBufferOptions
      return:
        description: ''
        type: Promise&lt;Buffer&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.downloadToBuffer](xref:@azure/storage-blob.BlobClient.downloadToBuffer)
  - name: downloadToBuffer(number, number, BlobDownloadToBufferOptions)
    uid: '@azure/storage-blob.PageBlobClient.downloadToBuffer'
    package: '@azure/storage-blob'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME.


      Downloads an Azure Blob in parallel to a buffer.

      Offset and count are optional, downloads the entire blob if they are not
      provided.


      Warning: Buffers can only support files up to about one gigabyte on 32-bit
      systems or about two

      gigabytes on 64-bit systems due to limitations of Node.js/V8. For blobs
      larger than this size,

      consider
      [downloadToFile](xref:@azure/storage-blob.PageBlobClient.downloadToFile).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function downloadToBuffer(offset?: number, count?: number, options?:
        BlobDownloadToBufferOptions): Promise<Buffer>
      parameters:
        - id: offset
          type: number
          description: From which position of the block blob to download(in bytes)
        - id: count
          type: number
          description: >-
            How much data(in bytes) to be downloaded. Will download to the end
            when passing undefined
        - id: options
          type: <xref uid="@azure/storage-blob.BlobDownloadToBufferOptions" />
          description: BlobDownloadToBufferOptions
      return:
        description: ''
        type: Promise&lt;Buffer&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.downloadToBuffer](xref:@azure/storage-blob.BlobClient.downloadToBuffer)
  - name: downloadToFile(string, number, number, BlobDownloadOptions)
    uid: '@azure/storage-blob.PageBlobClient.downloadToFile'
    package: '@azure/storage-blob'
    summary: >-
      ONLY AVAILABLE IN NODE.JS RUNTIME.


      Downloads an Azure Blob to a local file.

      Fails if the the given file path already exits.

      Offset and count are optional, pass 0 and undefined respectively to
      download the entire blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function downloadToFile(filePath: string, offset?: number, count?:
        number, options?: BlobDownloadOptions):
        Promise<BlobDownloadResponseParsed>
      parameters:
        - id: filePath
          type: string
          description: ''
        - id: offset
          type: number
          description: From which position of the block blob to download.
        - id: count
          type: number
          description: >-
            How much data to be downloaded. Will download to the end when
            passing undefined.
        - id: options
          type: <xref uid="@azure/storage-blob.BlobDownloadOptions" />
          description: Options to Blob download options.
      return:
        description: |-
          The response data for blob download operation,
                                                          but with readableStreamBody set to undefined since its
                                                          content is already read and written into a local file
                                                          at the specified path.
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobDownloadResponseParsed"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.downloadToFile](xref:@azure/storage-blob.BlobClient.downloadToFile)
  - name: exists(BlobExistsOptions)
    uid: '@azure/storage-blob.PageBlobClient.exists'
    package: '@azure/storage-blob'
    summary: >-
      Returns true if the Azure blob resource represented by this client exists;
      false otherwise.


      NOTE: use this function with care since an existing blob might be deleted
      by other clients or

      applications. Vice versa new blobs might be added by other clients or
      applications after this

      function completes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function exists(options?: BlobExistsOptions): Promise<boolean>'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobExistsOptions" />
          description: options to Exists operation.
      return:
        description: ''
        type: Promise&lt;boolean&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.exists](xref:@azure/storage-blob.BlobClient.exists)
  - name: generateSasStringToSign(BlobGenerateSasUrlOptions)
    uid: '@azure/storage-blob.PageBlobClient.generateSasStringToSign'
    package: '@azure/storage-blob'
    summary: >-
      Only available for BlobClient constructed with a shared key credential.


      Generates string to sign for a Blob Service Shared Access Signature (SAS)
      URI based on

      the client properties and parameters passed in. The SAS is signed by the
      shared key credential of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSasStringToSign(options: BlobGenerateSasUrlOptions):
        string
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.generateSasStringToSign](xref:@azure/storage-blob.BlobClient.generateSasStringToSign)
  - name: generateSasUrl(BlobGenerateSasUrlOptions)
    uid: '@azure/storage-blob.PageBlobClient.generateSasUrl'
    package: '@azure/storage-blob'
    summary: >-
      Only available for BlobClient constructed with a shared key credential.


      Generates a Blob Service Shared Access Signature (SAS) URI based on the
      client properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSasUrl(options: BlobGenerateSasUrlOptions):
        Promise<string>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: Promise&lt;string&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.generateSasUrl](xref:@azure/storage-blob.BlobClient.generateSasUrl)
  - name: >-
      generateUserDelegationSasStringToSign(BlobGenerateSasUrlOptions,
      UserDelegationKey)
    uid: '@azure/storage-blob.PageBlobClient.generateUserDelegationSasStringToSign'
    package: '@azure/storage-blob'
    summary: >-
      Only available for BlobClient constructed with a shared key credential.


      Generates string to sign for a Blob Service Shared Access Signature (SAS)
      URI based on

      the client properties and parameters passed in. The SAS is signed by the
      input user delegation key.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateUserDelegationSasStringToSign(options:
        BlobGenerateSasUrlOptions, userDelegationKey: UserDelegationKey): string
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobGenerateSasUrlOptions" />
          description: Optional parameters.
        - id: userDelegationKey
          type: <xref uid="@azure/storage-blob.UserDelegationKey" />
          description: Return value of `blobServiceClient.getUserDelegationKey()`
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.generateUserDelegationSasStringToSign](xref:@azure/storage-blob.BlobClient.generateUserDelegationSasStringToSign)
  - name: generateUserDelegationSasUrl(BlobGenerateSasUrlOptions, UserDelegationKey)
    uid: '@azure/storage-blob.PageBlobClient.generateUserDelegationSasUrl'
    package: '@azure/storage-blob'
    summary: >-
      Generates a Blob Service Shared Access Signature (SAS) URI based on

      the client properties and parameters passed in. The SAS is signed by the
      input user delegation key.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateUserDelegationSasUrl(options:
        BlobGenerateSasUrlOptions, userDelegationKey: UserDelegationKey):
        Promise<string>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobGenerateSasUrlOptions" />
          description: Optional parameters.
        - id: userDelegationKey
          type: <xref uid="@azure/storage-blob.UserDelegationKey" />
          description: Return value of `blobServiceClient.getUserDelegationKey()`
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: Promise&lt;string&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.generateUserDelegationSasUrl](xref:@azure/storage-blob.BlobClient.generateUserDelegationSasUrl)
  - name: getAccountInfo(BlobGetAccountInfoOptions)
    uid: '@azure/storage-blob.PageBlobClient.getAccountInfo'
    package: '@azure/storage-blob'
    summary: >-
      The Get Account Information operation returns the sku name and account
      kind

      for the specified account.

      The Get Account Information operation is available on service versions
      beginning

      with version 2018-03-28.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-account-information
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccountInfo(options?: BlobGetAccountInfoOptions):
        Promise<BlobGetAccountInfoResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobGetAccountInfoOptions" />
          description: Options to the Service Get Account Info operation.
      return:
        description: Response data for the Service Get Account Info operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobGetAccountInfoResponse"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.getAccountInfo](xref:@azure/storage-blob.BlobClient.getAccountInfo)
  - name: getAppendBlobClient()
    uid: '@azure/storage-blob.PageBlobClient.getAppendBlobClient'
    package: '@azure/storage-blob'
    summary: Creates a AppendBlobClient object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAppendBlobClient(): AppendBlobClient'
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.AppendBlobClient" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.getAppendBlobClient](xref:@azure/storage-blob.BlobClient.getAppendBlobClient)
  - name: getBlobLeaseClient(string)
    uid: '@azure/storage-blob.PageBlobClient.getBlobLeaseClient'
    package: '@azure/storage-blob'
    summary: >-
      Get a [BlobLeaseClient](xref:@azure/storage-blob.BlobLeaseClient) that
      manages leases on the blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getBlobLeaseClient(proposeLeaseId?: string): BlobLeaseClient'
      parameters:
        - id: proposeLeaseId
          type: string
          description: Initial proposed lease Id.
      return:
        description: A new BlobLeaseClient object for managing leases on the blob.
        type: <xref uid="@azure/storage-blob.BlobLeaseClient" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.getBlobLeaseClient](xref:@azure/storage-blob.BlobClient.getBlobLeaseClient)
  - name: getBlockBlobClient()
    uid: '@azure/storage-blob.PageBlobClient.getBlockBlobClient'
    package: '@azure/storage-blob'
    summary: Creates a BlockBlobClient object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getBlockBlobClient(): BlockBlobClient'
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.BlockBlobClient" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.getBlockBlobClient](xref:@azure/storage-blob.BlobClient.getBlockBlobClient)
  - name: getPageBlobClient()
    uid: '@azure/storage-blob.PageBlobClient.getPageBlobClient'
    package: '@azure/storage-blob'
    summary: Creates a PageBlobClient object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getPageBlobClient(): PageBlobClient'
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.PageBlobClient" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.getPageBlobClient](xref:@azure/storage-blob.BlobClient.getPageBlobClient)
  - name: getProperties(BlobGetPropertiesOptions)
    uid: '@azure/storage-blob.PageBlobClient.getProperties'
    package: '@azure/storage-blob'
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the blob. It does not return the content of the blob.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-blob-properties


      WARNING: The `metadata` object returned in the response will have its keys
      in lowercase, even if

      they originally contained uppercase characters. This differs from the
      metadata keys returned by

      the methods of [ContainerClient](xref:@azure/storage-blob.ContainerClient)
      that list blobs using the `includeMetadata` option, which

      will retain their original casing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: BlobGetPropertiesOptions):
        Promise<BlobGetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobGetPropertiesOptions" />
          description: Optional options to Get Properties operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobGetPropertiesResponse"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.getProperties](xref:@azure/storage-blob.BlobClient.getProperties)
  - name: getTags(BlobGetTagsOptions)
    uid: '@azure/storage-blob.PageBlobClient.getTags'
    package: '@azure/storage-blob'
    summary: Gets the tags associated with the underlying blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getTags(options?: BlobGetTagsOptions):
        Promise<BlobGetTagsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobGetTagsOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/storage-blob.BlobGetTagsResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.getTags](xref:@azure/storage-blob.BlobClient.getTags)
  - name: setAccessTier(string, BlobSetTierOptions)
    uid: '@azure/storage-blob.PageBlobClient.setAccessTier'
    package: '@azure/storage-blob'
    summary: >-
      Sets the tier on a blob. The operation is allowed on a page blob in a
      premium

      storage account and on a block blob in a blob storage account (locally
      redundant

      storage only). A premium page blob's tier determines the allowed size,
      IOPS,

      and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive

      storage type. This operation does not update the blob's ETag.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setAccessTier(tier: string, options?: BlobSetTierOptions):
        Promise<BlobSetTierResponse>
      parameters:
        - id: tier
          type: string
          description: >-
            The tier to be set on the blob. Valid values are Hot, Cool, or
            Archive.
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSetTierOptions" />
          description: Optional options to the Blob Set Tier operation.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/storage-blob.BlobSetTierResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.setAccessTier](xref:@azure/storage-blob.BlobClient.setAccessTier)
  - name: setHTTPHeaders(BlobHttpHeaders, BlobSetHTTPHeadersOptions)
    uid: '@azure/storage-blob.PageBlobClient.setHTTPHeaders'
    package: '@azure/storage-blob'
    summary: >-
      Sets system properties on the blob.


      If no value provided, or no value provided for the specified blob HTTP
      headers,

      these blob HTTP headers without a value will be cleared.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setHTTPHeaders(blobHTTPHeaders?: BlobHttpHeaders, options?:
        BlobSetHTTPHeadersOptions): Promise<BlobSetHTTPHeadersResponse>
      parameters:
        - id: blobHTTPHeaders
          type: <xref uid="@azure/storage-blob.BlobHTTPHeaders" />
          description: |-
            If no value provided, or no value provided for
                                                              the specified blob HTTP headers, these blob HTTP
                                                              headers without a value will be cleared.
                                                              A common header to set is `blobContentType`
                                                              enabling the browser to provide functionality
                                                              based on file type.
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSetHTTPHeadersOptions" />
          description: Optional options to Blob Set HTTP Headers operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobSetHTTPHeadersResponse"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.setHTTPHeaders](xref:@azure/storage-blob.BlobClient.setHTTPHeaders)
  - name: >-
      setImmutabilityPolicy(BlobImmutabilityPolicy,
      BlobSetImmutabilityPolicyOptions)
    uid: '@azure/storage-blob.PageBlobClient.setImmutabilityPolicy'
    package: '@azure/storage-blob'
    summary: Set immutability policy on the blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setImmutabilityPolicy(immutabilityPolicy:
        BlobImmutabilityPolicy, options?: BlobSetImmutabilityPolicyOptions):
        Promise<BlobSetImmutabilityPolicyResponse>
      parameters:
        - id: immutabilityPolicy
          type: <xref uid="@azure/storage-blob.BlobImmutabilityPolicy" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSetImmutabilityPolicyOptions" />
          description: Optional options to set immutability policy on the blob.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.BlobSetImmutabilityPolicyResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.setImmutabilityPolicy](xref:@azure/storage-blob.BlobClient.setImmutabilityPolicy)
  - name: setLegalHold(boolean, BlobSetLegalHoldOptions)
    uid: '@azure/storage-blob.PageBlobClient.setLegalHold'
    package: '@azure/storage-blob'
    summary: Set legal hold on the blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setLegalHold(legalHoldEnabled: boolean, options?:
        BlobSetLegalHoldOptions): Promise<BlobSetLegalHoldResponse>
      parameters:
        - id: legalHoldEnabled
          type: boolean
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSetLegalHoldOptions" />
          description: Optional options to set legal hold on the blob.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobSetLegalHoldResponse"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.setLegalHold](xref:@azure/storage-blob.BlobClient.setLegalHold)
  - name: setMetadata(Metadata, BlobSetMetadataOptions)
    uid: '@azure/storage-blob.PageBlobClient.setMetadata'
    package: '@azure/storage-blob'
    summary: >-
      Sets user-defined metadata for the specified blob as one or more
      name-value pairs.


      If no option provided, or no metadata defined in the parameter, the blob

      metadata will be removed.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        BlobSetMetadataOptions): Promise<BlobSetMetadataResponse>
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-blob.Metadata" />
          description: |-
            Replace existing metadata with this value.
                                          If no value provided the existing metadata will be removed.
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSetMetadataOptions" />
          description: Optional options to Set Metadata operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobSetMetadataResponse"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.setMetadata](xref:@azure/storage-blob.BlobClient.setMetadata)
  - name: setTags(Tags, BlobSetTagsOptions)
    uid: '@azure/storage-blob.PageBlobClient.setTags'
    package: '@azure/storage-blob'
    summary: >-
      Sets tags on the underlying blob.

      A blob can have up to 10 tags. Tag keys must be between 1 and 128
      characters.  Tag values must be between 0 and 256 characters.

      Valid tag key and value characters include lower and upper case letters,
      digits (0-9),

      space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'),
      colon (':'), equals ('='), and underscore ('_').
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setTags(tags: Tags, options?: BlobSetTagsOptions):
        Promise<BlobSetTagsResponse>
      parameters:
        - id: tags
          type: <xref uid="@azure/storage-blob.Tags" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSetTagsOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/storage-blob.BlobSetTagsResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.setTags](xref:@azure/storage-blob.BlobClient.setTags)
  - name: syncCopyFromURL(string, BlobSyncCopyFromURLOptions)
    uid: '@azure/storage-blob.PageBlobClient.syncCopyFromURL'
    package: '@azure/storage-blob'
    summary: >-
      The synchronous Copy From URL operation copies a blob or an internet
      resource to a new blob. It will not

      return a response until the copy is complete.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function syncCopyFromURL(copySource: string, options?:
        BlobSyncCopyFromURLOptions): Promise<BlobCopyFromURLResponse>
      parameters:
        - id: copySource
          type: string
          description: >-
            The source URL to copy from, Shared Access Signature(SAS) maybe
            needed for authentication
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSyncCopyFromURLOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.BlobCopyFromURLResponse"
          />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.syncCopyFromURL](xref:@azure/storage-blob.BlobClient.syncCopyFromURL)
  - name: undelete(BlobUndeleteOptions)
    uid: '@azure/storage-blob.PageBlobClient.undelete'
    package: '@azure/storage-blob'
    summary: >-
      Restores the contents and metadata of soft deleted blob and any associated

      soft deleted snapshots. Undelete Blob is supported only on version
      2017-07-29

      or later.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/undelete-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function undelete(options?: BlobUndeleteOptions):
        Promise<BlobUndeleteResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.BlobUndeleteOptions" />
          description: Optional options to Blob Undelete operation.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/storage-blob.BlobUndeleteResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.undelete](xref:@azure/storage-blob.BlobClient.undelete)
  - name: withVersion(string)
    uid: '@azure/storage-blob.PageBlobClient.withVersion'
    package: '@azure/storage-blob'
    summary: |-
      Creates a new BlobClient object pointing to a version of this blob.
      Provide "" will remove the versionId and return a Client to the base blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function withVersion(versionId: string): BlobClient'
      parameters:
        - id: versionId
          type: string
          description: The versionId.
      return:
        description: A new BlobClient object pointing to the version of this blob.
        type: <xref uid="@azure/storage-blob.BlobClient" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BlobClient.withVersion](xref:@azure/storage-blob.BlobClient.withVersion)
methods:
  - name: clearPages(number, number, PageBlobClearPagesOptions)
    uid: '@azure/storage-blob.PageBlobClient.clearPages'
    package: '@azure/storage-blob'
    summary: |-
      Frees the specified pages from the page blob.

      See https://learn.microsoft.com/rest/api/storageservices/put-page
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function clearPages(offset?: number, count?: number, options?:
        PageBlobClearPagesOptions): Promise<PageBlobClearPagesResponse>
      parameters:
        - id: offset
          type: number
          description: Starting byte position of the pages to clear.
        - id: count
          type: number
          description: Number of bytes to clear.
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobClearPagesOptions" />
          description: Options to the Page Blob Clear Pages operation.
      return:
        description: Response data for the Page Blob Clear Pages operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.PageBlobClearPagesResponse"
          />&gt;
  - name: create(number, PageBlobCreateOptions)
    uid: '@azure/storage-blob.PageBlobClient.create'
    package: '@azure/storage-blob'
    summary: >-
      Creates a page blob of the specified length. Call uploadPages to upload
      data

      data to a page blob.


      See https://learn.microsoft.com/rest/api/storageservices/put-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(size: number, options?: PageBlobCreateOptions):
        Promise<PageBlobCreateResponse>
      parameters:
        - id: size
          type: number
          description: size of the page blob.
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobCreateOptions" />
          description: Options to the Page Blob Create operation.
      return:
        description: Response data for the Page Blob Create operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.PageBlobCreateResponse"
          />&gt;
  - name: createIfNotExists(number, PageBlobCreateIfNotExistsOptions)
    uid: '@azure/storage-blob.PageBlobClient.createIfNotExists'
    package: '@azure/storage-blob'
    summary: >-
      Creates a page blob of the specified length. Call uploadPages to upload
      data

      data to a page blob. If the blob with the same name already exists, the
      content

      of the existing blob will remain unchanged.


      See https://learn.microsoft.com/rest/api/storageservices/put-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(size: number, options?:
        PageBlobCreateIfNotExistsOptions):
        Promise<PageBlobCreateIfNotExistsResponse>
      parameters:
        - id: size
          type: number
          description: size of the page blob.
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobCreateIfNotExistsOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.PageBlobCreateIfNotExistsResponse" />&gt;
  - name: getPageRanges(number, number, PageBlobGetPageRangesOptions)
    uid: '@azure/storage-blob.PageBlobClient.getPageRanges'
    package: '@azure/storage-blob'
    summary: >-
      Returns the list of valid page ranges for a page blob or snapshot of a
      page blob.


      See https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPageRanges(offset?: number, count?: number, options?:
        PageBlobGetPageRangesOptions): Promise<PageBlobGetPageRangesResponse>
      parameters:
        - id: offset
          type: number
          description: Starting byte position of the page ranges.
        - id: count
          type: number
          description: Number of bytes to get.
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobGetPageRangesOptions" />
          description: Options to the Page Blob Get Ranges operation.
      return:
        description: Response data for the Page Blob Get Ranges operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.PageBlobGetPageRangesResponse" />&gt;
  - name: >-
      getPageRangesDiff(number, number, string,
      PageBlobGetPageRangesDiffOptions)
    uid: '@azure/storage-blob.PageBlobClient.getPageRangesDiff'
    package: '@azure/storage-blob'
    summary: >-
      Gets the collection of page ranges that differ between a specified
      snapshot and this page blob.


      See https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPageRangesDiff(offset: number, count: number, prevSnapshot:
        string, options?: PageBlobGetPageRangesDiffOptions):
        Promise<PageBlobGetPageRangesDiffResponse>
      parameters:
        - id: offset
          type: number
          description: Starting byte position of the page blob
        - id: count
          type: number
          description: Number of bytes to get ranges diff.
        - id: prevSnapshot
          type: string
          description: Timestamp of snapshot to retrieve the difference.
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobGetPageRangesDiffOptions" />
          description: Options to the Page Blob Get Page Ranges Diff operation.
      return:
        description: Response data for the Page Blob Get Page Range Diff operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.PageBlobGetPageRangesDiffResponse" />&gt;
  - name: >-
      getPageRangesDiffForManagedDisks(number, number, string,
      PageBlobGetPageRangesDiffOptions)
    uid: '@azure/storage-blob.PageBlobClient.getPageRangesDiffForManagedDisks'
    package: '@azure/storage-blob'
    summary: >-
      Gets the collection of page ranges that differ between a specified
      snapshot and this page blob for managed disks.


      See https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPageRangesDiffForManagedDisks(offset: number, count: number,
        prevSnapshotUrl: string, options?: PageBlobGetPageRangesDiffOptions):
        Promise<PageBlobGetPageRangesDiffResponse>
      parameters:
        - id: offset
          type: number
          description: Starting byte position of the page blob
        - id: count
          type: number
          description: Number of bytes to get ranges diff.
        - id: prevSnapshotUrl
          type: string
          description: URL of snapshot to retrieve the difference.
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobGetPageRangesDiffOptions" />
          description: Options to the Page Blob Get Page Ranges Diff operation.
      return:
        description: Response data for the Page Blob Get Page Range Diff operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.PageBlobGetPageRangesDiffResponse" />&gt;
  - name: listPageRanges(number, number, PageBlobListPageRangesOptions)
    uid: '@azure/storage-blob.PageBlobClient.listPageRanges'
    package: '@azure/storage-blob'
    summary: >-
      Returns an async iterable iterator to list of page ranges for a page blob.


      See https://learn.microsoft.com/rest/api/storageservices/get-page-ranges

       .byPage() returns an async iterable iterator to list of page ranges for a page blob.

      ```ts snippet:ClientsListPageBlobs

      import { BlobServiceClient } from "@azure/storage-blob";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const blobServiceClient = new BlobServiceClient(
        `https://${account}.blob.core.windows.net`,
        new DefaultAzureCredential(),
      );


      const containerName = "<container name>";

      const blobName = "<blob name>";

      const containerClient =
      blobServiceClient.getContainerClient(containerName);

      const pageBlobClient = containerClient.getPageBlobClient(blobName);


      // Example using `for await` syntax

      let i = 1;

      for await (const pageRange of pageBlobClient.listPageRanges()) {
        console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
      }


      // Example using `iter.next()` syntax

      i = 1;

      const iter = pageBlobClient.listPageRanges();

      let { value, done } = await iter.next();

      while (!done) {
        console.log(`Page range ${i++}: ${value.start} - ${value.end}`);
        ({ value, done } = await iter.next());
      }


      // Example using `byPage()` syntax

      i = 1;

      for await (const page of pageBlobClient.listPageRanges().byPage({
      maxPageSize: 20 })) {
        for (const pageRange of page.pageRange || []) {
          console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
        }
      }


      // Example using paging with a marker

      i = 1;

      let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;

      // Prints 2 page ranges

      if (response.pageRange) {
        for (const pageRange of response.pageRange) {
          console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
        }
      }

      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = pageBlobClient.listPageRanges().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      response = (await iterator.next()).value;

      // Prints 10 page ranges

      if (response.pageRange) {
        for (const pageRange of response.pageRange) {
          console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPageRanges(offset?: number, count?: number, options?:
        PageBlobListPageRangesOptions):
        PagedAsyncIterableIterator<PageRangeInfo,
        PageBlobGetPageRangesResponseModel, PageSettings>
      parameters:
        - id: offset
          type: number
          description: Starting byte position of the page ranges.
        - id: count
          type: number
          description: Number of bytes to get.
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobListPageRangesOptions" />
          description: Options to the Page Blob Get Ranges operation.
      return:
        description: An asyncIterableIterator that supports paging.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/storage-blob.PageRangeInfo" />, <xref
          uid="@azure/storage-blob.PageBlobGetPageRangesResponseModel" />, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listPageRangesDiff(number, number, string,
      PageBlobListPageRangesDiffOptions)
    uid: '@azure/storage-blob.PageBlobClient.listPageRangesDiff'
    package: '@azure/storage-blob'
    summary: >-
      Returns an async iterable iterator to list of page ranges that differ
      between a specified snapshot and this page blob.


      See https://learn.microsoft.com/rest/api/storageservices/get-page-ranges

       .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.

      ```ts snippet:ClientsListPageBlobsDiff

      import { BlobServiceClient } from "@azure/storage-blob";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const blobServiceClient = new BlobServiceClient(
        `https://${account}.blob.core.windows.net`,
        new DefaultAzureCredential(),
      );


      const containerName = "<container name>";

      const blobName = "<blob name>";

      const containerClient =
      blobServiceClient.getContainerClient(containerName);

      const pageBlobClient = containerClient.getPageBlobClient(blobName);


      const offset = 0;

      const count = 1024;

      const previousSnapshot = "<previous snapshot>";

      // Example using `for await` syntax

      let i = 1;

      for await (const pageRange of pageBlobClient.listPageRangesDiff(offset,
      count, previousSnapshot)) {
        console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
      }


      // Example using `iter.next()` syntax

      i = 1;

      const iter = pageBlobClient.listPageRangesDiff(offset, count,
      previousSnapshot);

      let { value, done } = await iter.next();

      while (!done) {
        console.log(`Page range ${i++}: ${value.start} - ${value.end}`);
        ({ value, done } = await iter.next());
      }


      // Example using `byPage()` syntax

      i = 1;

      for await (const page of pageBlobClient
        .listPageRangesDiff(offset, count, previousSnapshot)
        .byPage({ maxPageSize: 20 })) {
        for (const pageRange of page.pageRange || []) {
          console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
        }
      }


      // Example using paging with a marker

      i = 1;

      let iterator = pageBlobClient
        .listPageRangesDiff(offset, count, previousSnapshot)
        .byPage({ maxPageSize: 2 });
      let response = (await iterator.next()).value;

      // Prints 2 page ranges

      if (response.pageRange) {
        for (const pageRange of response.pageRange) {
          console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
        }
      }

      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = pageBlobClient
        .listPageRangesDiff(offset, count, previousSnapshot)
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await iterator.next()).value;

      // Prints 10 page ranges

      if (response.pageRange) {
        for (const pageRange of response.pageRange) {
          console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPageRangesDiff(offset: number, count: number, prevSnapshot:
        string, options?: PageBlobListPageRangesDiffOptions):
        PagedAsyncIterableIterator<PageRangeInfo,
        PageBlobGetPageRangesDiffResponseModel, PageSettings>
      parameters:
        - id: offset
          type: number
          description: Starting byte position of the page ranges.
        - id: count
          type: number
          description: Number of bytes to get.
        - id: prevSnapshot
          type: string
          description: Timestamp of snapshot to retrieve the difference.
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobListPageRangesDiffOptions" />
          description: Options to the Page Blob Get Ranges operation.
      return:
        description: An asyncIterableIterator that supports paging.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/storage-blob.PageRangeInfo" />, <xref
          uid="@azure/storage-blob.PageBlobGetPageRangesDiffResponseModel" />,
          <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: resize(number, PageBlobResizeOptions)
    uid: '@azure/storage-blob.PageBlobClient.resize'
    package: '@azure/storage-blob'
    summary: >-
      Resizes the page blob to the specified size (which must be a multiple of
      512).


      See
      https://learn.microsoft.com/rest/api/storageservices/set-blob-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resize(size: number, options?: PageBlobResizeOptions):
        Promise<PageBlobResizeResponse>
      parameters:
        - id: size
          type: number
          description: Target size
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobResizeOptions" />
          description: Options to the Page Blob Resize operation.
      return:
        description: Response data for the Page Blob Resize operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.PageBlobResizeResponse"
          />&gt;
  - name: startCopyIncremental(string, PageBlobStartCopyIncrementalOptions)
    uid: '@azure/storage-blob.PageBlobClient.startCopyIncremental'
    package: '@azure/storage-blob'
    summary: >-
      Begins an operation to start an incremental copy from one page blob's
      snapshot to this page blob.

      The snapshot is copied such that only the differential changes between the
      previously

      copied snapshot are transferred to the destination.

      The copied snapshots are complete copies of the original snapshot and can
      be read or copied from as usual.


      See
      https://learn.microsoft.com/rest/api/storageservices/incremental-copy-blob

      See
      https://learn.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startCopyIncremental(copySource: string, options?:
        PageBlobStartCopyIncrementalOptions):
        Promise<PageBlobCopyIncrementalResponse>
      parameters:
        - id: copySource
          type: string
          description: |-
            Specifies the name of the source page blob snapshot. For example,
                                       https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.PageBlobStartCopyIncrementalOptions"
            />
          description: Options to the Page Blob Copy Incremental operation.
      return:
        description: Response data for the Page Blob Copy Incremental operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.PageBlobCopyIncrementalResponse" />&gt;
  - name: >-
      updateSequenceNumber(SequenceNumberActionType, number,
      PageBlobUpdateSequenceNumberOptions)
    uid: '@azure/storage-blob.PageBlobClient.updateSequenceNumber'
    package: '@azure/storage-blob'
    summary: >-
      Sets a page blob's sequence number.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSequenceNumber(sequenceNumberAction:
        SequenceNumberActionType, sequenceNumber?: number, options?:
        PageBlobUpdateSequenceNumberOptions):
        Promise<PageBlobUpdateSequenceNumberResponse>
      parameters:
        - id: sequenceNumberAction
          type: <xref uid="@azure/storage-blob.SequenceNumberActionType" />
          description: Indicates how the service should modify the blob's sequence number.
        - id: sequenceNumber
          type: number
          description: Required if sequenceNumberAction is max or update
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.PageBlobUpdateSequenceNumberOptions"
            />
          description: Options to the Page Blob Update Sequence Number operation.
      return:
        description: Response data for the Page Blob Update Sequence Number operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.PageBlobUpdateSequenceNumberResponse" />&gt;
  - name: uploadPages(RequestBodyType, number, number, PageBlobUploadPagesOptions)
    uid: '@azure/storage-blob.PageBlobClient.uploadPages'
    package: '@azure/storage-blob'
    summary: >-
      Writes 1 or more pages to the page blob. The start and end offsets must be
      a multiple of 512.


      See https://learn.microsoft.com/rest/api/storageservices/put-page
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadPages(body: RequestBodyType, offset: number, count:
        number, options?: PageBlobUploadPagesOptions):
        Promise<PageBlobUploadPagesResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/storage-blob.HttpRequestBody" />
          description: Data to upload
        - id: offset
          type: number
          description: Offset of destination page blob
        - id: count
          type: number
          description: Content length of the body, also number of bytes to be uploaded
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobUploadPagesOptions" />
          description: Options to the Page Blob Upload Pages operation.
      return:
        description: Response data for the Page Blob Upload Pages operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.PageBlobUploadPagesResponse"
          />&gt;
  - name: >-
      uploadPagesFromURL(string, number, number, number,
      PageBlobUploadPagesFromURLOptions)
    uid: '@azure/storage-blob.PageBlobClient.uploadPagesFromURL'
    package: '@azure/storage-blob'
    summary: >-
      The Upload Pages operation writes a range of pages to a page blob where
      the

      contents are read from a URL.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadPagesFromURL(sourceURL: string, sourceOffset: number,
        destOffset: number, count: number, options?:
        PageBlobUploadPagesFromURLOptions):
        Promise<PageBlobUploadPagesFromURLResponse>
      parameters:
        - id: sourceURL
          type: string
          description: >-
            Specify a URL to the copy source, Shared Access Signature(SAS) maybe
            needed for authentication
        - id: sourceOffset
          type: number
          description: >-
            The source offset to copy from. Pass 0 to copy from the beginning of
            source page blob
        - id: destOffset
          type: number
          description: Offset of destination page blob
        - id: count
          type: number
          description: Number of bytes to be uploaded from source page blob
        - id: options
          type: <xref uid="@azure/storage-blob.PageBlobUploadPagesFromURLOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.PageBlobUploadPagesFromURLResponse" />&gt;
  - name: withSnapshot(string)
    uid: '@azure/storage-blob.PageBlobClient.withSnapshot'
    package: '@azure/storage-blob'
    summary: |-
      Creates a new PageBlobClient object identical to the source but with the
      specified snapshot timestamp.
      Provide "" will remove the snapshot and return a Client to the base blob.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function withSnapshot(snapshot: string): PageBlobClient'
      parameters:
        - id: snapshot
          type: string
          description: The snapshot timestamp.
      return:
        description: >-
          A new PageBlobClient object identical to the source but with the
          specified snapshot timestamp.
        type: <xref uid="@azure/storage-blob.PageBlobClient" />
extends: <xref uid="@azure/storage-blob.BlobClient" />
