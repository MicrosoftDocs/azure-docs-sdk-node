### YamlMime:TSEnum
name: KnownExperimentMetricType
uid: '@azure-rest/onlineexperimentation.KnownExperimentMetricType'
package: '@azure-rest/onlineexperimentation'
summary: How the metric definition calculates metric values from event data.
fullName: KnownExperimentMetricType
remarks: ''
isDeprecated: false
fields:
  - name: Average
    uid: '@azure-rest/onlineexperimentation.KnownExperimentMetricType.Average'
    package: '@azure-rest/onlineexperimentation'
    summary: Calculates the average value of a specified event property.
  - name: EventCount
    uid: '@azure-rest/onlineexperimentation.KnownExperimentMetricType.EventCount'
    package: '@azure-rest/onlineexperimentation'
    summary: >-
      Counts the occurrences of an event. Experiment analysis accounts for
      unequal traffic allocation.
  - name: EventRate
    uid: '@azure-rest/onlineexperimentation.KnownExperimentMetricType.EventRate'
    package: '@azure-rest/onlineexperimentation'
    summary: Calculates the percentage of events that satisfy a specified condition.
  - name: Percentile
    uid: '@azure-rest/onlineexperimentation.KnownExperimentMetricType.Percentile'
    package: '@azure-rest/onlineexperimentation'
    summary: Calculates a specified percentile of an event property.
  - name: Sum
    uid: '@azure-rest/onlineexperimentation.KnownExperimentMetricType.Sum'
    package: '@azure-rest/onlineexperimentation'
    summary: >-
      Calculates the sum of a specified event property. Experiment analysis
      accounts for unequal traffic allocation.
  - name: UserCount
    uid: '@azure-rest/onlineexperimentation.KnownExperimentMetricType.UserCount'
    package: '@azure-rest/onlineexperimentation'
    summary: >-
      Counts the number of unique users who encounter an event. Experiment
      analysis accounts for unequal traffic allocation.
  - name: UserRate
    uid: '@azure-rest/onlineexperimentation.KnownExperimentMetricType.UserRate'
    package: '@azure-rest/onlineexperimentation'
    summary: >-
      Calculates the percentage of users who encounter a start event and
      subsequently encounter an end event. Users must encounter the start event
      before the end event to be counted.
