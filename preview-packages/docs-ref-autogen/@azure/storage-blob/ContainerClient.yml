### YamlMime:TSType
name: ContainerClient
uid: '@azure/storage-blob.ContainerClient'
package: '@azure/storage-blob'
summary: >-
  A ContainerClient represents a URL to the Azure Storage container allowing you
  to manipulate its blobs.
fullName: ContainerClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ContainerClient(string, PipelineLike)
    uid: '@azure/storage-blob.ContainerClient.constructor_2'
    package: '@azure/storage-blob'
    summary: >-
      Creates an instance of ContainerClient.

      This method accepts an URL pointing to a container.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ContainerClient(url: string, pipeline: PipelineLike)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage container, such as
                                "https://myaccount.blob.core.windows.net/mycontainer". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-blob.PipelineLike" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      ContainerClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-blob.ContainerClient.constructor_1'
    package: '@azure/storage-blob'
    summary: >-
      Creates an instance of ContainerClient.

      This method accepts an URL pointing to a container.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ContainerClient(url: string, credential?: StorageSharedKeyCredential
        | AnonymousCredential | TokenCredential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage container, such as
                                "https://myaccount.blob.core.windows.net/mycontainer". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-blob.AnonymousCredential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: Optional. Options to configure the HTTP pipeline.
  - name: ContainerClient(string, string, StoragePipelineOptions)
    uid: '@azure/storage-blob.ContainerClient.constructor'
    package: '@azure/storage-blob'
    summary: Creates an instance of ContainerClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ContainerClient(connectionString: string, containerName: string,
        options?: StoragePipelineOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: containerName
          type: string
          description: Container name.
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: Optional. Options to configure the HTTP pipeline.
properties:
  - name: containerName
    uid: '@azure/storage-blob.ContainerClient.containerName'
    package: '@azure/storage-blob'
    summary: The name of the container.
    fullName: containerName
    remarks: ''
    isDeprecated: false
    syntax:
      content: string containerName
      return:
        description: ''
        type: string
inheritedProperties:
  - name: accountName
    uid: '@azure/storage-blob.ContainerClient.accountName'
    package: '@azure/storage-blob'
    summary: ''
    fullName: accountName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.accountName
  - name: credential
    uid: '@azure/storage-blob.ContainerClient.credential'
    package: '@azure/storage-blob'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the `@azure/identity` package to authenticate requests to the
      service. You can also provide an object that implements the
      TokenCredential interface. If not specified, AnonymousCredential is used.
    fullName: credential
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        description: ''
        type: >-
          <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> | <xref
          uid="@azure/storage-blob.AnonymousCredential" /> | <xref
          uid="@azure/core-auth.TokenCredential" />
    inheritanceDescription: <b>Inherited From</b> StorageClient.credential
  - name: url
    uid: '@azure/storage-blob.ContainerClient.url'
    package: '@azure/storage-blob'
    summary: Encoded URL string value.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.url
methods:
  - name: create(ContainerCreateOptions)
    uid: '@azure/storage-blob.ContainerClient.create'
    package: '@azure/storage-blob'
    summary: >-
      Creates a new container under the specified account. If the container with

      the same name already exists, the operation fails.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-container

      Naming rules:

      See
      https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(options?: ContainerCreateOptions):
        Promise<ContainerCreateResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerCreateOptions" />
          description: >-
            Options to Container Create operation.



            Example usage:


            ```ts snippet:ContainerClientCreate

            import { BlobServiceClient } from "@azure/storage-blob";

            import { DefaultAzureCredential } from "@azure/identity";


            const account = "<account>";

            const blobServiceClient = new BlobServiceClient(
              `https://${account}.blob.core.windows.net`,
              new DefaultAzureCredential(),
            );


            const containerName = "<container name>";

            const containerClient =
            blobServiceClient.getContainerClient(containerName);

            const createContainerResponse = await containerClient.create();

            console.log("Container was created successfully",
            createContainerResponse.requestId);

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.ContainerCreateResponse"
          />&gt;
  - name: createIfNotExists(ContainerCreateOptions)
    uid: '@azure/storage-blob.ContainerClient.createIfNotExists'
    package: '@azure/storage-blob'
    summary: >-
      Creates a new container under the specified account. If the container with

      the same name already exists, it is not changed.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-container

      Naming rules:

      See
      https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(options?: ContainerCreateOptions):
        Promise<ContainerCreateIfNotExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerCreateOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerCreateIfNotExistsResponse" />&gt;
  - name: delete(ContainerDeleteMethodOptions)
    uid: '@azure/storage-blob.ContainerClient.delete'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified container for deletion. The container and any blobs

      contained within it are later deleted during garbage collection.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-container
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?: ContainerDeleteMethodOptions):
        Promise<ContainerDeleteResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerDeleteMethodOptions" />
          description: Options to Container Delete operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.ContainerDeleteResponse"
          />&gt;
  - name: deleteBlob(string, ContainerDeleteBlobOptions)
    uid: '@azure/storage-blob.ContainerClient.deleteBlob'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.


      See https://learn.microsoft.com/en-us/rest/api/storageservices/delete-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteBlob(blobName: string, options?:
        ContainerDeleteBlobOptions): Promise<BlobDeleteResponse>
      parameters:
        - id: blobName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerDeleteBlobOptions" />
          description: Options to Blob Delete operation.
      return:
        description: Block blob deletion response data.
        type: Promise&lt;<xref uid="@azure/storage-blob.BlobDeleteResponse" />&gt;
  - name: deleteIfExists(ContainerDeleteMethodOptions)
    uid: '@azure/storage-blob.ContainerClient.deleteIfExists'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified container for deletion if it exists. The container and
      any blobs

      contained within it are later deleted during garbage collection.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-container
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteIfExists(options?: ContainerDeleteMethodOptions):
        Promise<ContainerDeleteIfExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerDeleteMethodOptions" />
          description: Options to Container Delete operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerDeleteIfExistsResponse" />&gt;
  - name: exists(ContainerExistsOptions)
    uid: '@azure/storage-blob.ContainerClient.exists'
    package: '@azure/storage-blob'
    summary: >-
      Returns true if the Azure container resource represented by this client
      exists; false otherwise.


      NOTE: use this function with care since an existing container might be
      deleted by other clients or

      applications. Vice versa new containers with the same name might be added
      by other clients or

      applications after this function completes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function exists(options?: ContainerExistsOptions): Promise<boolean>'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerExistsOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;boolean&gt;
  - name: findBlobsByTags(string, ContainerFindBlobByTagsOptions)
    uid: '@azure/storage-blob.ContainerClient.findBlobsByTags'
    package: '@azure/storage-blob'
    summary: >-
      Returns an async iterable iterator to find all blobs with specified tag

      under the specified container.


      .byPage() returns an async iterable iterator to list the blobs in pages.


      Example using `for await` syntax:


      ```ts snippet:ReadmeSampleFindBlobsByTags

      import { BlobServiceClient } from "@azure/storage-blob";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const blobServiceClient = new BlobServiceClient(
        `https://${account}.blob.core.windows.net`,
        new DefaultAzureCredential(),
      );


      const containerName = "<container name>";

      const containerClient =
      blobServiceClient.getContainerClient(containerName);


      // Example using `for await` syntax

      let i = 1;

      for await (const blob of
      containerClient.findBlobsByTags("tagkey='tagvalue'")) {
        console.log(`Blob ${i++}: ${blob.name}`);
      }


      // Example using `iter.next()` syntax

      i = 1;

      const iter = containerClient.findBlobsByTags("tagkey='tagvalue'");

      let { value, done } = await iter.next();

      while (!done) {
        console.log(`Blob ${i++}: ${value.name}`);
        ({ value, done } = await iter.next());
      }


      // Example using `byPage()` syntax

      i = 1;

      for await (const page of containerClient
        .findBlobsByTags("tagkey='tagvalue'")
        .byPage({ maxPageSize: 20 })) {
        for (const blob of page.blobs) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }


      // Example using paging with a marker

      i = 1;

      let iterator =
      containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize:
      2 });

      let response = (await iterator.next()).value;

      // Prints 2 blob names

      if (response.blobs) {
        for (const blob of response.blobs) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }

      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = containerClient
        .findBlobsByTags("tagkey='tagvalue'")
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await iterator.next()).value;

      // Prints 10 blob names

      if (response.blobs) {
        for (const blob of response.blobs) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findBlobsByTags(tagFilterSqlExpression: string, options?:
        ContainerFindBlobByTagsOptions):
        PagedAsyncIterableIterator<FilterBlobItem,
        ContainerFindBlobsByTagsSegmentResponse, PageSettings>
      parameters:
        - id: tagFilterSqlExpression
          type: string
          description: >-
            The where parameter enables the caller to query blobs whose tags
            match a given expression.
                                                    The given expression must evaluate to true for a blob to be returned in the results.
                                                    The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
                                                    however, only a subset of the OData filter syntax is supported in the Blob service.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerFindBlobByTagsOptions" />
          description: Options to find blobs by tags.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/storage-blob.FilterBlobItem" />, <xref
          uid="@azure/storage-blob.ContainerFindBlobsByTagsSegmentResponse" />,
          <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: generateSasStringToSign(ContainerGenerateSasUrlOptions)
    uid: '@azure/storage-blob.ContainerClient.generateSasStringToSign'
    package: '@azure/storage-blob'
    summary: >-
      Only available for ContainerClient constructed with a shared key
      credential.


      Generates string to sign for a Blob Container Service Shared Access
      Signature (SAS) URI

      based on the client properties and parameters passed in. The SAS is signed
      by the shared key credential of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSasStringToSign(options:
        ContainerGenerateSasUrlOptions): string
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
  - name: generateSasUrl(ContainerGenerateSasUrlOptions)
    uid: '@azure/storage-blob.ContainerClient.generateSasUrl'
    package: '@azure/storage-blob'
    summary: >-
      Only available for ContainerClient constructed with a shared key
      credential.


      Generates a Blob Container Service Shared Access Signature (SAS) URI based
      on the client properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSasUrl(options: ContainerGenerateSasUrlOptions):
        Promise<string>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: Promise&lt;string&gt;
  - name: >-
      generateUserDelegationSasStringToSign(ContainerGenerateSasUrlOptions,
      UserDelegationKey)
    uid: '@azure/storage-blob.ContainerClient.generateUserDelegationSasStringToSign'
    package: '@azure/storage-blob'
    summary: >-
      Generates string to sign for a Blob Container Service Shared Access
      Signature (SAS) URI

      based on the client properties and parameters passed in. The SAS is signed
      by the input user delegation key.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateUserDelegationSasStringToSign(options:
        ContainerGenerateSasUrlOptions, userDelegationKey: UserDelegationKey):
        string
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGenerateSasUrlOptions" />
          description: Optional parameters.
        - id: userDelegationKey
          type: <xref uid="@azure/storage-blob.UserDelegationKey" />
          description: Return value of `blobServiceClient.getUserDelegationKey()`
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
  - name: >-
      generateUserDelegationSasUrl(ContainerGenerateSasUrlOptions,
      UserDelegationKey)
    uid: '@azure/storage-blob.ContainerClient.generateUserDelegationSasUrl'
    package: '@azure/storage-blob'
    summary: >-
      Generates a Blob Container Service Shared Access Signature (SAS) URI based
      on the client properties

      and parameters passed in. The SAS is signed by the input user delegation
      key.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateUserDelegationSasUrl(options:
        ContainerGenerateSasUrlOptions, userDelegationKey: UserDelegationKey):
        Promise<string>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGenerateSasUrlOptions" />
          description: Optional parameters.
        - id: userDelegationKey
          type: <xref uid="@azure/storage-blob.UserDelegationKey" />
          description: Return value of `blobServiceClient.getUserDelegationKey()`
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: Promise&lt;string&gt;
  - name: getAccessPolicy(ContainerGetAccessPolicyOptions)
    uid: '@azure/storage-blob.ContainerClient.getAccessPolicy'
    package: '@azure/storage-blob'
    summary: >-
      Gets the permissions for the specified container. The permissions indicate

      whether container data may be accessed publicly.


      WARNING: JavaScript Date will potentially lose precision when parsing
      startsOn and expiresOn strings.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-container-acl
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccessPolicy(options?: ContainerGetAccessPolicyOptions):
        Promise<ContainerGetAccessPolicyResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGetAccessPolicyOptions" />
          description: Options to Container Get Access Policy operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerGetAccessPolicyResponse" />&gt;
  - name: getAccountInfo(ContainerGetAccountInfoOptions)
    uid: '@azure/storage-blob.ContainerClient.getAccountInfo'
    package: '@azure/storage-blob'
    summary: >-
      The Get Account Information operation returns the sku name and account
      kind

      for the specified account.

      The Get Account Information operation is available on service versions
      beginning

      with version 2018-03-28.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-account-information
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccountInfo(options?: ContainerGetAccountInfoOptions):
        Promise<ContainerGetAccountInfoResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGetAccountInfoOptions" />
          description: Options to the Service Get Account Info operation.
      return:
        description: Response data for the Service Get Account Info operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerGetAccountInfoResponse" />&gt;
  - name: getAppendBlobClient(string)
    uid: '@azure/storage-blob.ContainerClient.getAppendBlobClient'
    package: '@azure/storage-blob'
    summary: Creates an [AppendBlobClient](xref:@azure/storage-blob.AppendBlobClient)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAppendBlobClient(blobName: string): AppendBlobClient'
      parameters:
        - id: blobName
          type: string
          description: An append blob name
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.AppendBlobClient" />
  - name: getBlobBatchClient()
    uid: '@azure/storage-blob.ContainerClient.getBlobBatchClient'
    package: '@azure/storage-blob'
    summary: |-
      Creates a BlobBatchClient object to conduct batch operations.

      See https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getBlobBatchClient(): BlobBatchClient'
      return:
        description: A new BlobBatchClient object for this container.
        type: <xref uid="@azure/storage-blob.BlobBatchClient" />
  - name: getBlobClient(string)
    uid: '@azure/storage-blob.ContainerClient.getBlobClient'
    package: '@azure/storage-blob'
    summary: Creates a [BlobClient](xref:@azure/storage-blob.BlobClient)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getBlobClient(blobName: string): BlobClient'
      parameters:
        - id: blobName
          type: string
          description: A blob name
      return:
        description: A new BlobClient object for the given blob name.
        type: <xref uid="@azure/storage-blob.BlobClient" />
  - name: getBlobLeaseClient(string)
    uid: '@azure/storage-blob.ContainerClient.getBlobLeaseClient'
    package: '@azure/storage-blob'
    summary: >-
      Get a [BlobLeaseClient](xref:@azure/storage-blob.BlobLeaseClient) that
      manages leases on the container.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getBlobLeaseClient(proposeLeaseId?: string): BlobLeaseClient'
      parameters:
        - id: proposeLeaseId
          type: string
          description: Initial proposed lease Id.
      return:
        description: A new BlobLeaseClient object for managing leases on the container.
        type: <xref uid="@azure/storage-blob.BlobLeaseClient" />
  - name: getBlockBlobClient(string)
    uid: '@azure/storage-blob.ContainerClient.getBlockBlobClient'
    package: '@azure/storage-blob'
    summary: Creates a [BlockBlobClient](xref:@azure/storage-blob.BlockBlobClient)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getBlockBlobClient(blobName: string): BlockBlobClient'
      parameters:
        - id: blobName
          type: string
          description: >-
            A block blob name



            Example usage:


            ```ts snippet:ClientsUpload

            import { BlobServiceClient } from "@azure/storage-blob";

            import { DefaultAzureCredential } from "@azure/identity";


            const account = "<account>";

            const blobServiceClient = new BlobServiceClient(
              `https://${account}.blob.core.windows.net`,
              new DefaultAzureCredential(),
            );


            const containerName = "<container name>";

            const blobName = "<blob name>";

            const containerClient =
            blobServiceClient.getContainerClient(containerName);

            const blockBlobClient =
            containerClient.getBlockBlobClient(blobName);


            const content = "Hello world!";

            const uploadBlobResponse = await blockBlobClient.upload(content,
            content.length);

            ```
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.BlockBlobClient" />
  - name: getPageBlobClient(string)
    uid: '@azure/storage-blob.ContainerClient.getPageBlobClient'
    package: '@azure/storage-blob'
    summary: Creates a [PageBlobClient](xref:@azure/storage-blob.PageBlobClient)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getPageBlobClient(blobName: string): PageBlobClient'
      parameters:
        - id: blobName
          type: string
          description: A page blob name
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.PageBlobClient" />
  - name: getProperties(ContainerGetPropertiesOptions)
    uid: '@azure/storage-blob.ContainerClient.getProperties'
    package: '@azure/storage-blob'
    summary: >-
      Returns all user-defined metadata and system properties for the specified

      container. The data returned does not include the container's list of
      blobs.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-container-properties


      WARNING: The `metadata` object returned in the response will have its keys
      in lowercase, even if

      they originally contained uppercase characters. This differs from the
      metadata keys returned by

      the `listContainers` method of
      [BlobServiceClient](xref:@azure/storage-blob.BlobServiceClient) using the
      `includeMetadata` option, which

      will retain their original casing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: ContainerGetPropertiesOptions):
        Promise<ContainerGetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGetPropertiesOptions" />
          description: Options to Container Get Properties operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerGetPropertiesResponse" />&gt;
  - name: listBlobsByHierarchy(string, ContainerListBlobsOptions)
    uid: '@azure/storage-blob.ContainerClient.listBlobsByHierarchy'
    package: '@azure/storage-blob'
    summary: >-
      Returns an async iterable iterator to list all the blobs by hierarchy.

      under the specified account.


      .byPage() returns an async iterable iterator to list the blobs by
      hierarchy in pages.


      ```ts snippet:ReadmeSampleListBlobsByHierarchy

      import { BlobServiceClient } from "@azure/storage-blob";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const blobServiceClient = new BlobServiceClient(
        `https://${account}.blob.core.windows.net`,
        new DefaultAzureCredential(),
      );


      const containerName = "<container name>";

      const containerClient =
      blobServiceClient.getContainerClient(containerName);


      // Example using `for await` syntax

      let i = 1;

      const blobs = containerClient.listBlobsByHierarchy("/");

      for await (const blob of blobs) {
        if (blob.kind === "prefix") {
          console.log(`\tBlobPrefix: ${blob.name}`);
        } else {
          console.log(`\tBlobItem: name - ${blob.name}`);
        }
      }


      // Example using `iter.next()` syntax

      i = 1;

      const iter = containerClient.listBlobsByHierarchy("/");

      let { value, done } = await iter.next();

      while (!done) {
        if (value.kind === "prefix") {
          console.log(`\tBlobPrefix: ${value.name}`);
        } else {
          console.log(`\tBlobItem: name - ${value.name}`);
        }
        ({ value, done } = await iter.next());
      }


      // Example using `byPage()` syntax

      i = 1;

      for await (const page of
      containerClient.listBlobsByHierarchy("/").byPage({ maxPageSize: 20 })) {
        const segment = page.segment;
        if (segment.blobPrefixes) {
          for (const prefix of segment.blobPrefixes) {
            console.log(`\tBlobPrefix: ${prefix.name}`);
          }
        }
        for (const blob of page.segment.blobItems) {
          console.log(`\tBlobItem: name - ${blob.name}`);
        }
      }


      // Example using paging with a marker

      i = 1;

      let iterator = containerClient.listBlobsByHierarchy("/").byPage({
      maxPageSize: 2 });

      let response = (await iterator.next()).value;

      // Prints 2 blob names

      if (response.blobPrefixes) {
        for (const prefix of response.blobPrefixes) {
          console.log(`\tBlobPrefix: ${prefix.name}`);
        }
      }

      if (response.segment.blobItems) {
        for (const blob of response.segment.blobItems) {
          console.log(`\tBlobItem: name - ${blob.name}`);
        }
      }

      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = containerClient
        .listBlobsByHierarchy("/")
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await iterator.next()).value;

      // Prints 10 blob names

      if (response.blobPrefixes) {
        for (const prefix of response.blobPrefixes) {
          console.log(`\tBlobPrefix: ${prefix.name}`);
        }
      }

      if (response.segment.blobItems) {
        for (const blob of response.segment.blobItems) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listBlobsByHierarchy(delimiter: string, options?:
        ContainerListBlobsOptions): PagedAsyncIterableIterator<({ kind: "prefix"
        } & BlobPrefix) | ({ kind: "blob" } & BlobItem),
        ContainerListBlobHierarchySegmentResponse, PageSettings>
      parameters:
        - id: delimiter
          type: string
          description: The character or string used to define the virtual hierarchy
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerListBlobsOptions" />
          description: Options to list blobs operation.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;({
          kind: "prefix" } & <xref uid="@azure/storage-blob.BlobPrefix" />) | ({
          kind: "blob" } & <xref uid="@azure/storage-blob.BlobItem" />), <xref
          uid="@azure/storage-blob.ContainerListBlobHierarchySegmentResponse"
          />, <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: listBlobsFlat(ContainerListBlobsOptions)
    uid: '@azure/storage-blob.ContainerClient.listBlobsFlat'
    package: '@azure/storage-blob'
    summary: >-
      Returns an async iterable iterator to list all the blobs

      under the specified account.


      .byPage() returns an async iterable iterator to list the blobs in pages.


      ```ts snippet:ReadmeSampleListBlobs_Multiple

      import { BlobServiceClient } from "@azure/storage-blob";

      import { DefaultAzureCredential } from "@azure/identity";


      const account = "<account>";

      const blobServiceClient = new BlobServiceClient(
        `https://${account}.blob.core.windows.net`,
        new DefaultAzureCredential(),
      );


      const containerName = "<container name>";

      const containerClient =
      blobServiceClient.getContainerClient(containerName);


      // Example using `for await` syntax

      let i = 1;

      const blobs = containerClient.listBlobsFlat();

      for await (const blob of blobs) {
        console.log(`Blob ${i++}: ${blob.name}`);
      }


      // Example using `iter.next()` syntax

      i = 1;

      const iter = containerClient.listBlobsFlat();

      let { value, done } = await iter.next();

      while (!done) {
        console.log(`Blob ${i++}: ${value.name}`);
        ({ value, done } = await iter.next());
      }


      // Example using `byPage()` syntax

      i = 1;

      for await (const page of containerClient.listBlobsFlat().byPage({
      maxPageSize: 20 })) {
        for (const blob of page.segment.blobItems) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }


      // Example using paging with a marker

      i = 1;

      let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;

      // Prints 2 blob names

      if (response.segment.blobItems) {
        for (const blob of response.segment.blobItems) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }

      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = containerClient.listBlobsFlat().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      response = (await iterator.next()).value;

      // Prints 10 blob names

      if (response.segment.blobItems) {
        for (const blob of response.segment.blobItems) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listBlobsFlat(options?: ContainerListBlobsOptions):
        PagedAsyncIterableIterator<BlobItem,
        ContainerListBlobFlatSegmentResponse, PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerListBlobsOptions" />
          description: Options to list blobs.
      return:
        description: An asyncIterableIterator that supports paging.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/storage-blob.BlobItem" />, <xref
          uid="@azure/storage-blob.ContainerListBlobFlatSegmentResponse" />,
          <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      setAccessPolicy(PublicAccessType, SignedIdentifier[],
      ContainerSetAccessPolicyOptions)
    uid: '@azure/storage-blob.ContainerClient.setAccessPolicy'
    package: '@azure/storage-blob'
    summary: >-
      Sets the permissions for the specified container. The permissions indicate

      whether blobs in a container may be accessed publicly.


      When you set permissions for a container, the existing permissions are
      replaced.

      If no access or containerAcl provided, the existing container ACL will be

      removed.


      When you establish a stored access policy on a container, it may take up
      to 30 seconds to take effect.

      During this interval, a shared access signature that is associated with
      the stored access policy will

      fail with status code 403 (Forbidden), until the access policy becomes
      active.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-container-acl
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(access?: PublicAccessType, containerAcl?:
        SignedIdentifier[], options?: ContainerSetAccessPolicyOptions):
        Promise<ContainerSetAccessPolicyResponse>
      parameters:
        - id: access
          type: <xref uid="@azure/storage-blob.PublicAccessType" />
          description: The level of public access to data in the container.
        - id: containerAcl
          type: <xref uid="@azure/storage-blob.SignedIdentifier" />[]
          description: >-
            Array of elements each having a unique Id and details of the access
            policy.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerSetAccessPolicyOptions" />
          description: Options to Container Set Access Policy operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerSetAccessPolicyResponse" />&gt;
  - name: setMetadata(Metadata, ContainerSetMetadataOptions)
    uid: '@azure/storage-blob.ContainerClient.setMetadata'
    package: '@azure/storage-blob'
    summary: >-
      Sets one or more user-defined name-value pairs for the specified
      container.


      If no option provided, or no metadata defined in the parameter, the
      container

      metadata will be removed.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        ContainerSetMetadataOptions): Promise<ContainerSetMetadataResponse>
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-blob.Metadata" />
          description: |-
            Replace existing metadata with this value.
                                       If no value provided the existing metadata will be removed.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerSetMetadataOptions" />
          description: Options to Container Set Metadata operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerSetMetadataResponse" />&gt;
  - name: uploadBlockBlob(string, RequestBodyType, number, BlockBlobUploadOptions)
    uid: '@azure/storage-blob.ContainerClient.uploadBlockBlob'
    package: '@azure/storage-blob'
    summary: >-
      Creates a new block blob, or updates the content of an existing block
      blob.


      Updating an existing block blob overwrites any existing metadata on the
      blob.

      Partial updates are not supported; the content of the existing blob is

      overwritten with the new content. To perform a partial update of a block
      blob's,

      use [stageBlock](xref:@azure/storage-blob.BlockBlobClient.stageBlock) and
      [commitBlockList](xref:@azure/storage-blob.BlockBlobClient.commitBlockList).


      This is a non-parallel uploading method, please use
      [uploadFile](xref:@azure/storage-blob.BlockBlobClient.uploadFile),

      [uploadStream](xref:@azure/storage-blob.BlockBlobClient.uploadStream) or
      [uploadBrowserData](xref:@azure/storage-blob.BlockBlobClient.uploadBrowserData)
      for better

      performance with concurrency uploading.


      See https://learn.microsoft.com/rest/api/storageservices/put-blob
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadBlockBlob(blobName: string, body: RequestBodyType,
        contentLength: number, options?: BlockBlobUploadOptions): Promise<{
        blockBlobClient: BlockBlobClient, response: BlockBlobUploadResponse }>
      parameters:
        - id: blobName
          type: string
          description: Name of the block blob to create or update.
        - id: body
          type: <xref uid="@azure/storage-blob.HttpRequestBody" />
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: contentLength
          type: number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type: <xref uid="@azure/storage-blob.BlockBlobUploadOptions" />
          description: Options to configure the Block Blob Upload operation.
      return:
        description: >-
          Block Blob upload response data and the corresponding BlockBlobClient
          instance.
        type: >-
          Promise&lt;{ blockBlobClient: BlockBlobClient, response:
          BlockBlobUploadResponse }&gt;
extends: StorageClient
