### YamlMime:TSType
name: ShareDirectoryClient
uid: '@azure/storage-file-share.ShareDirectoryClient'
package: '@azure/storage-file-share'
summary: >-
  A ShareDirectoryClient represents a URL to the Azure Storage directory
  allowing you to manipulate its files and directories.
fullName: ShareDirectoryClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      ShareDirectoryClient(string, Credential | TokenCredential,
      ShareClientOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.constructor'
    package: '@azure/storage-file-share'
    summary: Creates an instance of DirectoryClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ShareDirectoryClient(url: string, credential?: Credential |
        TokenCredential, options?: ShareClientOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file directory, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a directory.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a directory name includes %, directory name must be encoded in the URL.
                                Such as a directory named "mydir%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydir%25".
        - id: credential
          type: >-
            <xref uid="@azure/storage-file-share.Credential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: |-
            Such as AnonymousCredential or StorageSharedKeyCredential.
                                             If not specified, AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareClientOptions" />
          description: Optional. Options to configure the HTTP pipeline.
  - name: ShareDirectoryClient(string, Pipeline, ShareClientConfig)
    uid: '@azure/storage-file-share.ShareDirectoryClient.constructor_1'
    package: '@azure/storage-file-share'
    summary: Creates an instance of DirectoryClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ShareDirectoryClient(url: string, pipeline: Pipeline, options?:
        ShareClientConfig)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file directory, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a directory.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a directory name includes %, directory name must be encoded in the URL.
                                Such as a directory named "mydir%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydir%25".
        - id: pipeline
          type: <xref uid="@azure/storage-file-share.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareClientConfig" />
          description: ''
properties:
  - name: name
    uid: '@azure/storage-file-share.ShareDirectoryClient.name'
    package: '@azure/storage-file-share'
    summary: The name of the directory
    fullName: name
    remarks: ''
    isDeprecated: false
    syntax:
      content: string name
      return:
        description: ''
        type: string
  - name: path
    uid: '@azure/storage-file-share.ShareDirectoryClient.path'
    package: '@azure/storage-file-share'
    summary: The full path of the directory
    fullName: path
    remarks: ''
    isDeprecated: false
    syntax:
      content: string path
      return:
        description: ''
        type: string
  - name: shareName
    uid: '@azure/storage-file-share.ShareDirectoryClient.shareName'
    package: '@azure/storage-file-share'
    summary: The share name corresponding to this directory client
    fullName: shareName
    remarks: ''
    isDeprecated: false
    syntax:
      content: string shareName
      return:
        description: ''
        type: string
inheritedProperties:
  - name: accountName
    uid: '@azure/storage-file-share.ShareDirectoryClient.accountName'
    package: '@azure/storage-file-share'
    summary: ''
    fullName: accountName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.accountName
  - name: url
    uid: '@azure/storage-file-share.ShareDirectoryClient.url'
    package: '@azure/storage-file-share'
    summary: URL string value.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.url
methods:
  - name: create(DirectoryCreateOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.create'
    package: '@azure/storage-file-share'
    summary: |-
      Creates a new directory under the specified share or parent directory.

      See https://learn.microsoft.com/rest/api/storageservices/create-directory
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(options?: DirectoryCreateOptions):
        Promise<DirectoryCreateResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryCreateOptions" />
          description: Options to Directory Create operation.
      return:
        description: Response data for the Directory  operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryCreateResponse" />&gt;
  - name: createFile(string, number, FileCreateOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.createFile'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new file or replaces a file under this directory. Note it only
      initializes the file with no content.


      See https://learn.microsoft.com/rest/api/storageservices/create-file
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFile(fileName: string, size: number, options?:
        FileCreateOptions): Promise<{ fileClient: ShareFileClient,
        fileCreateResponse: FileCreateResponse }>
      parameters:
        - id: fileName
          type: string
          description: ''
        - id: size
          type: number
          description: Specifies the maximum size in bytes for the file, up to 4 TB.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileCreateOptions" />
          description: Options to File Create operation.
      return:
        description: File creation response data and the corresponding file client.
        type: >-
          Promise&lt;{ fileClient: ShareFileClient, fileCreateResponse:
          FileCreateResponse }&gt;
  - name: createIfNotExists(DirectoryCreateOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.createIfNotExists'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new directory under the specified share or parent directory if
      it does not already exists.

      If the directory already exists, it is not modified.


      See https://learn.microsoft.com/rest/api/storageservices/create-directory
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(options?: DirectoryCreateOptions):
        Promise<DirectoryCreateIfNotExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryCreateOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryCreateIfNotExistsResponse"
          />&gt;
  - name: createSubdirectory(string, DirectoryCreateOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.createSubdirectory'
    package: '@azure/storage-file-share'
    summary: |-
      Creates a new subdirectory under this directory.

      See https://learn.microsoft.com/rest/api/storageservices/create-directory
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createSubdirectory(directoryName: string, options?:
        DirectoryCreateOptions): Promise<{ directoryClient:
        ShareDirectoryClient, directoryCreateResponse: DirectoryCreateResponse
        }>
      parameters:
        - id: directoryName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryCreateOptions" />
          description: Options to Directory Create operation.
      return:
        description: >-
          Directory create response data and the corresponding DirectoryClient
          instance.
        type: >-
          Promise&lt;{ directoryClient: ShareDirectoryClient,
          directoryCreateResponse: DirectoryCreateResponse }&gt;
  - name: delete(DirectoryDeleteOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.delete'
    package: '@azure/storage-file-share'
    summary: >-
      Removes the specified empty directory. Note that the directory must be
      empty before it can be

      deleted.


      See https://learn.microsoft.com/rest/api/storageservices/delete-directory
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?: DirectoryDeleteOptions):
        Promise<DirectoryDeleteResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryDeleteOptions" />
          description: Options to Directory Delete operation.
      return:
        description: Response data for the Directory Delete operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryDeleteResponse" />&gt;
  - name: deleteFile(string, FileDeleteOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.deleteFile'
    package: '@azure/storage-file-share'
    summary: >-
      Removes the specified file under this directory from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.


      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)


      See https://learn.microsoft.com/rest/api/storageservices/delete-file2
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFile(fileName: string, options?: FileDeleteOptions):
        Promise<FileDeleteResponse>
      parameters:
        - id: fileName
          type: string
          description: Name of the file to delete
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDeleteOptions" />
          description: Options to File Delete operation.
      return:
        description: File deletion response data.
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.FileDeleteResponse"
          />&gt;
  - name: deleteIfExists(DirectoryDeleteOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.deleteIfExists'
    package: '@azure/storage-file-share'
    summary: >-
      Removes the specified empty directory if it exists. Note that the
      directory must be empty before it can be

      deleted.


      See https://learn.microsoft.com/rest/api/storageservices/delete-directory
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteIfExists(options?: DirectoryDeleteOptions):
        Promise<DirectoryDeleteIfExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryDeleteOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryDeleteIfExistsResponse" />&gt;
  - name: deleteSubdirectory(string, DirectoryDeleteOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.deleteSubdirectory'
    package: '@azure/storage-file-share'
    summary: |-
      Removes the specified empty sub directory under this directory.
      Note that the directory must be empty before it can be deleted.

      See https://learn.microsoft.com/rest/api/storageservices/delete-directory
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteSubdirectory(directoryName: string, options?:
        DirectoryDeleteOptions): Promise<DirectoryDeleteResponse>
      parameters:
        - id: directoryName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryDeleteOptions" />
          description: Options to Directory Delete operation.
      return:
        description: Directory deletion response data.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryDeleteResponse" />&gt;
  - name: exists(DirectoryExistsOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.exists'
    package: '@azure/storage-file-share'
    summary: >-
      Returns true if the specified directory exists; false otherwise.


      NOTE: use this function with care since an existing directory might be
      deleted by other clients or

      applications. Vice versa new directories might be added by other clients
      or applications after this

      function completes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function exists(options?: DirectoryExistsOptions): Promise<boolean>'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryExistsOptions" />
          description: options to Exists operation.
      return:
        description: ''
        type: Promise&lt;boolean&gt;
  - name: forceCloseAllHandles(DirectoryForceCloseHandlesSegmentOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.forceCloseAllHandles'
    package: '@azure/storage-file-share'
    summary: >-
      Force close all handles for a directory.


      See
      https://learn.microsoft.com/rest/api/storageservices/force-close-handles
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseAllHandles(options?:
        DirectoryForceCloseHandlesSegmentOptions): Promise<CloseHandlesInfo>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-share.DirectoryForceCloseHandlesSegmentOptions"
            />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.CloseHandlesInfo"
          />&gt;
  - name: forceCloseHandle(string, DirectoryForceCloseHandlesOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.forceCloseHandle'
    package: '@azure/storage-file-share'
    summary: >-
      Force close a specific handle for a directory.


      See
      https://learn.microsoft.com/rest/api/storageservices/force-close-handles
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseHandle(handleId: string, options?:
        DirectoryForceCloseHandlesOptions):
        Promise<DirectoryForceCloseHandlesResponse>
      parameters:
        - id: handleId
          type: string
          description: |-
            Specific handle ID, cannot be asterisk "*".
                                     Use forceCloseHandlesSegment() to close all handles.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-share.DirectoryForceCloseHandlesOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryForceCloseHandlesResponse"
          />&gt;
  - name: getDirectoryClient(string)
    uid: '@azure/storage-file-share.ShareDirectoryClient.getDirectoryClient'
    package: '@azure/storage-file-share'
    summary: Creates a ShareDirectoryClient object for a sub directory.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDirectoryClient(subDirectoryName: string):
        ShareDirectoryClient
      parameters:
        - id: subDirectoryName
          type: string
          description: A subdirectory name
      return:
        description: >-
          The ShareDirectoryClient object for the given subdirectory name.


          Example usage:


          ```ts snippet:ReadmeSampleGetDirectoryClient

          import { StorageSharedKeyCredential, ShareServiceClient } from
          "@azure/storage-file-share";


          const account = "<account>";

          const accountKey = "<accountkey>";


          const credential = new StorageSharedKeyCredential(account,
          accountKey);

          const serviceClient = new ShareServiceClient(
            `https://${account}.file.core.windows.net`,
            credential,
          );


          const shareName = "<share name>";

          const directoryName = "<directory name>";

          const shareClient = serviceClient.getShareClient(shareName);

          const directoryClient = shareClient.getDirectoryClient(directoryName);

          await directoryClient.create();

          ```
        type: <xref uid="@azure/storage-file-share.ShareDirectoryClient" />
  - name: getFileClient(string)
    uid: '@azure/storage-file-share.ShareDirectoryClient.getFileClient'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a
      [ShareFileClient](xref:@azure/storage-file-share.ShareFileClient) object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getFileClient(fileName: string): ShareFileClient'
      parameters:
        - id: fileName
          type: string
          description: A file name.
      return:
        description: >-
          A new ShareFileClient object for the given file name.


          Example usage:


          ```ts snippet:ReadmeSampleCreateFileAndUpload

          import { StorageSharedKeyCredential, ShareServiceClient } from
          "@azure/storage-file-share";


          const account = "<account>";

          const accountKey = "<accountkey>";


          const credential = new StorageSharedKeyCredential(account,
          accountKey);

          const serviceClient = new ShareServiceClient(
            `https://${account}.file.core.windows.net`,
            credential,
          );


          const shareName = "<share name>";

          const directoryName = "<directory name>";

          const directoryClient =
          serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


          const content = "Hello World!";

          const fileName = `newdirectory${+new Date()}`;

          const fileClient = directoryClient.getFileClient(fileName);

          await fileClient.create(content.length);

          console.log(`Create file ${fileName} successfully`);


          // Upload file range

          await fileClient.uploadRange(content, 0, content.length);

          console.log(`Upload file range "${content}" to ${fileName}
          successfully`);

          ```
        type: <xref uid="@azure/storage-file-share.ShareFileClient" />
  - name: getProperties(DirectoryGetPropertiesOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.getProperties'
    package: '@azure/storage-file-share'
    summary: >-
      Returns all system properties for the specified directory, and can also be
      used to check the

      existence of a directory. The data returned does not include the files in
      the directory or any

      subdirectories.


      See
      https://learn.microsoft.com/rest/api/storageservices/get-directory-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: DirectoryGetPropertiesOptions):
        Promise<DirectoryGetPropertiesResponse>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/storage-file-share.DirectoryGetPropertiesOptions"
            />
          description: Options to Directory Get Properties operation.
      return:
        description: Response data for the Directory Get Properties operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryGetPropertiesResponse" />&gt;
  - name: listFilesAndDirectories(DirectoryListFilesAndDirectoriesOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.listFilesAndDirectories'
    package: '@azure/storage-file-share'
    summary: >-
      Returns an async iterable iterator to list all the files and directories

      under the specified account.


      .byPage() returns an async iterable iterator to list the files and
      directories in pages.


      Example using `for await` syntax:


      ```ts snippet:ReadmeSampleListFilesAndDirectories

      import { StorageSharedKeyCredential, ShareServiceClient } from
      "@azure/storage-file-share";


      const account = "<account>";

      const accountKey = "<accountkey>";


      const credential = new StorageSharedKeyCredential(account, accountKey);

      const serviceClient = new ShareServiceClient(
        `https://${account}.file.core.windows.net`,
        credential,
      );


      const shareName = "<share name>";

      const directoryName = "<directory name>";

      const directoryClient =
      serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


      let i = 1;

      for await (const item of directoryClient.listFilesAndDirectories()) {
        if (item.kind === "directory") {
          console.log(`${i} - directory\t: ${item.name}`);
        } else {
          console.log(`${i} - file\t: ${item.name}`);
        }
        i++;
      }

      ```


      Example using `iter.next()`:


      ```ts snippet:ReadmeSampleListFilesAndDirectories_Iterator

      import { StorageSharedKeyCredential, ShareServiceClient } from
      "@azure/storage-file-share";


      const account = "<account>";

      const accountKey = "<accountkey>";


      const credential = new StorageSharedKeyCredential(account, accountKey);

      const serviceClient = new ShareServiceClient(
        `https://${account}.file.core.windows.net`,
        credential,
      );


      const shareName = "<share name>";

      const directoryName = "<directory name>";

      const directoryClient =
      serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


      let i = 1;

      const iter = directoryClient.listFilesAndDirectories();

      let { value, done } = await iter.next();

      while (!done) {
        if (value.kind === "directory") {
          console.log(`${i} - directory\t: ${value.name}`);
        } else {
          console.log(`${i} - file\t: ${value.name}`);
        }
        ({ value, done } = await iter.next());
        i++;
      }

      ```


      Example using `byPage()`:


      ```ts snippet:ReadmeSampleListFilesAndDirectories_ByPage

      import { StorageSharedKeyCredential, ShareServiceClient } from
      "@azure/storage-file-share";


      const account = "<account>";

      const accountKey = "<accountkey>";


      const credential = new StorageSharedKeyCredential(account, accountKey);

      const serviceClient = new ShareServiceClient(
        `https://${account}.file.core.windows.net`,
        credential,
      );


      const shareName = "<share name>";

      const directoryName = "<directory name>";

      const directoryClient =
      serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


      let i = 1;

      for await (const response of directoryClient
        .listFilesAndDirectories()
        .byPage({ maxPageSize: 20 })) {
        console.log(`Page ${i++}:`);
        for (const item of response.segment.directoryItems) {
          console.log(`\tdirectory: ${item.name}`);
        }
        for (const item of response.segment.fileItems) {
          console.log(`\tfile: ${item.name}`);
        }
      }

      ```


      Example using paging with a marker:


      ```ts snippet:ReadmeSampleListFilesAndDirectories_Continuation

      import { StorageSharedKeyCredential, ShareServiceClient } from
      "@azure/storage-file-share";


      const account = "<account>";

      const accountKey = "<accountkey>";


      const credential = new StorageSharedKeyCredential(account, accountKey);

      const serviceClient = new ShareServiceClient(
        `https://${account}.file.core.windows.net`,
        credential,
      );


      const shareName = "<share name>";

      const directoryName = "<directory name>";

      const directoryClient =
      serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


      let iterator = directoryClient.listFilesAndDirectories().byPage({
      maxPageSize: 2 });

      let response = (await iterator.next()).value;


      for await (const item of response.segment.directoryItems) {
        console.log(`\tdirectory: ${item.name}`);
      }


      for await (const item of response.segment.fileItems) {
        console.log(`\tfile: ${item.name}`);
      }


      // Gets next marker

      let marker = response.continuationToken;


      // Passing next marker as continuationToken

      iterator = directoryClient
        .listFilesAndDirectories()
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await iterator.next()).value;


      for await (const item of response.segment.directoryItems) {
        console.log(`\tdirectory: ${item.name}`);
      }


      for await (const item of response.segment.fileItems) {
        console.log(`\tfile: ${item.name}`);
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFilesAndDirectories(options?:
        DirectoryListFilesAndDirectoriesOptions): PagedAsyncIterableIterator<({
        kind: "file" } & FileItem) | ({ kind: "directory" } & DirectoryItem),
        DirectoryListFilesAndDirectoriesSegmentResponse, PageSettings>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-share.DirectoryListFilesAndDirectoriesOptions"
            />
          description: Options to list files and directories operation.
      return:
        description: An asyncIterableIterator that supports paging.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;({
          kind: "file" } & <xref uid="@azure/storage-file-share.FileItem" />) |
          ({ kind: "directory" } & <xref
          uid="@azure/storage-file-share.DirectoryItem" />), <xref
          uid="@azure/storage-file-share.DirectoryListFilesAndDirectoriesSegmentResponse"
          />, <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: listHandles(DirectoryListHandlesOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.listHandles'
    package: '@azure/storage-file-share'
    summary: >-
      Returns an async iterable iterator to list all the handles.

      under the specified account.


      .byPage() returns an async iterable iterator to list the handles in pages.


      Example using `for await` syntax:


      ```ts snippet:ReadmeSampleListHandles

      import { StorageSharedKeyCredential, ShareServiceClient } from
      "@azure/storage-file-share";


      const account = "<account>";

      const accountKey = "<accountkey>";


      const credential = new StorageSharedKeyCredential(account, accountKey);

      const serviceClient = new ShareServiceClient(
        `https://${account}.file.core.windows.net`,
        credential,
      );


      const shareName = "<share name>";

      const directoryName = "<directory name>";

      const directoryClient =
      serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


      for await (const handle of directoryClient.listHandles()) {
        console.log(`Handle: ${handle.handleId}`);
      }

      ```


      Example using `iter.next()`:


      ```ts snippet:ReadmeSampleListHandles_Iterator

      import { StorageSharedKeyCredential, ShareServiceClient } from
      "@azure/storage-file-share";


      const account = "<account>";

      const accountKey = "<accountkey>";


      const credential = new StorageSharedKeyCredential(account, accountKey);

      const serviceClient = new ShareServiceClient(
        `https://${account}.file.core.windows.net`,
        credential,
      );


      const shareName = "<share name>";

      const directoryName = "<directory name>";

      const directoryClient =
      serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


      const handleIter = directoryClient.listHandles();

      let { value, done } = await handleIter.next();

      while (!done) {
        console.log(`Handle: ${value.handleId}`);
        ({ value, done } = await handleIter.next());
      }

      ```


      Example using `byPage()`:


      ```ts snippet:ReadmeSampleListHandles_ByPage

      import { StorageSharedKeyCredential, ShareServiceClient } from
      "@azure/storage-file-share";


      const account = "<account>";

      const accountKey = "<accountkey>";


      const credential = new StorageSharedKeyCredential(account, accountKey);

      const serviceClient = new ShareServiceClient(
        `https://${account}.file.core.windows.net`,
        credential,
      );


      const shareName = "<share name>";

      const directoryName = "<directory name>";

      const directoryClient =
      serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


      let i = 1;

      for await (const response of directoryClient.listHandles().byPage({
      maxPageSize: 20 })) {
        console.log(`Page ${i++}:`);
        for (const handle of response.handleList || []) {
          console.log(`\thandle: ${handle.handleId}`);
        }
      }

      ```


      Example using paging with a marker:


      ```ts snippet:ReadmeSampleListHandles_Continuation

      import { StorageSharedKeyCredential, ShareServiceClient } from
      "@azure/storage-file-share";


      const account = "<account>";

      const accountKey = "<accountkey>";


      const credential = new StorageSharedKeyCredential(account, accountKey);

      const serviceClient = new ShareServiceClient(
        `https://${account}.file.core.windows.net`,
        credential,
      );


      const shareName = "<share name>";

      const directoryName = "<directory name>";

      const directoryClient =
      serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


      let iterator = directoryClient.listHandles().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;


      for await (const handle of response.handleList || []) {
        console.log(`\thandle: ${handle.handleId}`);
      }


      // Gets next marker

      let marker = response.continuationToken;


      // Passing next marker as continuationToken

      iterator = directoryClient.listHandles().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      response = (await iterator.next()).value;


      for await (const handle of response.handleList || []) {
        console.log(`\thandle: ${handle.handleId}`);
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listHandles(options?: DirectoryListHandlesOptions):
        PagedAsyncIterableIterator<HandleItem, DirectoryListHandlesResponse,
        PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryListHandlesOptions" />
          description: |-
            Options to list handles operation.

            An asyncIterableIterator that supports paging.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/storage-file-share.HandleItem" />, <xref
          uid="@azure/storage-file-share.DirectoryListHandlesResponse" />, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: rename(string, DirectoryRenameOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.rename'
    package: '@azure/storage-file-share'
    summary: |-
      Renames a directory.
      This API only supports renaming a directory in the same share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rename(destinationPath: string, options?:
        DirectoryRenameOptions): Promise<{ destinationDirectoryClient:
        ShareDirectoryClient, directoryRenameResponse: DirectoryRenameResponse
        }>
      parameters:
        - id: destinationPath
          type: string
          description: >-
            Specifies the destination path to rename to. The path will be
            encoded to put into a URL to specify the destination.
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryRenameOptions" />
          description: Options for the renaming operation.
      return:
        description: >-
          Response data for the file renaming operation.


          Example usage:


          ```ts snippet:ReadmeSampleRenameDirectory

          import { StorageSharedKeyCredential, ShareServiceClient } from
          "@azure/storage-file-share";


          const account = "<account>";

          const accountKey = "<accountkey>";


          const credential = new StorageSharedKeyCredential(account,
          accountKey);

          const serviceClient = new ShareServiceClient(
            `https://${account}.file.core.windows.net`,
            credential,
          );


          const shareName = "<share name>";

          const directoryName = "<directory name>";

          const destinationPath = "<destination path>";

          const directoryClient =
          serviceClient.getShareClient(shareName).getDirectoryClient(directoryName);


          await directoryClient.rename(destinationPath);

          ```
        type: >-
          Promise&lt;{ destinationDirectoryClient: ShareDirectoryClient,
          directoryRenameResponse: DirectoryRenameResponse }&gt;
  - name: setMetadata(Metadata, DirectorySetMetadataOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.setMetadata'
    package: '@azure/storage-file-share'
    summary: >-
      Updates user defined metadata for the specified directory.


      See
      https://learn.microsoft.com/rest/api/storageservices/set-directory-metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        DirectorySetMetadataOptions): Promise<DirectorySetMetadataResponse>
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-file-share.Metadata" />
          description: >-
            If no metadata provided, all existing directory metadata will be
            removed
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectorySetMetadataOptions" />
          description: Options to Directory Set Metadata operation.
      return:
        description: Response data for the Directory Set Metadata operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectorySetMetadataResponse" />&gt;
  - name: setProperties(DirectoryProperties)
    uid: '@azure/storage-file-share.ShareDirectoryClient.setProperties'
    package: '@azure/storage-file-share'
    summary: >-
      Sets properties on the directory.


      See
      https://learn.microsoft.com/rest/api/storageservices/set-directory-properties
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties?: DirectoryProperties):
        Promise<DirectorySetPropertiesResponse>
      parameters:
        - id: properties
          type: <xref uid="@azure/storage-file-share.DirectoryProperties" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectorySetPropertiesResponse" />&gt;
extends: StorageClient
