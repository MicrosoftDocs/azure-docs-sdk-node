### YamlMime:TSType
name: SharedOptions
uid: '@azure/cosmos.SharedOptions'
package: '@azure/cosmos'
summary: >-
  Options that can be specified for a requested issued to the Azure Cosmos DB
  servers.=
fullName: SharedOptions
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: abortSignal
    uid: '@azure/cosmos.SharedOptions.abortSignal'
    package: '@azure/cosmos'
    summary: >+
      abortSignal to pass to all underlying network requests created by this
      method call. See
      https://developer.mozilla.org/en-US/docs/Web/API/AbortController


      **Example**


      Cancel a read request

      ```ts snippet:SharedOptionsAbortSignal

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const controller = new AbortController();

      const results = container.items.query("SELECT * from c", {
        abortSignal: controller.signal,
      });

      ```

    fullName: abortSignal
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'abortSignal?: AbortSignal'
      return:
        description: ''
        type: AbortSignal
  - name: bypassIntegratedCache
    uid: '@azure/cosmos.SharedOptions.bypassIntegratedCache'
    package: '@azure/cosmos'
    summary: >-
      Sets if integrated cache should be bypassed or enabled for the request in
      Azure CosmosDB service.


      <p>Default value is false. By default integrated cache is enabled</p>
    fullName: bypassIntegratedCache
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'bypassIntegratedCache?: boolean'
      return:
        description: ''
        type: boolean
  - name: consistencyLevel
    uid: '@azure/cosmos.SharedOptions.consistencyLevel'
    package: '@azure/cosmos'
    summary: Consistency level required by the client.
    fullName: consistencyLevel
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'consistencyLevel?: string'
      return:
        description: ''
        type: string
  - name: disableRUPerMinuteUsage
    uid: '@azure/cosmos.SharedOptions.disableRUPerMinuteUsage'
    package: '@azure/cosmos'
    summary: >-
      DisableRUPerMinuteUsage is used to enable/disable Request
      Units(RUs)/minute capacity

      to serve the request if regular provisioned RUs/second is exhausted.
    fullName: disableRUPerMinuteUsage
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'disableRUPerMinuteUsage?: boolean'
      return:
        description: ''
        type: boolean
  - name: initialHeaders
    uid: '@azure/cosmos.SharedOptions.initialHeaders'
    package: '@azure/cosmos'
    summary: >-
      (Advanced use case) Initial headers to start with when sending requests to
      Cosmos
    fullName: initialHeaders
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'initialHeaders?: CosmosHeaders'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.CosmosHeaders" />
  - name: maxIntegratedCacheStalenessInMs
    uid: '@azure/cosmos.SharedOptions.maxIntegratedCacheStalenessInMs'
    package: '@azure/cosmos'
    summary: >-
      Sets the staleness value associated with the request in the Azure CosmosDB
      service. For requests where the <xref:com.azure.cosmos.ConsistencyLevel>
      is <xref:com.azure.cosmos.ConsistencyLevel%23EVENTUAL>  or
      <xref:com.azure.cosmos.ConsistencyLevel%23SESSION>, responses from the

      integrated cache are guaranteed to be no staler than value indicated by
      this maxIntegratedCacheStaleness. When the

      consistency level is not set, this property is ignored.


      <p>Default value is null</p>


      <p>Cache Staleness is supported in milliseconds granularity. Anything
      smaller than milliseconds will be ignored.</p>
    fullName: maxIntegratedCacheStalenessInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'maxIntegratedCacheStalenessInMs?: number'
      return:
        description: ''
        type: number
  - name: priorityLevel
    uid: '@azure/cosmos.SharedOptions.priorityLevel'
    package: '@azure/cosmos'
    summary: >-
      Priority Level (Low/High) for each request.

      Low priority requests are always throttled before any high priority
      requests.


      <p>Default value is null. By default all requests are of High priority</p>
    fullName: priorityLevel
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'priorityLevel?: PriorityLevel'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.PriorityLevel" />
  - name: sessionToken
    uid: '@azure/cosmos.SharedOptions.sessionToken'
    package: '@azure/cosmos'
    summary: >-
      Enables/disables getting document container quota related stats for
      document container read requests.
    fullName: sessionToken
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'sessionToken?: string'
      return:
        description: ''
        type: string
  - name: throughputBucket
    uid: '@azure/cosmos.SharedOptions.throughputBucket'
    package: '@azure/cosmos'
    summary: >-
      Throughput Bucket for a request.


      <p>Default value is null. In this case, the request can use 100% of the
      partition throughput. </p>

      For more information, visit [Cosmos DB throughput
      Bucketing](https://aka.ms/cosmsodb-bucketing).
    fullName: throughputBucket
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'throughputBucket?: number'
      return:
        description: ''
        type: number
