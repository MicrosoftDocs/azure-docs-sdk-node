### YamlMime:TSType
name: Conflict
uid: '@azure/cosmos.Conflict'
package: '@azure/cosmos'
summary: |-
  Use to read or delete a given [Conflict](xref:@azure/cosmos.Conflict) by id.

  See [Conflicts](xref:@azure/cosmos.Conflicts) to query or read all conflicts.
fullName: Conflict
remarks: ''
isDeprecated: false
type: class
properties:
  - name: container
    uid: '@azure/cosmos.Conflict.container'
    package: '@azure/cosmos'
    summary: ''
    fullName: container
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'container: Container'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container" />
  - name: id
    uid: '@azure/cosmos.Conflict.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/cosmos.Conflict.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
methods:
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Conflict.delete'
    package: '@azure/cosmos'
    summary: >+
      Delete the given
      [ConflictDefinition](xref:@azure/cosmos.ConflictDefinition).


      **Example**


      ```ts snippet:ConflictDelete

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const container = database.container("Test Container");


      await container.conflict("<conflict-id>").delete();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<ConflictResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ConflictResponse" />&gt;
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Conflict.read'
    package: '@azure/cosmos'
    summary: >+
      Read the [ConflictDefinition](xref:@azure/cosmos.ConflictDefinition) for
      the given [Conflict](xref:@azure/cosmos.Conflict).


      **Example**


      ```ts snippet:ConflictRead

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const container = database.container("Test Container");


      const { resource: conflict } = await
      container.conflict("<conflict-id>").read();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<ConflictResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ConflictResponse" />&gt;
