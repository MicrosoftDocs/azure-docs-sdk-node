### YamlMime:TSType
name: TextAnalysisClient
uid: '@azure/ai-language-text.TextAnalysisClient'
package: '@azure/ai-language-text'
summary: >-
  A client for interacting with the text analysis features in Azure Cognitive

  Language Service.


  The client needs the endpoint of a Language resource and an authentication

  method such as an API key or AAD. The API key and endpoint can be found in

  the Language resource page in the Azure portal. They will be located in the

  resource's Keys and Endpoint page, under Resource Management.


  ### Examples for authentication:


  #### API Key


  ```ts snippet:ReadmeSampleCreateClient_Key

  import { AzureKeyCredential, TextAnalysisClient } from
  "@azure/ai-language-text";


  const endpoint = "https://<resource name>.cognitiveservices.azure.com";

  const credential = new AzureKeyCredential("<api key>");

  const client = new TextAnalysisClient(endpoint, credential);

  ```


  #### Azure Active Directory


  See the [`@azure/identity`](https://npmjs.com/package/@azure/identity)

  package for more information about authenticating with Azure Active Directory.


  ```ts snippet:ReadmeSampleCreateClient_ActiveDirectory

  import { DefaultAzureCredential } from "@azure/identity";

  import { TextAnalysisClient } from "@azure/ai-language-text";


  const endpoint = "https://<resource name>.cognitiveservices.azure.com";

  const credential = new DefaultAzureCredential();

  const client = new TextAnalysisClient(endpoint, credential);

  ```
fullName: TextAnalysisClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: TextAnalysisClient(string, KeyCredential, TextAnalysisClientOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.constructor'
    package: '@azure/ai-language-text'
    summary: >-
      Creates an instance of TextAnalysisClient with the endpoint of a Language

      resource and an authentication method such as an API key or AAD.


      The API key and endpoint can be found in the Language resource page in the

      Azure portal. They will be located in the resource's Keys and Endpoint
      page,

      under Resource Management.


      ### Example


      ```ts snippet:ReadmeSampleCreateClient_Key

      import { AzureKeyCredential, TextAnalysisClient } from
      "@azure/ai-language-text";


      const endpoint = "https://<resource name>.cognitiveservices.azure.com";

      const credential = new AzureKeyCredential("<api key>");

      const client = new TextAnalysisClient(endpoint, credential);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TextAnalysisClient(endpointUrl: string, credential: KeyCredential,
        options?: TextAnalysisClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: The URL to the endpoint of a Cognitive Language Service resource
        - id: credential
          type: <xref uid="@azure/core-auth.KeyCredential" />
          description: Key credential to be used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/ai-language-text.TextAnalysisClientOptions" />
          description: Used to configure the TextAnalytics client.
  - name: TextAnalysisClient(string, TokenCredential, TextAnalysisClientOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.constructor_1'
    package: '@azure/ai-language-text'
    summary: >-
      Creates an instance of TextAnalysisClient with the endpoint of a Language

      resource and an authentication method such as an API key or AAD.


      The API key and endpoint can be found in the Language resource page in the

      Azure portal. They will be located in the resource's Keys and Endpoint
      page,

      under Resource Management.


      ### Example


      See the [`@azure/identity`](https://npmjs.com/package/@azure/identity)

      package for more information about authenticating with Azure Active
      Directory.


      ```ts snippet:ReadmeSampleCreateClient_ActiveDirectory

      import { DefaultAzureCredential } from "@azure/identity";

      import { TextAnalysisClient } from "@azure/ai-language-text";


      const endpoint = "https://<resource name>.cognitiveservices.azure.com";

      const credential = new DefaultAzureCredential();

      const client = new TextAnalysisClient(endpoint, credential);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TextAnalysisClient(endpointUrl: string, credential: TokenCredential,
        options?: TextAnalysisClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: The URL to the endpoint of a Cognitive Language Service resource
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: Token credential to be used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/ai-language-text.TextAnalysisClientOptions" />
          description: Used to configure the TextAnalytics client.
methods:
  - name: >-
      analyze<ActionName>(ActionName, LanguageDetectionInput[],
      AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.analyze'
    package: '@azure/ai-language-text'
    summary: >-
      Runs a predictive model to determine the language that the passed-in

      input strings are written in, and returns, for each one, the detected

      language as well as a score indicating the model's confidence that the

      inferred language is correct.  Scores close to 1 indicate high certainty
      in

      the result.  120 languages are supported.


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Language detection


      ```ts snippet:Sample_LanguageDetection

      import { TextAnalysisClient } from "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const documents = [
        "This document is written in English.",
        "Este es un document escrito en Español.",
        "这是一个用中文写的文件",
        "Dies ist ein Dokument in deutsche Sprache.",
        "Detta är ett dokument skrivet på engelska.",
      ];


      const client = new TextAnalysisClient("<endpoint>", new
      DefaultAzureCredential());


      const result = await client.analyze("LanguageDetection", documents, "us",
      {
        modelVersion: "2022-04-10-preview",
      });


      for (const doc of result) {
        if (!doc.error) {
          console.log(
            `Primary language: ${doc.primaryLanguage.name} (iso6391 name: ${doc.primaryLanguage.iso6391Name})`,
          );
        }
      }

      ```


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/language-detection/overview

      for more information on language detection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function analyze<ActionName>(actionName: ActionName, documents:
        LanguageDetectionInput[], options?: AnalyzeActionParameters<ActionName>
        & TextAnalysisOperationOptions): Promise<AnalyzeResult<ActionName>>
      parameters:
        - id: actionName
          type: ActionName
          description: |-
            the name of the action to be performed on the input
              documents, see $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName)
        - id: documents
          type: <xref uid="@azure/ai-language-text.LanguageDetectionInput" />[]
          description: the input documents to be analyzed
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.AnalyzeActionParameters"
            />&lt;ActionName&gt; & <xref
            uid="@azure/ai-language-text.TextAnalysisOperationOptions" />
          description: optional action parameters and settings for the operation
      return:
        description: |-
          an array of results where each element contains the primary language
            for the corresponding input document.
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeResult"
          />&lt;ActionName&gt;&gt;
  - name: >-
      analyze<ActionName>(ActionName, string[], string,
      AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.analyze_1'
    package: '@azure/ai-language-text'
    summary: >-
      Runs a predictive model to determine the language that the passed-in

      input strings are written in, and returns, for each one, the detected

      language as well as a score indicating the model's confidence that the

      inferred language is correct.  Scores close to 1 indicate high certainty
      in

      the result.  120 languages are supported.


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Language detection


      ```ts snippet:Sample_LanguageDetection

      import { TextAnalysisClient } from "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const documents = [
        "This document is written in English.",
        "Este es un document escrito en Español.",
        "这是一个用中文写的文件",
        "Dies ist ein Dokument in deutsche Sprache.",
        "Detta är ett dokument skrivet på engelska.",
      ];


      const client = new TextAnalysisClient("<endpoint>", new
      DefaultAzureCredential());


      const result = await client.analyze("LanguageDetection", documents, "us",
      {
        modelVersion: "2022-04-10-preview",
      });


      for (const doc of result) {
        if (!doc.error) {
          console.log(
            `Primary language: ${doc.primaryLanguage.name} (iso6391 name: ${doc.primaryLanguage.iso6391Name})`,
          );
        }
      }

      ```


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/language-detection/overview

      for more information on language detection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function analyze<ActionName>(actionName: ActionName, documents:
        string[], countryHint?: string, options?:
        AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions):
        Promise<AnalyzeResult<ActionName>>
      parameters:
        - id: actionName
          type: ActionName
          description: |-
            the name of the action to be performed on the input
              documents, see $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName)
        - id: documents
          type: string[]
          description: the input documents to be analyzed
        - id: countryHint
          type: string
          description: |-
            Indicates the country of origin for all of
              the input strings to assist the model in predicting the language they are
              written in.  If unspecified, this value will be set to the default
              country hint in `TextAnalysisClientOptions`. If set to an empty string,
              or the string "none", the service will apply a model where the country is
              explicitly unset. The same country hint is applied to all strings in the
              input collection.
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.AnalyzeActionParameters"
            />&lt;ActionName&gt; & <xref
            uid="@azure/ai-language-text.TextAnalysisOperationOptions" />
          description: optional action parameters and settings for the operation
      return:
        description: |-
          an array of results where each element contains the primary language
            for the corresponding input document.
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeResult"
          />&lt;ActionName&gt;&gt;
  - name: >-
      analyze<ActionName>(ActionName, string[], string,
      AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.analyze_3'
    package: '@azure/ai-language-text'
    summary: >-
      Runs a predictive model to perform the action of choice on the input

      strings. See
      $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName) for a
      list of supported

      actions.


      The layout of each item in the results array depends on the action chosen.

      For example, each PIIEntityRecognition document result consists of both

      `entities` and `redactedText` where the former is a list of all Pii
      entities

      in the text and the latter is the original text after all such Pii
      entities

      have been redacted from it.


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Opinion mining


      ```ts snippet:Sample_SentimentAnalysis

      import { TextAnalysisClient } from "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const documents = [
        "I had the best day of my life.",
        "This was a waste of my time. The speaker put me to sleep.",
      ];


      const client = new TextAnalysisClient("<endpoint>", new
      DefaultAzureCredential());


      const results = await client.analyze("SentimentAnalysis", documents);


      for (let i = 0; i < results.length; i++) {
        const result = results[i];
        console.log(`- Document ${result.id}`);
        if (!result.error) {
          console.log(`\tDocument text: ${documents[i]}`);
          console.log(`\tOverall Sentiment: ${result.sentiment}`);
          console.log("\tSentiment confidence scores: ", result.confidenceScores);
          console.log("\tSentences");
          for (const { sentiment, confidenceScores, text } of result.sentences) {
            console.log(`\t- Sentence text: ${text}`);
            console.log(`\t  Sentence sentiment: ${sentiment}`);
            console.log("\t  Confidence scores:", confidenceScores);
          }
        } else {
          console.error(`  Error: ${result.error}`);
        }
      }

      ```


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview

      for more information on opinion mining.


      #### Personally identifiable information


      ```ts snippet:Sample_PIIEntityRecognition

      import {
        TextAnalysisClient,
        KnownPiiEntityDomain,
        KnownPiiEntityCategory,
      } from "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const client = new TextAnalysisClient("<endpoint>", new
      DefaultAzureCredential());


      const documents = ["My phone number is 555-5555"];


      const [result] = await client.analyze("PiiEntityRecognition", documents,
      "en", {
        domainFilter: KnownPiiEntityDomain.Phi,
        categoriesFilter: [
          KnownPiiEntityCategory.PhoneNumber,
          KnownPiiEntityCategory.USSocialSecurityNumber,
        ],
      });


      if (!result.error) {
        console.log(`Redacted text: "${result.redactedText}"`);
        console.log("Pii Entities: ");
        for (const entity of result.entities) {
          console.log(`\t- "${entity.text}" of type ${entity.category}`);
        }
      }

      ```


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/personally-identifiable-information/overview

      for more information on personally identifiable information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function analyze<ActionName>(actionName: ActionName, documents:
        string[], languageCode?: string, options?:
        AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions):
        Promise<AnalyzeResult<ActionName>>
      parameters:
        - id: actionName
          type: ActionName
          description: |-
            the name of the action to be performed on the input
              documents, see $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName)
        - id: documents
          type: string[]
          description: the input documents to be analyzed
        - id: languageCode
          type: string
          description: |-
            the code of the language that all the input strings are
               written in. If unspecified, this value will be set to the default
               language in `TextAnalysisClientOptions`. If set to an empty string,
               the service will apply a model where the language is explicitly set to
               "None". Language support varies per action, for example, more information
               about the languages supported for Entity Recognition actions can be
               found in https://learn.microsoft.com//azure/cognitive-services/language-service/named-entity-recognition/language-support.
               If set to "auto", the service will automatically infer the language from
               the input text.
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.AnalyzeActionParameters"
            />&lt;ActionName&gt; & <xref
            uid="@azure/ai-language-text.TextAnalysisOperationOptions" />
          description: optional action parameters and settings for the operation
      return:
        description: an array of results corresponding to the input documents
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeResult"
          />&lt;ActionName&gt;&gt;
  - name: >-
      analyze<ActionName>(ActionName, TextDocumentInput[],
      AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.analyze_2'
    package: '@azure/ai-language-text'
    summary: >-
      Runs a predictive model to perform the action of choice on the input

      documents. See
      $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName) for a
      list of supported

      actions.


      The layout of each item in the results array depends on the action chosen.

      For example, each PIIEntityRecognition document result consists of both

      `entities` and `redactedText` where the former is a list of all Pii
      entities

      in the text and the latter is the original text after all such Pii
      entities

      have been redacted from it.


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Opinion mining


      ```ts snippet:Sample_SentimentAnalysis

      import { TextAnalysisClient } from "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const documents = [
        "I had the best day of my life.",
        "This was a waste of my time. The speaker put me to sleep.",
      ];


      const client = new TextAnalysisClient("<endpoint>", new
      DefaultAzureCredential());


      const results = await client.analyze("SentimentAnalysis", documents);


      for (let i = 0; i < results.length; i++) {
        const result = results[i];
        console.log(`- Document ${result.id}`);
        if (!result.error) {
          console.log(`\tDocument text: ${documents[i]}`);
          console.log(`\tOverall Sentiment: ${result.sentiment}`);
          console.log("\tSentiment confidence scores: ", result.confidenceScores);
          console.log("\tSentences");
          for (const { sentiment, confidenceScores, text } of result.sentences) {
            console.log(`\t- Sentence text: ${text}`);
            console.log(`\t  Sentence sentiment: ${sentiment}`);
            console.log("\t  Confidence scores:", confidenceScores);
          }
        } else {
          console.error(`  Error: ${result.error}`);
        }
      }

      ```


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview

      for more information on opinion mining.


      #### Personally identifiable information


      ```ts snippet:Sample_PIIEntityRecognition

      import {
        TextAnalysisClient,
        KnownPiiEntityDomain,
        KnownPiiEntityCategory,
      } from "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const client = new TextAnalysisClient("<endpoint>", new
      DefaultAzureCredential());


      const documents = ["My phone number is 555-5555"];


      const [result] = await client.analyze("PiiEntityRecognition", documents,
      "en", {
        domainFilter: KnownPiiEntityDomain.Phi,
        categoriesFilter: [
          KnownPiiEntityCategory.PhoneNumber,
          KnownPiiEntityCategory.USSocialSecurityNumber,
        ],
      });


      if (!result.error) {
        console.log(`Redacted text: "${result.redactedText}"`);
        console.log("Pii Entities: ");
        for (const entity of result.entities) {
          console.log(`\t- "${entity.text}" of type ${entity.category}`);
        }
      }

      ```


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/personally-identifiable-information/overview

      for more information on personally identifiable information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function analyze<ActionName>(actionName: ActionName, documents:
        TextDocumentInput[], options?: AnalyzeActionParameters<ActionName> &
        TextAnalysisOperationOptions): Promise<AnalyzeResult<ActionName>>
      parameters:
        - id: actionName
          type: ActionName
          description: |-
            the name of the action to be performed on the input
              documents, see $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName)
        - id: documents
          type: <xref uid="@azure/ai-language-text.TextDocumentInput" />[]
          description: the input documents to be analyzed
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.AnalyzeActionParameters"
            />&lt;ActionName&gt; & <xref
            uid="@azure/ai-language-text.TextAnalysisOperationOptions" />
          description: optional action parameters and settings for the operation
      return:
        description: an array of results corresponding to the input documents
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeResult"
          />&lt;ActionName&gt;&gt;
  - name: >-
      beginAnalyzeBatch(AnalyzeBatchAction[], string[], string,
      BeginAnalyzeBatchOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.beginAnalyzeBatch'
    package: '@azure/ai-language-text'
    summary: >-
      Performs an array (batch) of actions on the input documents. Each action
      has

      a `kind` field that specifies the nature of the action. See
      $[AnalyzeBatchActionNames](xref:547)

      for a list of supported actions. In addition to `kind`, actions could also

      have other parameters such as `disableServiceLogs` and `modelVersion`.


      The results array contains the results for those input actions where each

      item also has a `kind` field that specifies the type of the results.


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Key phrase extraction and Pii entity recognition


      ```ts snippet:Sample_ActionBatching

      import { TextAnalysisClient, AnalyzeBatchAction } from
      "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const documents = [
        "Microsoft was founded by Bill Gates and Paul Allen.",
        "Redmond is a city in King County, Washington, United States, located 15 miles east of Seattle.",
        "I need to take my cat to the veterinarian.",
        "The employee's SSN is 555-55-5555.",
        "We went to Contoso Steakhouse located at midtown NYC last week for a dinner party, and we adore the spot! They provide marvelous food and they have a great menu. The chief cook happens to be the owner (I think his name is John Doe) and he is super nice, coming out of the kitchen and greeted us all. We enjoyed very much dining in the place! The Sirloin steak I ordered was tender and juicy, and the place was impeccably clean. You can even pre-order from their online menu at www.contososteakhouse.com, call 312-555-0176 or send email to order@contososteakhouse.com! The only complaint I have is the food didn't come fast enough. Overall I highly recommend it!",
      ];


      const client = new TextAnalysisClient("<endpoint>", new
      DefaultAzureCredential());


      const actions: AnalyzeBatchAction[] = [
        {
          kind: "EntityRecognition",
          modelVersion: "latest",
        },
        {
          kind: "PiiEntityRecognition",
          modelVersion: "latest",
        },
        {
          kind: "KeyPhraseExtraction",
          modelVersion: "latest",
        },
      ];

      const poller = await client.beginAnalyzeBatch(actions, documents, "en");


      poller.onProgress(() => {
        console.log(
          `Number of actions still in progress: ${poller.getOperationState().actionInProgressCount}`,
        );
      });


      console.log(`The operation was created on
      ${poller.getOperationState().createdOn}`);


      console.log(`The operation results will expire on
      ${poller.getOperationState().expiresOn}`);


      const actionResults = await poller.pollUntilDone();


      for await (const actionResult of actionResults) {
        if (actionResult.error) {
          const { code, message } = actionResult.error;
          throw new Error(`Unexpected error (${code}): ${message}`);
        }
        switch (actionResult.kind) {
          case "KeyPhraseExtraction": {
            for (const doc of actionResult.results) {
              console.log(`- Document ${doc.id}`);
              if (!doc.error) {
                console.log("\tKey phrases:");
                for (const phrase of doc.keyPhrases) {
                  console.log(`\t- ${phrase}`);
                }
              } else {
                console.error("\tError:", doc.error);
              }
            }
            break;
          }
          case "EntityRecognition": {
            for (const doc of actionResult.results) {
              console.log(`- Document ${doc.id}`);
              if (!doc.error) {
                console.log("\tEntities:");
                for (const entity of doc.entities) {
                  console.log(`\t- Entity ${entity.text} of type ${entity.category}`);
                }
              } else {
                console.error("\tError:", doc.error);
              }
            }
            break;
          }
          case "PiiEntityRecognition": {
            for (const doc of actionResult.results) {
              console.log(`- Document ${doc.id}`);
              if (!doc.error) {
                console.log("\tPii Entities:");
                for (const entity of doc.entities) {
                  console.log(`\t- Entity ${entity.text} of type ${entity.category}`);
                }
              } else {
                console.error("\tError:", doc.error);
              }
            }
            break;
          }
          default: {
            throw new Error(`Unexpected action results: ${actionResult.kind}`);
          }
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginAnalyzeBatch(actions: AnalyzeBatchAction[], documents:
        string[], languageCode?: string, options?: BeginAnalyzeBatchOptions):
        Promise<AnalyzeBatchPoller>
      parameters:
        - id: actions
          type: <xref uid="@azure/ai-language-text.AnalyzeBatchAction" />[]
          description: an array of actions that will be run on the input documents
        - id: documents
          type: string[]
          description: the input documents to be analyzed
        - id: languageCode
          type: string
          description: |-
            the code of the language that all the input strings are
               written in. If unspecified, this value will be set to the default
               language in `TextAnalysisClientOptions`. If set to an empty string,
               the service will apply a model where the language is explicitly set to
               "None". Language support varies per action, for example, more information
               about the languages supported for Entity Recognition actions can be
               found in https://learn.microsoft.com//azure/cognitive-services/language-service/named-entity-recognition/language-support.
               If set to "auto", the service will automatically infer the language from
               the input text.
        - id: options
          type: <xref uid="@azure/ai-language-text.BeginAnalyzeBatchOptions" />
          description: optional settings for the operation
      return:
        description: an array of results corresponding to the input actions
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeBatchPoller"
          />&gt;
  - name: >-
      beginAnalyzeBatch(AnalyzeBatchAction[], TextDocumentInput[],
      BeginAnalyzeBatchOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.beginAnalyzeBatch_1'
    package: '@azure/ai-language-text'
    summary: >-
      Performs an array (batch) of actions on the input documents. Each action
      has

      a `kind` field that specifies the nature of the action. See
      $[AnalyzeBatchActionNames](xref:547)

      for a list of supported actions. In addition to `kind`, actions could also

      have other parameters such as `disableServiceLogs` and `modelVersion`.


      The results array contains the results for those input actions where each

      item also has a `kind` field that specifies the type of the results.


      See
      https://learn.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Keyphrase extraction and Pii entity recognition


      ```ts snippet:Sample_ActionBatching

      import { TextAnalysisClient, AnalyzeBatchAction } from
      "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const documents = [
        "Microsoft was founded by Bill Gates and Paul Allen.",
        "Redmond is a city in King County, Washington, United States, located 15 miles east of Seattle.",
        "I need to take my cat to the veterinarian.",
        "The employee's SSN is 555-55-5555.",
        "We went to Contoso Steakhouse located at midtown NYC last week for a dinner party, and we adore the spot! They provide marvelous food and they have a great menu. The chief cook happens to be the owner (I think his name is John Doe) and he is super nice, coming out of the kitchen and greeted us all. We enjoyed very much dining in the place! The Sirloin steak I ordered was tender and juicy, and the place was impeccably clean. You can even pre-order from their online menu at www.contososteakhouse.com, call 312-555-0176 or send email to order@contososteakhouse.com! The only complaint I have is the food didn't come fast enough. Overall I highly recommend it!",
      ];


      const client = new TextAnalysisClient("<endpoint>", new
      DefaultAzureCredential());


      const actions: AnalyzeBatchAction[] = [
        {
          kind: "EntityRecognition",
          modelVersion: "latest",
        },
        {
          kind: "PiiEntityRecognition",
          modelVersion: "latest",
        },
        {
          kind: "KeyPhraseExtraction",
          modelVersion: "latest",
        },
      ];

      const poller = await client.beginAnalyzeBatch(actions, documents, "en");


      poller.onProgress(() => {
        console.log(
          `Number of actions still in progress: ${poller.getOperationState().actionInProgressCount}`,
        );
      });


      console.log(`The operation was created on
      ${poller.getOperationState().createdOn}`);


      console.log(`The operation results will expire on
      ${poller.getOperationState().expiresOn}`);


      const actionResults = await poller.pollUntilDone();


      for await (const actionResult of actionResults) {
        if (actionResult.error) {
          const { code, message } = actionResult.error;
          throw new Error(`Unexpected error (${code}): ${message}`);
        }
        switch (actionResult.kind) {
          case "KeyPhraseExtraction": {
            for (const doc of actionResult.results) {
              console.log(`- Document ${doc.id}`);
              if (!doc.error) {
                console.log("\tKey phrases:");
                for (const phrase of doc.keyPhrases) {
                  console.log(`\t- ${phrase}`);
                }
              } else {
                console.error("\tError:", doc.error);
              }
            }
            break;
          }
          case "EntityRecognition": {
            for (const doc of actionResult.results) {
              console.log(`- Document ${doc.id}`);
              if (!doc.error) {
                console.log("\tEntities:");
                for (const entity of doc.entities) {
                  console.log(`\t- Entity ${entity.text} of type ${entity.category}`);
                }
              } else {
                console.error("\tError:", doc.error);
              }
            }
            break;
          }
          case "PiiEntityRecognition": {
            for (const doc of actionResult.results) {
              console.log(`- Document ${doc.id}`);
              if (!doc.error) {
                console.log("\tPii Entities:");
                for (const entity of doc.entities) {
                  console.log(`\t- Entity ${entity.text} of type ${entity.category}`);
                }
              } else {
                console.error("\tError:", doc.error);
              }
            }
            break;
          }
          default: {
            throw new Error(`Unexpected action results: ${actionResult.kind}`);
          }
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginAnalyzeBatch(actions: AnalyzeBatchAction[], documents:
        TextDocumentInput[], options?: BeginAnalyzeBatchOptions):
        Promise<AnalyzeBatchPoller>
      parameters:
        - id: actions
          type: <xref uid="@azure/ai-language-text.AnalyzeBatchAction" />[]
          description: an array of actions that will be run on the input documents
        - id: documents
          type: <xref uid="@azure/ai-language-text.TextDocumentInput" />[]
          description: the input documents to be analyzed
        - id: options
          type: <xref uid="@azure/ai-language-text.BeginAnalyzeBatchOptions" />
          description: optional settings for the operation
      return:
        description: an array of results corresponding to the input actions
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeBatchPoller"
          />&gt;
  - name: restoreAnalyzeBatchPoller(string, RestoreAnalyzeBatchPollerOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.restoreAnalyzeBatchPoller'
    package: '@azure/ai-language-text'
    summary: |-
      Creates a poller from the serialized state of another poller. This can be
      useful when you want to create pollers on a different host or a poller
      needs to be constructed after the original one is not in scope.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreAnalyzeBatchPoller(serializedState: string, options?:
        RestoreAnalyzeBatchPollerOptions): Promise<AnalyzeBatchPoller>
      parameters:
        - id: serializedState
          type: string
          description: |-
            the serialized state of another poller. It is the
                                     result of `poller.toString()`
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.RestoreAnalyzeBatchPollerOptions"
            />
          description: optional settings for the operation
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeBatchPoller"
          />&gt;
