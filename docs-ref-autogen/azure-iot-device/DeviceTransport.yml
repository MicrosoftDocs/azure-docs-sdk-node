### YamlMime:TSType
name: DeviceTransport
uid: azure-iot-device.DeviceTransport
package: azure-iot-device
summary: ''
fullName: DeviceTransport
remarks: ''
isDeprecated: false
type: interface
inheritedMethods:
  - name: 'addListener<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.DeviceTransport.addListener
    package: azure-iot-device
    summary: Alias for `emitter.on(eventName, listener)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): DeviceTransport
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.addListener
  - name: emit<K>(string | symbol, AnyRest)
    uid: azure-iot-device.DeviceTransport.emit
    package: azure-iot-device
    summary: >-
      Synchronously calls each of the listeners registered for the event named
      `eventName`, in the order they were registered, passing the supplied
      arguments

      to each.


      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      import { EventEmitter } from 'node:events';

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit<K>(eventName: string | symbol, args: AnyRest): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.emit
  - name: eventNames()
    uid: azure-iot-device.DeviceTransport.eventNames
    package: azure-iot-device
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.

      ```js
      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventNames(): (string | symbol)[]'
      return:
        description: ''
        type: (string | symbol)[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.eventNames
  - name: getMaxListeners()
    uid: azure-iot-device.DeviceTransport.getMaxListeners
    package: azure-iot-device
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:EventEmitter.defaultMaxListeners>.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: listenerCount<K>(string | symbol, Function)
    uid: azure-iot-device.DeviceTransport.listenerCount
    package: azure-iot-device
    summary: >-
      Returns the number of listeners listening for the event named `eventName`.

      If `listener` is provided, it will return how many times the listener is
      found

      in the list of the listeners of the event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listenerCount<K>(eventName: string | symbol, listener?:
        Function): number
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event being listened for
        - id: listener
          type: Function
          description: The event handler function
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listeners<K>(string | symbol)
    uid: azure-iot-device.DeviceTransport.listeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.

      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listeners
  - name: 'off<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.DeviceTransport.off
    package: azure-iot-device
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): DeviceTransport
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.off
  - name: 'once<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.DeviceTransport.once
    package: azure-iot-device
    summary: >-
      Adds a **one-time** `listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.


      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added. The
      `emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function once<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): DeviceTransport
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: 'prependListener<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.DeviceTransport.prependListener
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`

      and `listener` will result in the `listener` being added, and called,
      multiple times.


      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): DeviceTransport
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependListener
  - name: 'prependOnceListener<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.DeviceTransport.prependOnceListener
    package: azure-iot-device
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.


      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener<K>(eventName: string | symbol, listener:
        (args: any[]) => void): DeviceTransport
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependOnceListener
  - name: rawListeners<K>(string | symbol)
    uid: azure-iot-device.DeviceTransport.rawListeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).

      ```js
      import { EventEmitter } from 'node:events';
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rawListeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> EventEmitter.rawListeners
  - name: removeAllListeners(string | symbol)
    uid: azure-iot-device.DeviceTransport.removeAllListeners
    package: azure-iot-device
    summary: |-
      Removes all listeners, or those of the specified `eventName`.

      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeAllListeners(eventName?: string | symbol):
        DeviceTransport
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeAllListeners
  - name: 'removeListener<K>(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.DeviceTransport.removeListener
    package: azure-iot-device
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named `eventName`.


      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that any
      `removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      import { EventEmitter } from 'node:events';

      class MyEmitter extends EventEmitter {}

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')` listener is
      removed:


      ```js

      import { EventEmitter } from 'node:events';

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): DeviceTransport
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeListener
  - name: setMaxListeners(number)
    uid: azure-iot-device.DeviceTransport.setMaxListeners
    package: azure-iot-device
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to `Infinity` (or `0`) to indicate an unlimited number of listeners.


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): DeviceTransport'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
  - name: '[captureRejectionSymbol]<K>(Error, string | symbol, AnyRest)'
    uid: azure-iot-device.DeviceTransport.[captureRejectionSymbol]
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function [captureRejectionSymbol]<K>(error: Error, event: string |
        symbol, args: AnyRest)
      parameters:
        - id: error
          type: Error
          description: ''
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
    inheritanceDescription: <b>Inherited From</b> EventEmitter.__@captureRejectionSymbol@139
methods:
  - name: 'abandon(Message, (err?: Error, results?: MessageAbandoned) => void)'
    uid: azure-iot-device.DeviceTransport.abandon
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function abandon(message: Message, done: (err?: Error, results?:
        MessageAbandoned) => void)
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: done
          type: '(err?: Error, results?: MessageAbandoned) =&gt; void'
          description: ''
  - name: 'complete(Message, (err?: Error, result?: MessageCompleted) => void)'
    uid: azure-iot-device.DeviceTransport.complete
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function complete(message: Message, done: (err?: Error, result?:
        MessageCompleted) => void)
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: done
          type: '(err?: Error, result?: MessageCompleted) =&gt; void'
          description: ''
  - name: 'connect((err?: Error, result?: Connected) => void)'
    uid: azure-iot-device.DeviceTransport.connect
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function connect(done: (err?: Error, result?: Connected) => void)'
      parameters:
        - id: done
          type: '(err?: Error, result?: Connected) =&gt; void'
          description: ''
  - name: 'disableC2D((err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.disableC2D
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function disableC2D(callback: (err?: Error) => void)'
      parameters:
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
  - name: 'disableInputMessages((err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.disableInputMessages
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function disableInputMessages(callback: (err?: Error) => void)'
      parameters:
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
  - name: 'disableMethods((err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.disableMethods
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function disableMethods(callback: (err?: Error) => void)'
      parameters:
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
  - name: 'disableTwinDesiredPropertiesUpdates((err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.disableTwinDesiredPropertiesUpdates
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableTwinDesiredPropertiesUpdates(callback: (err?: Error) =>
        void)
      parameters:
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
  - name: 'disconnect((err?: Error, result?: Disconnected) => void)'
    uid: azure-iot-device.DeviceTransport.disconnect
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function disconnect(done: (err?: Error, result?: Disconnected) => void)'
      parameters:
        - id: done
          type: '(err?: Error, result?: Disconnected) =&gt; void'
          description: ''
  - name: 'enableC2D((err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.enableC2D
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function enableC2D(callback: (err?: Error) => void)'
      parameters:
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
  - name: 'enableInputMessages((err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.enableInputMessages
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function enableInputMessages(callback: (err?: Error) => void)'
      parameters:
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
  - name: 'enableMethods((err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.enableMethods
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function enableMethods(callback: (err?: Error) => void)'
      parameters:
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
  - name: 'enableTwinDesiredPropertiesUpdates((err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.enableTwinDesiredPropertiesUpdates
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableTwinDesiredPropertiesUpdates(callback: (err?: Error) =>
        void)
      parameters:
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
  - name: 'getTwin((err?: Error, twin?: TwinProperties) => void)'
    uid: azure-iot-device.DeviceTransport.getTwin
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTwin(callback: (err?: Error, twin?: TwinProperties) => void)'
      parameters:
        - id: callback
          type: '(err?: Error, twin?: TwinProperties) =&gt; void'
          description: ''
  - name: on("connected", () => void)
    uid: azure-iot-device.DeviceTransport.on_2
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function on(type: "connected", func: () => void): DeviceTransport'
      parameters:
        - id: type
          type: '"connected"'
          description: ''
        - id: func
          type: () =&gt; void
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
  - name: 'on("disconnect", (err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.on_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(type: "disconnect", func: (err?: Error) => void):
        DeviceTransport
      parameters:
        - id: type
          type: '"disconnect"'
          description: ''
        - id: func
          type: '(err?: Error) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
  - name: 'on("error", (err: Error) => void)'
    uid: azure-iot-device.DeviceTransport.on
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function on(type: "error", func: (err: Error) => void): DeviceTransport'
      parameters:
        - id: type
          type: '"error"'
          description: ''
        - id: func
          type: '(err: Error) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
  - name: 'on("inputMessage", (inputName: string, msg: Message) => void)'
    uid: azure-iot-device.DeviceTransport.on_5
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(type: "inputMessage", func: (inputName: string, msg:
        Message) => void): DeviceTransport
      parameters:
        - id: type
          type: '"inputMessage"'
          description: ''
        - id: func
          type: '(inputName: string, msg: Message) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
  - name: 'on("message", (msg: Message) => void)'
    uid: azure-iot-device.DeviceTransport.on_3
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(type: "message", func: (msg: Message) => void):
        DeviceTransport
      parameters:
        - id: type
          type: '"message"'
          description: ''
        - id: func
          type: '(msg: Message) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
  - name: 'on("twinDesiredPropertiesUpdate", (desiredProps: any) => void)'
    uid: azure-iot-device.DeviceTransport.on_4
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(type: "twinDesiredPropertiesUpdate", func: (desiredProps:
        any) => void): DeviceTransport
      parameters:
        - id: type
          type: '"twinDesiredPropertiesUpdate"'
          description: ''
        - id: func
          type: '(desiredProps: any) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.DeviceTransport" />
  - name: >-
      onDeviceMethod(string, (request: MethodMessage, response:
      DeviceMethodResponse) => void)
    uid: azure-iot-device.DeviceTransport.onDeviceMethod
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onDeviceMethod(methodName: string, methodCallback: (request:
        MethodMessage, response: DeviceMethodResponse) => void)
      parameters:
        - id: methodName
          type: string
          description: ''
        - id: methodCallback
          type: '(request: MethodMessage, response: DeviceMethodResponse) =&gt; void'
          description: ''
  - name: 'reject(Message, (err?: Error, results?: MessageRejected) => void)'
    uid: azure-iot-device.DeviceTransport.reject
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reject(message: Message, done: (err?: Error, results?:
        MessageRejected) => void)
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: done
          type: '(err?: Error, results?: MessageRejected) =&gt; void'
          description: ''
  - name: 'sendEvent(Message, (err?: Error, result?: MessageEnqueued) => void)'
    uid: azure-iot-device.DeviceTransport.sendEvent
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendEvent(message: Message, done: (err?: Error, result?:
        MessageEnqueued) => void)
      parameters:
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: done
          type: '(err?: Error, result?: MessageEnqueued) =&gt; void'
          description: ''
  - name: 'sendEventBatch(Message[], (err?: Error, result?: MessageEnqueued) => void)'
    uid: azure-iot-device.DeviceTransport.sendEventBatch
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendEventBatch(messages: Message[], done: (err?: Error,
        result?: MessageEnqueued) => void)
      parameters:
        - id: messages
          type: <xref uid="azure-iot-device.Message" />[]
          description: ''
        - id: done
          type: '(err?: Error, result?: MessageEnqueued) =&gt; void'
          description: ''
  - name: >-
      sendMethodResponse(DeviceMethodResponse, (err?: Error, result?: any) =>
      void)
    uid: azure-iot-device.DeviceTransport.sendMethodResponse
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendMethodResponse(response: DeviceMethodResponse, done?:
        (err?: Error, result?: any) => void)
      parameters:
        - id: response
          type: <xref uid="azure-iot-device.DeviceMethodResponse" />
          description: ''
        - id: done
          type: '(err?: Error, result?: any) =&gt; void'
          description: ''
  - name: >-
      sendOutputEvent(string, Message, (err?: Error, result?: MessageEnqueued)
      => void)
    uid: azure-iot-device.DeviceTransport.sendOutputEvent
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendOutputEvent(outputName: string, message: Message, done:
        (err?: Error, result?: MessageEnqueued) => void)
      parameters:
        - id: outputName
          type: string
          description: ''
        - id: message
          type: <xref uid="azure-iot-device.Message" />
          description: ''
        - id: done
          type: '(err?: Error, result?: MessageEnqueued) =&gt; void'
          description: ''
  - name: >-
      sendOutputEventBatch(string, Message[], (err?: Error, result?:
      MessageEnqueued) => void)
    uid: azure-iot-device.DeviceTransport.sendOutputEventBatch
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendOutputEventBatch(outputName: string, messages: Message[],
        done: (err?: Error, result?: MessageEnqueued) => void)
      parameters:
        - id: outputName
          type: string
          description: ''
        - id: messages
          type: <xref uid="azure-iot-device.Message" />[]
          description: ''
        - id: done
          type: '(err?: Error, result?: MessageEnqueued) =&gt; void'
          description: ''
  - name: >-
      setOptions(DeviceClientOptions, (err?: Error, result?:
      TransportConfigured) => void)
    uid: azure-iot-device.DeviceTransport.setOptions
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setOptions(options: DeviceClientOptions, done: (err?: Error,
        result?: TransportConfigured) => void)
      parameters:
        - id: options
          type: <xref uid="azure-iot-device.DeviceClientOptions" />
          description: ''
        - id: done
          type: '(err?: Error, result?: TransportConfigured) =&gt; void'
          description: ''
  - name: >-
      updateSharedAccessSignature(string, (err?: Error, result?:
      SharedAccessSignatureUpdated) => void)
    uid: azure-iot-device.DeviceTransport.updateSharedAccessSignature
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSharedAccessSignature(sharedAccessSignature: string,
        done: (err?: Error, result?: SharedAccessSignatureUpdated) => void)
      parameters:
        - id: sharedAccessSignature
          type: string
          description: ''
        - id: done
          type: '(err?: Error, result?: SharedAccessSignatureUpdated) =&gt; void'
          description: ''
  - name: 'updateTwinReportedProperties(any, (err?: Error) => void)'
    uid: azure-iot-device.DeviceTransport.updateTwinReportedProperties
    package: azure-iot-device
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateTwinReportedProperties(patch: any, callback: (err?:
        Error) => void)
      parameters:
        - id: patch
          type: any
          description: ''
        - id: callback
          type: '(err?: Error) =&gt; void'
          description: ''
extends: EventEmitter
