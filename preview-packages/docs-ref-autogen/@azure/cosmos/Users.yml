### YamlMime:TSType
name: Users
uid: '@azure/cosmos.Users'
package: '@azure/cosmos'
summary: >-
  Used to create, upsert, query, and read all users.


  See [User](xref:@azure/cosmos.User) to read, replace, or delete a specific
  User by id.
fullName: Users
remarks: ''
isDeprecated: false
type: class
properties:
  - name: database
    uid: '@azure/cosmos.Users.database'
    package: '@azure/cosmos'
    summary: ''
    fullName: database
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'database: Database'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Database" />
methods:
  - name: create(UserDefinition, RequestOptions)
    uid: '@azure/cosmos.Users.create'
    package: '@azure/cosmos'
    summary: >+
      Create a database user with the specified
      [UserDefinition](xref:@azure/cosmos.UserDefinition).


      **Example**


      ```ts snippet:UsersCreate

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      await database.users.create({ id: "<user-id>" });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(body: UserDefinition, options?: RequestOptions):
        Promise<UserResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.UserDefinition" />
          description: The specified [UserDefinition](xref:@azure/cosmos.UserDefinition).
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.UserResponse" />&gt;
  - name: query(SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Users.query'
    package: '@azure/cosmos'
    summary: Query all users.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: query<T>(SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Users.query_1'
    package: '@azure/cosmos'
    summary: >+
      Query all users.


      **Example**


      Query user with id.

      ```ts snippet:UsersQuery

      import { CosmosClient, SqlQuerySpec } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const querySpec: SqlQuerySpec = {
        query: `SELECT * FROM root r WHERE r.id = @user`,
        parameters: [{ name: "@user", value: "<user-id>" }],
      };

      const { resources: permisssion } = await
      database.users.query(querySpec).fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Users.readAll'
    package: '@azure/cosmos'
    summary: >+
      Read all users.-


      **Example**


      Read all users to array.

      ```ts snippet:UsersReadAll

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { resources: usersList } = await
      database.users.readAll().fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAll(options?: FeedOptions): QueryIterator<UserDefinition &
        Resource>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.UserDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
  - name: upsert(UserDefinition, RequestOptions)
    uid: '@azure/cosmos.Users.upsert'
    package: '@azure/cosmos'
    summary: >+
      Upsert a database user with a specified
      [UserDefinition](xref:@azure/cosmos.UserDefinition).


      **Example**


      ```ts snippet:UsersUpsert

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      await database.users.upsert({ id: "<user-id>" });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsert(body: UserDefinition, options?: RequestOptions):
        Promise<UserResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.UserDefinition" />
          description: The specified [UserDefinition](xref:@azure/cosmos.UserDefinition).
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.UserResponse" />&gt;
