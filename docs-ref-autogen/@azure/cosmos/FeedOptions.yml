### YamlMime:TSType
name: FeedOptions
uid: '@azure/cosmos.FeedOptions'
package: '@azure/cosmos'
summary: The feed options and query methods.
fullName: FeedOptions
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: accessCondition
    uid: '@azure/cosmos.FeedOptions.accessCondition'
    package: '@azure/cosmos'
    summary: Conditions Associated with the request.
    fullName: accessCondition
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accessCondition?: { condition: string, type: string }'
      return:
        description: ''
        type: '{ condition: string, type: string }'
  - name: allowUnboundedNonStreamingQueries
    uid: '@azure/cosmos.FeedOptions.allowUnboundedNonStreamingQueries'
    package: '@azure/cosmos'
    summary: >-
      Valid only for non streaming order by query.

      Default: false; When set to true, it allows queries to bypass the default
      behavior that blocks nonStreaming queries without top or limit clauses.
    fullName: allowUnboundedNonStreamingQueries
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'allowUnboundedNonStreamingQueries?: boolean'
      return:
        description: ''
        type: boolean
  - name: bufferItems
    uid: '@azure/cosmos.FeedOptions.bufferItems'
    package: '@azure/cosmos'
    summary: >-
      Enable buffering additional items during queries. Default: false


      This will buffer an additional page at a time (multiplied by
      maxDegreeOfParallelism) from the server in the background.

      This improves latency by fetching pages before they are needed by the
      client. If you're draining all of the results from the

      server, like `.fetchAll`, you should usually enable this. If you're only
      fetching one page at a time via continuation token,

      you should avoid this. If you're draining more than one page, but not the
      entire result set, it may help improve latency, but

      it will increase the total amount of RU/s use to serve the entire query
      (as some pages will be fetched more than once).
    fullName: bufferItems
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'bufferItems?: boolean'
      return:
        description: ''
        type: boolean
  - name: continuation
    uid: '@azure/cosmos.FeedOptions.continuation'
    package: '@azure/cosmos'
    summary: 'Opaque token for continuing the enumeration. Default: undefined'
    fullName: continuation
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use continuationToken instead.
    syntax:
      content: 'continuation?: string'
      return:
        description: ''
        type: string
  - name: continuationToken
    uid: '@azure/cosmos.FeedOptions.continuationToken'
    package: '@azure/cosmos'
    summary: 'Opaque token for continuing the enumeration. Default: undefined'
    fullName: continuationToken
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'continuationToken?: string'
      return:
        description: ''
        type: string
  - name: continuationTokenLimitInKB
    uid: '@azure/cosmos.FeedOptions.continuationTokenLimitInKB'
    package: '@azure/cosmos'
    summary: >-
      Limits the size of the continuation token in the response. Default:
      undefined


      Continuation Tokens contain optional data that can be removed from the
      serialization before writing it out to a header.

      By default we are capping this to 1kb to avoid long headers (Node.js has a
      global header size limit).

      A user may set this field to allow for longer headers, which can help the
      backend optimize query execution."
    fullName: continuationTokenLimitInKB
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'continuationTokenLimitInKB?: number'
      return:
        description: ''
        type: number
  - name: disableHybridSearchQueryPlanOptimization
    uid: '@azure/cosmos.FeedOptions.disableHybridSearchQueryPlanOptimization'
    package: '@azure/cosmos'
    summary: >-
      Default: false. If set to true, it disables the hybrid search query plan
      optimization.

      This optimization is enabled by default and is used to improve the
      performance of hybrid search queries.
    fullName: disableHybridSearchQueryPlanOptimization
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'disableHybridSearchQueryPlanOptimization?: boolean'
      return:
        description: ''
        type: boolean
  - name: disableNonStreamingOrderByQuery
    uid: '@azure/cosmos.FeedOptions.disableNonStreamingOrderByQuery'
    package: '@azure/cosmos'
    summary: >-
      Disable the nonStreamingOrderBy query feature in supported query features.

      Default: false. Set to true to avoid error from an old gateway that
      doesn't support this feature.
    fullName: disableNonStreamingOrderByQuery
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'disableNonStreamingOrderByQuery?: boolean'
      return:
        description: ''
        type: boolean
  - name: enableQueryControl
    uid: '@azure/cosmos.FeedOptions.enableQueryControl'
    package: '@azure/cosmos'
    summary: >-
      Controls query execution behavior.

      Default: false. If set to false, the query will retry until results are
      ready and `maxItemCount` is reached, which can take time for large
      partitions with relatively small data.

      If set to true, scans partitions up to `maxDegreeOfParallelism`, adds
      results to the buffer, and returns what is available. If results are not
      ready, it returns an empty response.
    fullName: enableQueryControl
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'enableQueryControl?: boolean'
      return:
        description: ''
        type: boolean
  - name: enableScanInQuery
    uid: '@azure/cosmos.FeedOptions.enableScanInQuery'
    package: '@azure/cosmos'
    summary: >-
      Allow scan on the queries which couldn't be served as indexing was opted
      out on the requested paths. Default: false


      In general, it is best to avoid using this setting. Scans are relatively
      expensive and take a long time to serve.
    fullName: enableScanInQuery
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'enableScanInQuery?: boolean'
      return:
        description: ''
        type: boolean
  - name: forceQueryPlan
    uid: '@azure/cosmos.FeedOptions.forceQueryPlan'
    package: '@azure/cosmos'
    summary: >-
      This setting forces the query to use a query plan. Default: false


      Note: this will disable continuation token support, even for single
      partition queries.


      For queries like aggregates and most cross partition queries, this happens
      anyway.

      However, since the library doesn't know what type of query it is until we
      get back the first response,

      some optimization can't happen until later.


      If this setting is enabled, it will force query plan for the query, which
      will save some network requests

      and ensure parallelism can happen. Useful for when you know you're doing
      cross-partition or aggregate queries.
    fullName: forceQueryPlan
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'forceQueryPlan?: boolean'
      return:
        description: ''
        type: boolean
  - name: maxDegreeOfParallelism
    uid: '@azure/cosmos.FeedOptions.maxDegreeOfParallelism'
    package: '@azure/cosmos'
    summary: >-
      The maximum number of concurrent operations that run client side during
      parallel query execution in the

      Azure Cosmos DB database service. Negative values make the system
      automatically decides the number of

      concurrent operations to run. Default: 0 (no parallelism)
    fullName: maxDegreeOfParallelism
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'maxDegreeOfParallelism?: number'
      return:
        description: ''
        type: number
  - name: maxItemCount
    uid: '@azure/cosmos.FeedOptions.maxItemCount'
    package: '@azure/cosmos'
    summary: >-
      Max number of items to be returned in the enumeration operation. Default:
      undefined (server will defined payload)


      Expirimenting with this value can usually result in the biggest
      performance changes to the query.


      The smaller the item count, the faster the first result will be delivered
      (for non-aggregates). For larger amounts,

      it will take longer to serve the request, but you'll usually get better
      throughput for large queries (i.e. if you need 1000 items

      before you can do any other actions, set `maxItemCount` to 1000. If you
      can start doing work after the first 100, set `maxItemCount` to 100.)
    fullName: maxItemCount
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'maxItemCount?: number'
      return:
        description: ''
        type: number
  - name: partitionKey
    uid: '@azure/cosmos.FeedOptions.partitionKey'
    package: '@azure/cosmos'
    summary: >-
      Limits the query to a specific partition key. Default: undefined

       Scoping a query to a single partition can be accomplished two ways:

      `container.items.query('SELECT * from c', { partitionKey: "foo"
      }).toArray()`

      `container.items.query('SELECT * from c WHERE c.yourPartitionKey =
      "foo"').toArray()`


      The former is useful when the query body is out of your control

      but you still want to restrict it to a single partition. Example: an end
      user specified query.
    fullName: partitionKey
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'partitionKey?: PartitionKey'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.PartitionKey" />
  - name: populateIndexMetrics
    uid: '@azure/cosmos.FeedOptions.populateIndexMetrics'
    package: '@azure/cosmos'
    summary: 'Enable returning index metrics in response headers. Default: false'
    fullName: populateIndexMetrics
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'populateIndexMetrics?: boolean'
      return:
        description: ''
        type: boolean
  - name: populateQueryMetrics
    uid: '@azure/cosmos.FeedOptions.populateQueryMetrics'
    package: '@azure/cosmos'
    summary: >-
      Enable returning query metrics in response headers. Default: false


      Used for debugging slow or expensive queries. Also increases response size
      and if you're using a low max header size in Node.js,

      you can run into issues faster.
    fullName: populateQueryMetrics
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'populateQueryMetrics?: boolean'
      return:
        description: ''
        type: boolean
  - name: useIncrementalFeed
    uid: '@azure/cosmos.FeedOptions.useIncrementalFeed'
    package: '@azure/cosmos'
    summary: >-
      Note: consider using changeFeed instead.


      Indicates a change feed request. Must be set to "Incremental feed", or
      omitted otherwise. Default: false
    fullName: useIncrementalFeed
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'useIncrementalFeed?: boolean'
      return:
        description: ''
        type: boolean
  - name: vectorSearchBufferSize
    uid: '@azure/cosmos.FeedOptions.vectorSearchBufferSize'
    package: '@azure/cosmos'
    summary: >-
      Specifies a custom maximum buffer size for storing final results for
      nonStreamingOrderBy queries.

      This value is ignored if the query includes top/offset+limit clauses.
    fullName: vectorSearchBufferSize
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'vectorSearchBufferSize?: number'
      return:
        description: ''
        type: number
inheritedProperties:
  - name: abortSignal
    uid: '@azure/cosmos.FeedOptions.abortSignal'
    package: '@azure/cosmos'
    summary: >+
      abortSignal to pass to all underlying network requests created by this
      method call. See
      https://developer.mozilla.org/en-US/docs/Web/API/AbortController


      **Example**


      Cancel a read request

      ```ts snippet:SharedOptionsAbortSignal

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const controller = new AbortController();

      const results = container.items.query("SELECT * from c", {
        abortSignal: controller.signal,
      });

      ```

    fullName: abortSignal
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'abortSignal?: AbortSignal'
      return:
        description: ''
        type: AbortSignal
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.abortSignal](xref:@azure/cosmos.SharedOptions.abortSignal)
  - name: bypassIntegratedCache
    uid: '@azure/cosmos.FeedOptions.bypassIntegratedCache'
    package: '@azure/cosmos'
    summary: >-
      Sets if integrated cache should be bypassed or enabled for the request in
      Azure CosmosDB service.


      <p>Default value is false. By default integrated cache is enabled</p>
    fullName: bypassIntegratedCache
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'bypassIntegratedCache?: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.bypassIntegratedCache](xref:@azure/cosmos.SharedOptions.bypassIntegratedCache)
  - name: consistencyLevel
    uid: '@azure/cosmos.FeedOptions.consistencyLevel'
    package: '@azure/cosmos'
    summary: Consistency level required by the client.
    fullName: consistencyLevel
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'consistencyLevel?: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.consistencyLevel](xref:@azure/cosmos.SharedOptions.consistencyLevel)
  - name: disableRUPerMinuteUsage
    uid: '@azure/cosmos.FeedOptions.disableRUPerMinuteUsage'
    package: '@azure/cosmos'
    summary: >-
      DisableRUPerMinuteUsage is used to enable/disable Request
      Units(RUs)/minute capacity

      to serve the request if regular provisioned RUs/second is exhausted.
    fullName: disableRUPerMinuteUsage
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'disableRUPerMinuteUsage?: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.disableRUPerMinuteUsage](xref:@azure/cosmos.SharedOptions.disableRUPerMinuteUsage)
  - name: initialHeaders
    uid: '@azure/cosmos.FeedOptions.initialHeaders'
    package: '@azure/cosmos'
    summary: >-
      (Advanced use case) Initial headers to start with when sending requests to
      Cosmos
    fullName: initialHeaders
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'initialHeaders?: CosmosHeaders'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.CosmosHeaders" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.initialHeaders](xref:@azure/cosmos.SharedOptions.initialHeaders)
  - name: maxIntegratedCacheStalenessInMs
    uid: '@azure/cosmos.FeedOptions.maxIntegratedCacheStalenessInMs'
    package: '@azure/cosmos'
    summary: >-
      Sets the staleness value associated with the request in the Azure CosmosDB
      service. For requests where the <xref:com.azure.cosmos.ConsistencyLevel>
      is <xref:com.azure.cosmos.ConsistencyLevel#EVENTUAL>  or
      <xref:com.azure.cosmos.ConsistencyLevel#SESSION>, responses from the

      integrated cache are guaranteed to be no staler than value indicated by
      this maxIntegratedCacheStaleness. When the

      consistency level is not set, this property is ignored.


      <p>Default value is null</p>


      <p>Cache Staleness is supported in milliseconds granularity. Anything
      smaller than milliseconds will be ignored.</p>
    fullName: maxIntegratedCacheStalenessInMs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'maxIntegratedCacheStalenessInMs?: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.maxIntegratedCacheStalenessInMs](xref:@azure/cosmos.SharedOptions.maxIntegratedCacheStalenessInMs)
  - name: priorityLevel
    uid: '@azure/cosmos.FeedOptions.priorityLevel'
    package: '@azure/cosmos'
    summary: >-
      Priority Level (Low/High) for each request.

      Low priority requests are always throttled before any high priority
      requests.


      <p>Default value is null. By default all requests are of High priority</p>
    fullName: priorityLevel
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'priorityLevel?: PriorityLevel'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.PriorityLevel" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.priorityLevel](xref:@azure/cosmos.SharedOptions.priorityLevel)
  - name: sessionToken
    uid: '@azure/cosmos.FeedOptions.sessionToken'
    package: '@azure/cosmos'
    summary: >-
      Enables/disables getting document container quota related stats for
      document container read requests.
    fullName: sessionToken
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'sessionToken?: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.sessionToken](xref:@azure/cosmos.SharedOptions.sessionToken)
  - name: throughputBucket
    uid: '@azure/cosmos.FeedOptions.throughputBucket'
    package: '@azure/cosmos'
    summary: >-
      Throughput Bucket for a request.


      <p>Default value is null. In this case, the request can use 100% of the
      partition throughput. </p>

      For more information, visit [Cosmos DB throughput
      Bucketing](https://aka.ms/cosmsodb-bucketing).
    fullName: throughputBucket
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'throughputBucket?: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SharedOptions.throughputBucket](xref:@azure/cosmos.SharedOptions.throughputBucket)
extends: <xref uid="@azure/cosmos.SharedOptions" />
