### YamlMime:TSType
name: BatchJobSpecification
uid: '@azure-rest/batch.BatchJobSpecification'
package: '@azure-rest/batch'
summary: Specifies details of the Jobs to be created on a schedule.
fullName: BatchJobSpecification
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: allowTaskPreemption
    uid: '@azure-rest/batch.BatchJobSpecification.allowTaskPreemption'
    package: '@azure-rest/batch'
    summary: >-
      Whether Tasks in this job can be preempted by other high priority jobs. If
      the value is set to True, other high priority jobs submitted to the system
      will take precedence and will be able requeue tasks from this job. You can
      update a job's allowTaskPreemption after it has been created using the
      update job API.
    fullName: allowTaskPreemption
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'allowTaskPreemption?: boolean'
      return:
        description: ''
        type: boolean
  - name: commonEnvironmentSettings
    uid: '@azure-rest/batch.BatchJobSpecification.commonEnvironmentSettings'
    package: '@azure-rest/batch'
    summary: >-
      A list of common environment variable settings. These environment
      variables are set for all Tasks in Jobs created under this schedule
      (including the Job Manager, Job Preparation and Job Release Tasks).
      Individual Tasks can override an environment setting specified here by
      specifying the same setting name with a different value.
    fullName: commonEnvironmentSettings
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'commonEnvironmentSettings?: EnvironmentSetting[]'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.EnvironmentSetting" />[]
  - name: constraints
    uid: '@azure-rest/batch.BatchJobSpecification.constraints'
    package: '@azure-rest/batch'
    summary: The execution constraints for Jobs created under this schedule.
    fullName: constraints
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'constraints?: BatchJobConstraints'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobConstraints" />
  - name: displayName
    uid: '@azure-rest/batch.BatchJobSpecification.displayName'
    package: '@azure-rest/batch'
    summary: >-
      The display name for Jobs created under this schedule. The name need not
      be unique and can contain any Unicode characters up to a maximum length of
      1024.
    fullName: displayName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'displayName?: string'
      return:
        description: ''
        type: string
  - name: jobManagerTask
    uid: '@azure-rest/batch.BatchJobSpecification.jobManagerTask'
    package: '@azure-rest/batch'
    summary: >-
      The details of a Job Manager Task to be launched when a Job is started
      under this schedule. If the Job does not specify a Job Manager Task, the
      user must explicitly add Tasks to the Job using the Task API. If the Job
      does specify a Job Manager Task, the Batch service creates the Job Manager
      Task when the Job is created, and will try to schedule the Job Manager
      Task before scheduling other Tasks in the Job.
    fullName: jobManagerTask
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'jobManagerTask?: BatchJobManagerTask'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobManagerTask" />
  - name: jobPreparationTask
    uid: '@azure-rest/batch.BatchJobSpecification.jobPreparationTask'
    package: '@azure-rest/batch'
    summary: >-
      The Job Preparation Task for Jobs created under this schedule. If a Job
      has a Job Preparation Task, the Batch service will run the Job Preparation
      Task on a Node before starting any Tasks of that Job on that Compute Node.
    fullName: jobPreparationTask
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'jobPreparationTask?: BatchJobPreparationTask'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobPreparationTask" />
  - name: jobReleaseTask
    uid: '@azure-rest/batch.BatchJobSpecification.jobReleaseTask'
    package: '@azure-rest/batch'
    summary: >-
      The Job Release Task for Jobs created under this schedule. The primary
      purpose of the Job Release Task is to undo changes to Nodes made by the
      Job Preparation Task. Example activities include deleting local files, or
      shutting down services that were started as part of Job preparation. A Job
      Release Task cannot be specified without also specifying a Job Preparation
      Task for the Job. The Batch service runs the Job Release Task on the
      Compute Nodes that have run the Job Preparation Task.
    fullName: jobReleaseTask
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'jobReleaseTask?: BatchJobReleaseTask'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobReleaseTask" />
  - name: maxParallelTasks
    uid: '@azure-rest/batch.BatchJobSpecification.maxParallelTasks'
    package: '@azure-rest/batch'
    summary: >-
      The maximum number of tasks that can be executed in parallel for the job.
      The value of maxParallelTasks must be -1 or greater than 0 if specified.
      If not specified, the default value is -1, which means there's no limit to
      the number of tasks that can be run at once. You can update a job's
      maxParallelTasks after it has been created using the update job API.
    fullName: maxParallelTasks
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'maxParallelTasks?: number'
      return:
        description: ''
        type: number
  - name: metadata
    uid: '@azure-rest/batch.BatchJobSpecification.metadata'
    package: '@azure-rest/batch'
    summary: >-
      A list of name-value pairs associated with each Job created under this
      schedule as metadata. The Batch service does not assign any meaning to
      metadata; it is solely for the use of user code.
    fullName: metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'metadata?: BatchMetadataItem[]'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchMetadataItem" />[]
  - name: networkConfiguration
    uid: '@azure-rest/batch.BatchJobSpecification.networkConfiguration'
    package: '@azure-rest/batch'
    summary: The network configuration for the Job.
    fullName: networkConfiguration
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'networkConfiguration?: BatchJobNetworkConfiguration'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobNetworkConfiguration" />
  - name: onAllTasksComplete
    uid: '@azure-rest/batch.BatchJobSpecification.onAllTasksComplete'
    package: '@azure-rest/batch'
    summary: >-
      The action the Batch service should take when all Tasks in a Job created
      under this schedule are in the completed state. Note that if a Job
      contains no Tasks, then all Tasks are considered complete. This option is
      therefore most commonly used with a Job Manager task; if you want to use
      automatic Job termination without a Job Manager, you should initially set
      onAllTasksComplete to noaction and update the Job properties to set
      onAllTasksComplete to terminatejob once you have finished adding Tasks.
      The default is noaction.


      Possible values: "noaction", "terminatejob"
    fullName: onAllTasksComplete
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'onAllTasksComplete?: string'
      return:
        description: ''
        type: string
  - name: onTaskFailure
    uid: '@azure-rest/batch.BatchJobSpecification.onTaskFailure'
    package: '@azure-rest/batch'
    summary: >-
      The action the Batch service should take when any Task fails in a Job
      created under this schedule. A Task is considered to have failed if it
      have failed if has a failureInfo. A failureInfo is set if the Task
      completes with a non-zero exit code after exhausting its retry count, or
      if there was an error starting the Task, for example due to a resource
      file download error. The default is noaction.


      Possible values: "noaction", "performexitoptionsjobaction"
    fullName: onTaskFailure
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'onTaskFailure?: string'
      return:
        description: ''
        type: string
  - name: poolInfo
    uid: '@azure-rest/batch.BatchJobSpecification.poolInfo'
    package: '@azure-rest/batch'
    summary: >-
      The Pool on which the Batch service runs the Tasks of Jobs created under
      this schedule.
    fullName: poolInfo
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'poolInfo: BatchPoolInfo'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchPoolInfo" />
  - name: priority
    uid: '@azure-rest/batch.BatchJobSpecification.priority'
    package: '@azure-rest/batch'
    summary: >-
      The priority of Jobs created under this schedule. Priority values can
      range from -1000 to 1000, with -1000 being the lowest priority and 1000
      being the highest priority. The default value is 0. This priority is used
      as the default for all Jobs under the Job Schedule. You can update a Job's
      priority after it has been created using by using the update Job API.
    fullName: priority
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'priority?: number'
      return:
        description: ''
        type: number
  - name: usesTaskDependencies
    uid: '@azure-rest/batch.BatchJobSpecification.usesTaskDependencies'
    package: '@azure-rest/batch'
    summary: >-
      Whether Tasks in the Job can define dependencies on each other. The
      default is false.
    fullName: usesTaskDependencies
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'usesTaskDependencies?: boolean'
      return:
        description: ''
        type: boolean
