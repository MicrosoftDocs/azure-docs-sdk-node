### YamlMime:TSType
name: Items
uid: '@azure/cosmos.Items'
package: '@azure/cosmos'
summary: >-
  Operations for creating new items, and reading/querying all items


  See [Item](xref:@azure/cosmos.Item) for reading, replacing, or deleting an
  existing container; use `.item(id)`.
fullName: Items
remarks: ''
isDeprecated: false
type: class
properties:
  - name: container
    uid: '@azure/cosmos.Items.container'
    package: '@azure/cosmos'
    summary: ''
    fullName: container
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'container: Container'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container" />
methods:
  - name: batch(OperationInput[], PartitionKey, RequestOptions)
    uid: '@azure/cosmos.Items.batch'
    package: '@azure/cosmos'
    summary: >-
      Execute transactional batch operations on items.


      Batch takes an array of Operations which are typed based on what the
      operation does. Batch is transactional and will rollback all operations if
      one fails.

      The choices are: Create, Upsert, Read, Replace, and Delete


      Usage example:

      ```typescript

      // The partitionKey is a required second argument. If itâ€™s undefined, it
      defaults to the expected partition key format.

      const operations: OperationInput[] = [
         {
            operationType: "Create",
            resourceBody: { id: "doc1", name: "sample", key: "A" }
         },
         {
            operationType: "Upsert",
            resourceBody: { id: "doc2", name: "other", key: "A" }
         }
      ]


      await database.container.items.batch(operations, "A")

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function batch(operations: OperationInput[], partitionKey?:
        PartitionKey, options?: RequestOptions):
        Promise<Response_2<OperationResponse[]>>
      parameters:
        - id: operations
          type: <xref uid="@azure/cosmos.OperationInput" />[]
          description: List of operations. Limit 100
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: Used for modifying the request
      return:
        description: ''
        type: >-
          Promise&lt;Response_2&lt;<xref uid="@azure/cosmos.OperationResponse"
          />[]&gt;&gt;
  - name: bulk(OperationInput[], BulkOptions, RequestOptions)
    uid: '@azure/cosmos.Items.bulk'
    package: '@azure/cosmos'
    summary: >-
      Execute bulk operations on items.


      Bulk takes an array of Operations which are typed based on what the
      operation does.

      The choices are: Create, Upsert, Read, Replace, and Delete


      Usage example:

      ```typescript

      // partitionKey is optional at the top level if present in the
      resourceBody

      const operations: OperationInput[] = [
         {
            operationType: "Create",
            resourceBody: { id: "doc1", name: "sample", key: "A" }
         },
         {
            operationType: "Upsert",
            partitionKey: 'A',
            resourceBody: { id: "doc2", name: "other", key: "A" }
         }
      ]


      await database.container.items.bulk(operations)

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function bulk(operations: OperationInput[], bulkOptions?: BulkOptions,
        options?: RequestOptions): Promise<BulkOperationResponse>
      parameters:
        - id: operations
          type: <xref uid="@azure/cosmos.OperationInput" />[]
          description: List of operations. Limit 100
        - id: bulkOptions
          type: <xref uid="@azure/cosmos.BulkOptions" />
          description: >-
            Optional options object to modify bulk behavior. Pass {
            continueOnError: false } to stop executing operations when one
            fails. (Defaults to true)
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: Used for modifying the request.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.BulkOperationResponse" />&gt;
  - name: changeFeed(ChangeFeedOptions)
    uid: '@azure/cosmos.Items.changeFeed_1'
    package: '@azure/cosmos'
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getChangeFeedIterator` instead.
    syntax:
      content: >-
        function changeFeed(changeFeedOptions?: ChangeFeedOptions):
        ChangeFeedIterator<any>
      parameters:
        - id: changeFeedOptions
          type: <xref uid="@azure/cosmos.ChangeFeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedIterator" />&lt;any&gt;
  - name: changeFeed(PartitionKey, ChangeFeedOptions)
    uid: '@azure/cosmos.Items.changeFeed'
    package: '@azure/cosmos'
    summary: |+
      Create a `ChangeFeedIterator` to iterate over pages of changes

      **Example**

      Read from the beginning of the change feed.
      ```javascript
      const iterator = items.readChangeFeed({ startFromBeginning: true });
      const firstPage = await iterator.fetchNext();
      const firstPageResults = firstPage.result
      const secondPage = await iterator.fetchNext();
      ```

    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getChangeFeedIterator` instead.
    syntax:
      content: >-
        function changeFeed(partitionKey: PartitionKey, changeFeedOptions?:
        ChangeFeedOptions): ChangeFeedIterator<any>
      parameters:
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: ''
        - id: changeFeedOptions
          type: <xref uid="@azure/cosmos.ChangeFeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedIterator" />&lt;any&gt;
  - name: changeFeed<T>(ChangeFeedOptions)
    uid: '@azure/cosmos.Items.changeFeed_3'
    package: '@azure/cosmos'
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getChangeFeedIterator` instead.
    syntax:
      content: >-
        function changeFeed<T>(changeFeedOptions?: ChangeFeedOptions):
        ChangeFeedIterator<T>
      parameters:
        - id: changeFeedOptions
          type: <xref uid="@azure/cosmos.ChangeFeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedIterator" />&lt;T&gt;
  - name: changeFeed<T>(PartitionKey, ChangeFeedOptions)
    uid: '@azure/cosmos.Items.changeFeed_2'
    package: '@azure/cosmos'
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getChangeFeedIterator` instead.
    syntax:
      content: >-
        function changeFeed<T>(partitionKey: PartitionKey, changeFeedOptions?:
        ChangeFeedOptions): ChangeFeedIterator<T>
      parameters:
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: ''
        - id: changeFeedOptions
          type: <xref uid="@azure/cosmos.ChangeFeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedIterator" />&lt;T&gt;
  - name: create<T>(T, RequestOptions)
    uid: '@azure/cosmos.Items.create'
    package: '@azure/cosmos'
    summary: >-
      Create an item.


      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create<T>(body: T, options?: RequestOptions):
        Promise<ItemResponse<T>>
      parameters:
        - id: body
          type: T
          description: >-
            Represents the body of the item. Can contain any number of user
            defined properties.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ItemResponse" />&lt;T&gt;&gt;
  - name: getChangeFeedIterator<T>(ChangeFeedIteratorOptions)
    uid: '@azure/cosmos.Items.getChangeFeedIterator'
    package: '@azure/cosmos'
    summary: >-
      Returns an iterator to iterate over pages of changes. The iterator
      returned can be used to fetch changes for a single partition key, feed
      range or an entire container.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChangeFeedIterator<T>(changeFeedIteratorOptions?:
        ChangeFeedIteratorOptions): ChangeFeedPullModelIterator<T>
      parameters:
        - id: changeFeedIteratorOptions
          type: <xref uid="@azure/cosmos.ChangeFeedIteratorOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedPullModelIterator" />&lt;T&gt;
  - name: getEncryptionQueryIterator(EncryptionQueryBuilder, FeedOptions)
    uid: '@azure/cosmos.Items.getEncryptionQueryIterator'
    package: '@azure/cosmos'
    summary: >+
      Queries all items in an encrypted container.


      **Example**


      Read all items to array.

      ```typescript

      const queryBuilder = new EncryptionQueryBuilder("SELECT firstname FROM
      Families f WHERE f.lastName = @lastName");

      queryBuilder.addStringParameter("@lastName", "Hendricks", "/lastname");

      const queryIterator = await items.getEncryptionQueryIterator<{firstName:
      string}>(queryBuilder);

      const {result: items} = await queryIterator.fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getEncryptionQueryIterator(queryBuilder:
        EncryptionQueryBuilder, options?: FeedOptions):
        Promise<QueryIterator<ItemDefinition>>
      parameters:
        - id: queryBuilder
          type: <xref uid="@azure/cosmos.EncryptionQueryBuilder" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to build a query on encrypted properties.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.ItemDefinition" />&gt;&gt;
  - name: query(string | SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Items.query'
    package: '@azure/cosmos'
    summary: |+
      Queries all items.

      **Example**

      Read all items to array.
      ```typescript
      const querySpec: SqlQuerySpec = {
        query: "SELECT * FROM Families f WHERE f.lastName = @lastName",
        parameters: [
          {name: "@lastName", value: "Hendricks"}
        ]
      };
      const {result: items} = await items.query(querySpec).fetchAll();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query(query: string | SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: query<T>(string | SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Items.query_1'
    package: '@azure/cosmos'
    summary: >+
      Queries all items.


      **Example**


      Read all items to array.

      ```typescript

      const querySpec: SqlQuerySpec = {
        query: "SELECT firstname FROM Families f WHERE f.lastName = @lastName",
        parameters: [
          {name: "@lastName", value: "Hendricks"}
        ]
      };

      const {result: items} = await items.query<{firstName:
      string}>(querySpec).fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: string | SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Items.readAll'
    package: '@azure/cosmos'
    summary: >+
      Read all items.


      There is no set schema for JSON items. They may contain any number of
      custom properties.


      **Example**


      Read all items to array.

      ```typescript

      const {body: containerList} = await items.readAll().fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function readAll(options?: FeedOptions): QueryIterator<ItemDefinition>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
      return:
        description: ''
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.ItemDefinition" />&gt;
  - name: readAll<T>(FeedOptions)
    uid: '@azure/cosmos.Items.readAll_1'
    package: '@azure/cosmos'
    summary: >+
      Read all items.


      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.


      There is no set schema for JSON items. They may contain any number of
      custom properties.


      **Example**


      Read all items to array.

      ```typescript

      const {body: containerList} = await items.readAll().fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function readAll<T>(options?: FeedOptions): QueryIterator<T>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readChangeFeed(ChangeFeedOptions)
    uid: '@azure/cosmos.Items.readChangeFeed_1'
    package: '@azure/cosmos'
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getChangeFeedIterator` instead.
    syntax:
      content: >-
        function readChangeFeed(changeFeedOptions?: ChangeFeedOptions):
        ChangeFeedIterator<any>
      parameters:
        - id: changeFeedOptions
          type: <xref uid="@azure/cosmos.ChangeFeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedIterator" />&lt;any&gt;
  - name: readChangeFeed(PartitionKey, ChangeFeedOptions)
    uid: '@azure/cosmos.Items.readChangeFeed'
    package: '@azure/cosmos'
    summary: |+
      Create a `ChangeFeedIterator` to iterate over pages of changes

      **Example**

      Read from the beginning of the change feed.
      ```javascript
      const iterator = items.readChangeFeed({ startFromBeginning: true });
      const firstPage = await iterator.fetchNext();
      const firstPageResults = firstPage.result
      const secondPage = await iterator.fetchNext();
      ```

    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getChangeFeedIterator` instead.
    syntax:
      content: >-
        function readChangeFeed(partitionKey: PartitionKey, changeFeedOptions?:
        ChangeFeedOptions): ChangeFeedIterator<any>
      parameters:
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: ''
        - id: changeFeedOptions
          type: <xref uid="@azure/cosmos.ChangeFeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedIterator" />&lt;any&gt;
  - name: readChangeFeed<T>(ChangeFeedOptions)
    uid: '@azure/cosmos.Items.readChangeFeed_3'
    package: '@azure/cosmos'
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getChangeFeedIterator` instead.
    syntax:
      content: >-
        function readChangeFeed<T>(changeFeedOptions?: ChangeFeedOptions):
        ChangeFeedIterator<T>
      parameters:
        - id: changeFeedOptions
          type: <xref uid="@azure/cosmos.ChangeFeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedIterator" />&lt;T&gt;
  - name: readChangeFeed<T>(PartitionKey, ChangeFeedOptions)
    uid: '@azure/cosmos.Items.readChangeFeed_2'
    package: '@azure/cosmos'
    summary: Create a `ChangeFeedIterator` to iterate over pages of changes
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getChangeFeedIterator` instead.
    syntax:
      content: >-
        function readChangeFeed<T>(partitionKey: PartitionKey,
        changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<T>
      parameters:
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: ''
        - id: changeFeedOptions
          type: <xref uid="@azure/cosmos.ChangeFeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.ChangeFeedIterator" />&lt;T&gt;
  - name: upsert(unknown, RequestOptions)
    uid: '@azure/cosmos.Items.upsert'
    package: '@azure/cosmos'
    summary: >-
      Upsert an item.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsert(body: unknown, options?: RequestOptions):
        Promise<ItemResponse<ItemDefinition>>
      parameters:
        - id: body
          type: unknown
          description: >-
            Represents the body of the item. Can contain any number of user
            defined properties.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ItemResponse" />&lt;<xref
          uid="@azure/cosmos.ItemDefinition" />&gt;&gt;
  - name: upsert<T>(T, RequestOptions)
    uid: '@azure/cosmos.Items.upsert_1'
    package: '@azure/cosmos'
    summary: >-
      Upsert an item.


      Any provided type, T, is not necessarily enforced by the SDK.

      You may get more or less properties and it's up to your logic to enforce
      it.


      There is no set schema for JSON items. They may contain any number of
      custom properties.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsert<T>(body: T, options?: RequestOptions):
        Promise<ItemResponse<T>>
      parameters:
        - id: body
          type: T
          description: >-
            Represents the body of the item. Can contain any number of user
            defined properties.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >-
            Used for modifying the request (for instance, specifying the
            partition key).
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ItemResponse" />&lt;T&gt;&gt;
