### YamlMime:TSType
name: AppConfigurationClient
uid: '@azure/app-configuration.AppConfigurationClient'
package: '@azure/app-configuration'
summary: Client for the Azure App Configuration service.
fullName: AppConfigurationClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: AppConfigurationClient(string, AppConfigurationClientOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.constructor'
    package: '@azure/app-configuration'
    summary: Initializes a new instance of the AppConfigurationClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new AppConfigurationClient(connectionString: string, options?:
        AppConfigurationClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="@azure/app-configuration.AppConfigurationClientOptions"
            />
          description: Options for the AppConfigurationClient.
  - name: >-
      AppConfigurationClient(string, TokenCredential,
      AppConfigurationClientOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.constructor_1'
    package: '@azure/app-configuration'
    summary: |-
      Initializes a new instance of the AppConfigurationClient class using
      a TokenCredential.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new AppConfigurationClient(endpoint: string, tokenCredential:
        TokenCredential, options?: AppConfigurationClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: >-
            The endpoint of the App Configuration service (ex:
            https://sample.azconfig.io).
        - id: tokenCredential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: options
          type: >-
            <xref uid="@azure/app-configuration.AppConfigurationClientOptions"
            />
          description: Options for the AppConfigurationClient.
methods:
  - name: >-
      addConfigurationSetting(AddConfigurationSettingParam<string> |
      AddConfigurationSettingParam<FeatureFlagValue> |
      AddConfigurationSettingParam<SecretReferenceValue> |
      AddConfigurationSettingParam<SnapshotReferenceValue>,
      AddConfigurationSettingOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.addConfigurationSetting'
    package: '@azure/app-configuration'
    summary: |-
      Add a setting into the Azure App Configuration service, failing if it
      already exists.

      Example usage:
      ```ts snippet:AddConfigurationSetting
      import { DefaultAzureCredential } from "@azure/identity";
      import { AppConfigurationClient } from "@azure/app-configuration";

      // The endpoint for your App Configuration resource
      const endpoint = "https://example.azconfig.io";
      const credential = new DefaultAzureCredential();
      const client = new AppConfigurationClient(endpoint, credential);

      const result = await client.addConfigurationSetting({
        key: "MyKey",
        label: "MyLabel",
        value: "MyValue",
      });
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addConfigurationSetting(configurationSetting:
        AddConfigurationSettingParam<string> |
        AddConfigurationSettingParam<FeatureFlagValue> |
        AddConfigurationSettingParam<SecretReferenceValue> |
        AddConfigurationSettingParam<SnapshotReferenceValue>, options?:
        AddConfigurationSettingOptions):
        Promise<AddConfigurationSettingResponse>
      parameters:
        - id: configurationSetting
          type: >-
            <xref uid="@azure/app-configuration.AddConfigurationSettingParam"
            />&lt;string&gt; | <xref
            uid="@azure/app-configuration.AddConfigurationSettingParam"
            />&lt;<xref uid="@azure/app-configuration.FeatureFlagValue" />&gt; |
            <xref uid="@azure/app-configuration.AddConfigurationSettingParam"
            />&lt;<xref uid="@azure/app-configuration.SecretReferenceValue"
            />&gt; | <xref
            uid="@azure/app-configuration.AddConfigurationSettingParam"
            />&lt;<xref uid="@azure/app-configuration.SnapshotReferenceValue"
            />&gt;
          description: A configuration setting.
        - id: options
          type: >-
            <xref uid="@azure/app-configuration.AddConfigurationSettingOptions"
            />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.AddConfigurationSettingResponse" />&gt;
  - name: archiveSnapshot(string, UpdateSnapshotOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.archiveSnapshot'
    package: '@azure/app-configuration'
    summary: |-
      Archive a ready snapshot

      Example usage:
      ```ts snippet:ArchiveSnapshot
      import { DefaultAzureCredential } from "@azure/identity";
      import { AppConfigurationClient } from "@azure/app-configuration";

      // The endpoint for your App Configuration resource
      const endpoint = "https://example.azconfig.io";
      const credential = new DefaultAzureCredential();
      const client = new AppConfigurationClient(endpoint, credential);

      const result = await client.archiveSnapshot({ name: "MySnapshot" });
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function archiveSnapshot(name: string, options?: UpdateSnapshotOptions):
        Promise<UpdateSnapshotResponse>
      parameters:
        - id: name
          type: string
          description: The name of the snapshot.
        - id: options
          type: <xref uid="@azure/app-configuration.UpdateSnapshotOptions" />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/app-configuration.UpdateSnapshotResponse"
          />&gt;
  - name: beginCreateSnapshot(SnapshotInfo, CreateSnapshotOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.beginCreateSnapshot'
    package: '@azure/app-configuration'
    summary: >-
      Begins creating a snapshot for Azure App Configuration service, fails if
      it

      already exists.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateSnapshot(snapshot: SnapshotInfo, options?:
        CreateSnapshotOptions):
        Promise<SimplePollerLike<OperationState<CreateSnapshotResponse>,
        CreateSnapshotResponse>>
      parameters:
        - id: snapshot
          type: <xref uid="@azure/app-configuration.SnapshotInfo" />
          description: ''
        - id: options
          type: <xref uid="@azure/app-configuration.CreateSnapshotOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/app-configuration.CreateSnapshotResponse" />&gt;, <xref
          uid="@azure/app-configuration.CreateSnapshotResponse" />&gt;&gt;
  - name: beginCreateSnapshotAndWait(SnapshotInfo, CreateSnapshotOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.beginCreateSnapshotAndWait'
    package: '@azure/app-configuration'
    summary: >-
      Begins creating a snapshot for Azure App Configuration service, waits
      until it is done,

      fails if it already exists.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateSnapshotAndWait(snapshot: SnapshotInfo, options?:
        CreateSnapshotOptions): Promise<CreateSnapshotResponse>
      parameters:
        - id: snapshot
          type: <xref uid="@azure/app-configuration.SnapshotInfo" />
          description: ''
        - id: options
          type: <xref uid="@azure/app-configuration.CreateSnapshotOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/app-configuration.CreateSnapshotResponse"
          />&gt;
  - name: >-
      deleteConfigurationSetting(ConfigurationSettingId,
      DeleteConfigurationSettingOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.deleteConfigurationSetting'
    package: '@azure/app-configuration'
    summary: |-
      Delete a setting from the Azure App Configuration service

      Example usage:
      ```ts snippet:DeleteConfigurationSetting
      import { DefaultAzureCredential } from "@azure/identity";
      import { AppConfigurationClient } from "@azure/app-configuration";

      // The endpoint for your App Configuration resource
      const endpoint = "https://example.azconfig.io";
      const credential = new DefaultAzureCredential();
      const client = new AppConfigurationClient(endpoint, credential);

      const deletedSetting = await client.deleteConfigurationSetting({
        key: "MyKey",
        label: "MyLabel",
      });
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteConfigurationSetting(id: ConfigurationSettingId,
        options?: DeleteConfigurationSettingOptions):
        Promise<DeleteConfigurationSettingResponse>
      parameters:
        - id: id
          type: <xref uid="@azure/app-configuration.ConfigurationSettingId" />
          description: The id of the configuration setting to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.DeleteConfigurationSettingOptions" />
          description: 'Optional parameters for the request (ex: etag, label)'
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.DeleteConfigurationSettingResponse"
          />&gt;
  - name: >-
      getConfigurationSetting(ConfigurationSettingId,
      GetConfigurationSettingOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.getConfigurationSetting'
    package: '@azure/app-configuration'
    summary: >-
      Gets a setting from the Azure App Configuration service.


      Example code:

      ```ts snippet:GetConfigurationSetting

      import { DefaultAzureCredential } from "@azure/identity";

      import { AppConfigurationClient } from "@azure/app-configuration";


      // The endpoint for your App Configuration resource

      const endpoint = "https://example.azconfig.io";

      const credential = new DefaultAzureCredential();

      const client = new AppConfigurationClient(endpoint, credential);


      const setting = await client.getConfigurationSetting({ key: "MyKey",
      label: "MyLabel" });

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConfigurationSetting(id: ConfigurationSettingId, options?:
        GetConfigurationSettingOptions):
        Promise<GetConfigurationSettingResponse>
      parameters:
        - id: id
          type: <xref uid="@azure/app-configuration.ConfigurationSettingId" />
          description: The id of the configuration setting to get.
        - id: options
          type: >-
            <xref uid="@azure/app-configuration.GetConfigurationSettingOptions"
            />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.GetConfigurationSettingResponse" />&gt;
  - name: getSnapshot(string, GetSnapshotOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.getSnapshot'
    package: '@azure/app-configuration'
    summary: |-
      Get a snapshot from Azure App Configuration service

      Example usage:
      ```ts snippet:GetSnapshot
      import { DefaultAzureCredential } from "@azure/identity";
      import { AppConfigurationClient } from "@azure/app-configuration";

      // The endpoint for your App Configuration resource
      const endpoint = "https://example.azconfig.io";
      const credential = new DefaultAzureCredential();
      const client = new AppConfigurationClient(endpoint, credential);

      const retrievedSnapshot = await client.getSnapshot("testsnapshot");
      console.log("Retrieved snapshot:", retrievedSnapshot);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSnapshot(name: string, options?: GetSnapshotOptions):
        Promise<GetSnapshotResponse>
      parameters:
        - id: name
          type: string
          description: The name of the snapshot.
        - id: options
          type: <xref uid="@azure/app-configuration.GetSnapshotOptions" />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/app-configuration.GetSnapshotResponse"
          />&gt;
  - name: listConfigurationSettings(ListConfigurationSettingsOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.listConfigurationSettings'
    package: '@azure/app-configuration'
    summary: >-
      Lists settings from the Azure App Configuration service, optionally

      filtered by key names, labels and accept datetime.


      Example code:

      ```ts snippet:ListConfigurationSettings

      import { DefaultAzureCredential } from "@azure/identity";

      import { AppConfigurationClient } from "@azure/app-configuration";


      // The endpoint for your App Configuration resource

      const endpoint = "https://example.azconfig.io";

      const credential = new DefaultAzureCredential();

      const client = new AppConfigurationClient(endpoint, credential);


      const allSettingsWithLabel = client.listConfigurationSettings({
      labelFilter: "MyLabel" });

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listConfigurationSettings(options?:
        ListConfigurationSettingsOptions):
        PagedAsyncIterableIterator<ConfigurationSetting<string>,
        ListConfigurationSettingPage, PageSettings>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.ListConfigurationSettingsOptions" />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/app-configuration.ConfigurationSetting" />&lt;string&gt;,
          <xref uid="@azure/app-configuration.ListConfigurationSettingPage" />,
          <xref uid="@azure/app-configuration.PageSettings" />&gt;
  - name: >-
      listConfigurationSettingsForSnapshot(string,
      ListConfigurationSettingsForSnapshotOptions)
    uid: >-
      @azure/app-configuration.AppConfigurationClient.listConfigurationSettingsForSnapshot
    package: '@azure/app-configuration'
    summary: >-
      Lists settings from the Azure App Configuration service for snapshots
      based on name, optionally

      filtered by key names, labels and accept datetime.


      Example code:

      ```ts snippet:ListConfigurationSettingsForSnashots

      import { DefaultAzureCredential } from "@azure/identity";

      import { AppConfigurationClient } from "@azure/app-configuration";


      // The endpoint for your App Configuration resource

      const endpoint = "https://example.azconfig.io";

      const credential = new DefaultAzureCredential();

      const client = new AppConfigurationClient(endpoint, credential);


      const allSettingsWithLabel = client.listConfigurationSettingsForSnashots({
        snapshotName: "MySnapshot",
      });

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listConfigurationSettingsForSnapshot(snapshotName: string,
        options?: ListConfigurationSettingsForSnapshotOptions):
        PagedAsyncIterableIterator<ConfigurationSetting<string>,
        ListConfigurationSettingPage, PageSettings>
      parameters:
        - id: snapshotName
          type: string
          description: ''
        - id: options
          type: >-
            <xref
            uid="@azure/app-configuration.ListConfigurationSettingsForSnapshotOptions"
            />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/app-configuration.ConfigurationSetting" />&lt;string&gt;,
          <xref uid="@azure/app-configuration.ListConfigurationSettingPage" />,
          <xref uid="@azure/app-configuration.PageSettings" />&gt;
  - name: listLabels(ListLabelsOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.listLabels'
    package: '@azure/app-configuration'
    summary: |-
      Get a list of labels from the Azure App Configuration service

      Example code:
      ```ts snippet:ListLabels
      import { DefaultAzureCredential } from "@azure/identity";
      import { AppConfigurationClient } from "@azure/app-configuration";

      // The endpoint for your App Configuration resource
      const endpoint = "https://example.azconfig.io";
      const credential = new DefaultAzureCredential();
      const client = new AppConfigurationClient(endpoint, credential);

      const allSettingsWithLabel = client.listLabels({ nameFilter: "prod*" });
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listLabels(options?: ListLabelsOptions):
        PagedAsyncIterableIterator<SettingLabel, ListLabelsPage, PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/app-configuration.ListLabelsOptions" />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/app-configuration.SettingLabel" />, <xref
          uid="@azure/app-configuration.ListLabelsPage" />, <xref
          uid="@azure/app-configuration.PageSettings" />&gt;
  - name: listRevisions(ListRevisionsOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.listRevisions'
    package: '@azure/app-configuration'
    summary: |-
      Lists revisions of a set of keys, optionally filtered by key names,
      labels and accept datetime.

      Example code:
      ```ts snippet:ListRevisions
      import { DefaultAzureCredential } from "@azure/identity";
      import { AppConfigurationClient } from "@azure/app-configuration";

      // The endpoint for your App Configuration resource
      const endpoint = "https://example.azconfig.io";
      const credential = new DefaultAzureCredential();
      const client = new AppConfigurationClient(endpoint, credential);

      const revisionsIterator = client.listRevisions({ keys: ["MyKey"] });
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRevisions(options?: ListRevisionsOptions):
        PagedAsyncIterableIterator<ConfigurationSetting<string>,
        ListRevisionsPage, PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/app-configuration.ListRevisionsOptions" />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/app-configuration.ConfigurationSetting" />&lt;string&gt;,
          <xref uid="@azure/app-configuration.ListRevisionsPage" />, <xref
          uid="@azure/app-configuration.PageSettings" />&gt;
  - name: listSnapshots(ListSnapshotsOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.listSnapshots'
    package: '@azure/app-configuration'
    summary: |-
      List all snapshots from Azure App Configuration service

      Example usage:
      ```ts snippet:ListSnapshots
      import { DefaultAzureCredential } from "@azure/identity";
      import { AppConfigurationClient } from "@azure/app-configuration";

      // The endpoint for your App Configuration resource
      const endpoint = "https://example.azconfig.io";
      const credential = new DefaultAzureCredential();
      const client = new AppConfigurationClient(endpoint, credential);

      const snapshots = await client.listSnapshots();

      for await (const snapshot of snapshots) {
        console.log(`Found snapshot: ${snapshot.name}`);
      }
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listSnapshots(options?: ListSnapshotsOptions):
        PagedAsyncIterableIterator<ConfigurationSnapshot, ListSnapshotsPage,
        PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/app-configuration.ListSnapshotsOptions" />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/app-configuration.ConfigurationSnapshot" />, <xref
          uid="@azure/app-configuration.ListSnapshotsPage" />, <xref
          uid="@azure/app-configuration.PageSettings" />&gt;
  - name: recoverSnapshot(string, UpdateSnapshotOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.recoverSnapshot'
    package: '@azure/app-configuration'
    summary: |-
      Recover an archived snapshot back to ready status

      Example usage:
      ```ts snippet:RecoverSnapshot
      import { DefaultAzureCredential } from "@azure/identity";
      import { AppConfigurationClient } from "@azure/app-configuration";

      // The endpoint for your App Configuration resource
      const endpoint = "https://example.azconfig.io";
      const credential = new DefaultAzureCredential();
      const client = new AppConfigurationClient(endpoint, credential);

      const result = await client.recoverSnapshot("MySnapshot");
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverSnapshot(name: string, options?: UpdateSnapshotOptions):
        Promise<UpdateSnapshotResponse>
      parameters:
        - id: name
          type: string
          description: The name of the snapshot.
        - id: options
          type: <xref uid="@azure/app-configuration.UpdateSnapshotOptions" />
          description: Optional parameters for the request.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/app-configuration.UpdateSnapshotResponse"
          />&gt;
  - name: >-
      setConfigurationSetting(SetConfigurationSettingParam<string> |
      SetConfigurationSettingParam<FeatureFlagValue> |
      SetConfigurationSettingParam<SecretReferenceValue> |
      SetConfigurationSettingParam<SnapshotReferenceValue>,
      SetConfigurationSettingOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.setConfigurationSetting'
    package: '@azure/app-configuration'
    summary: >-
      Sets the value of a key in the Azure App Configuration service, allowing
      for an optional etag.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setConfigurationSetting(configurationSetting:
        SetConfigurationSettingParam<string> |
        SetConfigurationSettingParam<FeatureFlagValue> |
        SetConfigurationSettingParam<SecretReferenceValue> |
        SetConfigurationSettingParam<SnapshotReferenceValue>, options?:
        SetConfigurationSettingOptions):
        Promise<SetConfigurationSettingResponse>
      parameters:
        - id: configurationSetting
          type: >-
            <xref uid="@azure/app-configuration.SetConfigurationSettingParam"
            />&lt;string&gt; | <xref
            uid="@azure/app-configuration.SetConfigurationSettingParam"
            />&lt;<xref uid="@azure/app-configuration.FeatureFlagValue" />&gt; |
            <xref uid="@azure/app-configuration.SetConfigurationSettingParam"
            />&lt;<xref uid="@azure/app-configuration.SecretReferenceValue"
            />&gt; | <xref
            uid="@azure/app-configuration.SetConfigurationSettingParam"
            />&lt;<xref uid="@azure/app-configuration.SnapshotReferenceValue"
            />&gt;
          description: A configuration value.
        - id: options
          type: >-
            <xref uid="@azure/app-configuration.SetConfigurationSettingOptions"
            />
          description: >-
            Optional parameters for the request.


            Example code:

            ```ts snippet:SetConfigurationSetting

            import { DefaultAzureCredential } from "@azure/identity";

            import { AppConfigurationClient } from "@azure/app-configuration";


            // The endpoint for your App Configuration resource

            const endpoint = "https://example.azconfig.io";

            const credential = new DefaultAzureCredential();

            const client = new AppConfigurationClient(endpoint, credential);


            await client.setConfigurationSetting({ key: "MyKey", value:
            "MyValue" });

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/app-configuration.SetConfigurationSettingResponse" />&gt;
  - name: setReadOnly(ConfigurationSettingId, boolean, SetReadOnlyOptions)
    uid: '@azure/app-configuration.AppConfigurationClient.setReadOnly'
    package: '@azure/app-configuration'
    summary: Sets or clears a key's read-only status.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setReadOnly(id: ConfigurationSettingId, readOnly: boolean,
        options?: SetReadOnlyOptions): Promise<SetReadOnlyResponse>
      parameters:
        - id: id
          type: <xref uid="@azure/app-configuration.ConfigurationSettingId" />
          description: The id of the configuration setting to modify.
        - id: readOnly
          type: boolean
          description: ''
        - id: options
          type: <xref uid="@azure/app-configuration.SetReadOnlyOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/app-configuration.SetReadOnlyResponse"
          />&gt;
  - name: updateSyncToken(string)
    uid: '@azure/app-configuration.AppConfigurationClient.updateSyncToken'
    package: '@azure/app-configuration'
    summary: >-
      Adds an external synchronization token to ensure service requests receive
      up-to-date values.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function updateSyncToken(syncToken: string)'
      parameters:
        - id: syncToken
          type: string
          description: The synchronization token value.
