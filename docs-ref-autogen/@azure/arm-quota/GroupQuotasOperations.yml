### YamlMime:TSType
name: GroupQuotasOperations
uid: '@azure/arm-quota.GroupQuotasOperations'
package: '@azure/arm-quota'
summary: Interface representing a GroupQuotas operations.
fullName: GroupQuotasOperations
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: createOrUpdate
    uid: '@azure/arm-quota.GroupQuotasOperations.createOrUpdate'
    package: '@azure/arm-quota'
    summary: >-
      Creates a new GroupQuota for the name passed. A RequestId will be returned
      by the Service. The status can be polled periodically. The status Async
      polling is using standards defined at -
      https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
      Use the OperationsStatus URI provided in Azure-AsyncOperation header, the
      duration will be specified in retry-after header. Once the operation gets
      to terminal state - Succeeded | Failed, then the URI will change to Get
      URI and full details can be checked.
    fullName: createOrUpdate
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        createOrUpdate: (managementGroupId: string, groupQuotaName: string,
        options?: GroupQuotasCreateOrUpdateOptionalParams) =>
        PollerLike<OperationState<GroupQuotasEntity>, GroupQuotasEntity>
      return:
        description: ''
        type: >-
          (managementGroupId: string, groupQuotaName: string, options?:
          GroupQuotasCreateOrUpdateOptionalParams) =&gt;
          PollerLike&lt;OperationState&lt;GroupQuotasEntity&gt;,
          GroupQuotasEntity&gt;
  - name: delete
    uid: '@azure/arm-quota.GroupQuotasOperations.delete'
    package: '@azure/arm-quota'
    summary: ''
    fullName: delete
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        delete: (managementGroupId: string, groupQuotaName: string, options?:
        GroupQuotasDeleteOptionalParams) => PollerLike<OperationState<void>,
        void>
      return:
        description: ''
        type: >-
          (managementGroupId: string, groupQuotaName: string, options?:
          GroupQuotasDeleteOptionalParams) =&gt;
          PollerLike&lt;OperationState&lt;void&gt;, void&gt;
  - name: get
    uid: '@azure/arm-quota.GroupQuotasOperations.get'
    package: '@azure/arm-quota'
    summary: >-
      Gets the GroupQuotas for the name passed. It will return the GroupQuotas
      properties only. The details on group quota can be access from the group
      quota APIs.
    fullName: get
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        get: (managementGroupId: string, groupQuotaName: string, options?:
        GroupQuotasGetOptionalParams) => Promise<GroupQuotasEntity>
      return:
        description: ''
        type: >-
          (managementGroupId: string, groupQuotaName: string, options?:
          GroupQuotasGetOptionalParams) =&gt; Promise&lt;GroupQuotasEntity&gt;
  - name: list
    uid: '@azure/arm-quota.GroupQuotasOperations.list'
    package: '@azure/arm-quota'
    summary: >-
      Lists GroupQuotas for the scope passed. It will return the GroupQuotas
      QuotaEntity properties only.The details on group quota can be access from
      the group quota APIs.
    fullName: list
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        list: (managementGroupId: string, options?:
        GroupQuotasListOptionalParams) =>
        PagedAsyncIterableIterator<GroupQuotasEntity, GroupQuotasEntity[],
        PageSettings>
      return:
        description: ''
        type: >-
          (managementGroupId: string, options?: GroupQuotasListOptionalParams)
          =&gt; PagedAsyncIterableIterator&lt;GroupQuotasEntity,
          GroupQuotasEntity[], PageSettings&gt;
  - name: update
    uid: '@azure/arm-quota.GroupQuotasOperations.update'
    package: '@azure/arm-quota'
    summary: >-
      Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will
      be returned by the Service. The status can be polled periodically. The
      status Async polling is using standards defined at -
      https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
      Use the OperationsStatus URI provided in Azure-AsyncOperation header, the
      duration will be specified in retry-after header. Once the operation gets
      to terminal state - Succeeded | Failed, then the URI will change to Get
      URI and full details can be checked.

      Any change in the filters will be applicable to the future quota
      assignments, existing quota allocated to subscriptions from the
      GroupQuotas remains unchanged.
    fullName: update
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        update: (managementGroupId: string, groupQuotaName: string, options?:
        GroupQuotasUpdateOptionalParams) =>
        PollerLike<OperationState<GroupQuotasEntity>, GroupQuotasEntity>
      return:
        description: ''
        type: >-
          (managementGroupId: string, groupQuotaName: string, options?:
          GroupQuotasUpdateOptionalParams) =&gt;
          PollerLike&lt;OperationState&lt;GroupQuotasEntity&gt;,
          GroupQuotasEntity&gt;
