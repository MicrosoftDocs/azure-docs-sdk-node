### YamlMime:TSType
name: Database
uid: '@azure/cosmos.Database'
package: '@azure/cosmos'
summary: >-
  Operations for reading or deleting an existing database.


  See [Databases](xref:@azure/cosmos.Databases) for creating new databases, and
  reading/querying all databases; use `client.databases`.


  Note: all these operations make calls against a fixed budget.

  You should design your system such that these calls scale sublinearly with
  your application.

  For instance, do not call `database.read()` before every single `item.read()`
  call, to ensure the database exists;

  do this once on application start up.
fullName: Database
remarks: ''
isDeprecated: false
type: class
properties:
  - name: client
    uid: '@azure/cosmos.Database.client'
    package: '@azure/cosmos'
    summary: ''
    fullName: client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'client: CosmosClient'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.CosmosClient" />
  - name: containers
    uid: '@azure/cosmos.Database.containers'
    package: '@azure/cosmos'
    summary: >+
      Used for creating new containers, or querying/reading all containers.


      Use `.database(id)` to read, replace, or delete a specific, existing
      [Database](xref:@azure/cosmos.Database) by id.


      **Example**


      Create a new container

      ```ts snippet:DatabaseCreateContainer

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { body: containerDefinition, container } = await client
        .database("<db id>")
        .containers.create({ id: "<container id>" });
      ```

    fullName: containers
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'containers: Containers'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Containers" />
  - name: id
    uid: '@azure/cosmos.Database.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/cosmos.Database.url'
    package: '@azure/cosmos'
    summary: >+
      Returns a reference URL to the resource. Used for linking in Permissions.


      **Example**


      ```ts snippet:DatabaseGetUrl

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const url = database.url;

      ```

    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
  - name: users
    uid: '@azure/cosmos.Database.users'
    package: '@azure/cosmos'
    summary: >-
      Used for creating new users, or querying/reading all users.


      Use `.user(id)` to read, replace, or delete a specific, existing
      [User](xref:@azure/cosmos.User) by id.
    fullName: users
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'users: Users'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Users" />
methods:
  - name: container(string)
    uid: '@azure/cosmos.Database.container'
    package: '@azure/cosmos'
    summary: >+
      Used to read, replace, or delete a specific, existing
      [Database](xref:@azure/cosmos.Database) by id.


      Use `.containers` creating new containers, or querying/reading all
      containers.


      **Example**


      Delete a container

      ```ts snippet:DatabaseDeleteContainer

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      await client.database("<db id>").container("<container id>").delete();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function container(id: string): Container'
      parameters:
        - id: id
          type: string
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container" />
  - name: >-
      createClientEncryptionKey(string, AEAD_AES_256_CBC_HMAC_SHA256,
      EncryptionKeyWrapMetadata)
    uid: '@azure/cosmos.Database.createClientEncryptionKey'
    package: '@azure/cosmos'
    summary: >+
      Create Encryption key for database account


      **Example**


      ```ts snippet:DatabaseCreateClientEncryptionKey

      import { ClientSecretCredential } from "@azure/identity";

      import {
        AzureKeyVaultEncryptionKeyResolver,
        CosmosClient,
        EncryptionKeyWrapMetadata,
        EncryptionKeyResolverName,
        KeyEncryptionAlgorithm,
        EncryptionAlgorithm,
      } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const credentials = new ClientSecretCredential("<tenant-id>",
      "<client-id>", "<app-secret>");

      const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);

      const client = new CosmosClient({
        endpoint,
        key,
        clientEncryptionOptions: {
          keyEncryptionKeyResolver: keyResolver,
        },
      });

      const { database } = await client.databases.createIfNotExists({ id: "<db
      id>" });

      const metadata: EncryptionKeyWrapMetadata = {
        type: EncryptionKeyResolverName.AzureKeyVault,
        name: "<key-name>",
        value: "<key-vault-url>",
        algorithm: KeyEncryptionAlgorithm.RSA_OAEP,
      };


      await database.createClientEncryptionKey(
        "<cek-id>",
        EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,
        metadata,
      );

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createClientEncryptionKey(clientEncryptionKeyId: string,
        encryptionAlgorithm: AEAD_AES_256_CBC_HMAC_SHA256, keyWrapMetadata:
        EncryptionKeyWrapMetadata): Promise<ClientEncryptionKeyResponse>
      parameters:
        - id: clientEncryptionKeyId
          type: string
          description: ''
        - id: encryptionAlgorithm
          type: >-
            <xref
            uid="@azure/cosmos.EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256"
            />
          description: ''
        - id: keyWrapMetadata
          type: <xref uid="@azure/cosmos.EncryptionKeyWrapMetadata" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ClientEncryptionKeyResponse"
          />&gt;
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Database.delete'
    package: '@azure/cosmos'
    summary: |+
      Delete the given Database.

      **Example**

      ```ts snippet:CosmosClientDatabaseDelete
      import { CosmosClient } from "@azure/cosmos";

      const endpoint = "https://your-account.documents.azure.com";
      const key = "<database account masterkey>";
      const client = new CosmosClient({ endpoint, key });
      await client.database("<id here>").delete();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<DatabaseResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.DatabaseResponse" />&gt;
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Database.read'
    package: '@azure/cosmos'
    summary: |+
      Read the definition of the given Database.

      **Example**

      ```ts snippet:DatabaseRead
      import { CosmosClient } from "@azure/cosmos";

      const endpoint = "https://your-account.documents.azure.com";
      const key = "<database account masterkey>";
      const client = new CosmosClient({ endpoint, key });

      const { resource: database } = await client.database("<db id>").read();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<DatabaseResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.DatabaseResponse" />&gt;
  - name: readClientEncryptionKey(string)
    uid: '@azure/cosmos.Database.readClientEncryptionKey'
    package: '@azure/cosmos'
    summary: >+
      Read Encryption key for database account


      **Example**


      ```ts snippet:DatabaseReadClientEncryptionKey

      import { ClientSecretCredential } from "@azure/identity";

      import { AzureKeyVaultEncryptionKeyResolver, CosmosClient } from
      "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const credentials = new ClientSecretCredential("<tenant-id>",
      "<client-id>", "<app-secret>");

      const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);

      const client = new CosmosClient({
        endpoint,
        key,
        clientEncryptionOptions: {
          keyEncryptionKeyResolver: keyResolver,
        },
      });

      const { database } = await client.databases.createIfNotExists({ id: "<db
      id>" });


      const { resource: clientEncryptionKey } = await
      database.readClientEncryptionKey("<cek-id>");

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readClientEncryptionKey(clientEncryptionKeyId: string):
        Promise<ClientEncryptionKeyResponse>
      parameters:
        - id: clientEncryptionKeyId
          type: string
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ClientEncryptionKeyResponse"
          />&gt;
  - name: readOffer(RequestOptions)
    uid: '@azure/cosmos.Database.readOffer'
    package: '@azure/cosmos'
    summary: >+
      Gets offer on database. If none exists, returns an OfferResponse with
      undefined.


      **Example**


      Read the offer on the database

      ```ts snippet:DatabaseReadOffer

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { resource: offer } = await client.database("<db id>").readOffer();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function readOffer(options?: RequestOptions): Promise<OfferResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.OfferResponse" />&gt;
  - name: rewrapClientEncryptionKey(string, EncryptionKeyWrapMetadata)
    uid: '@azure/cosmos.Database.rewrapClientEncryptionKey'
    package: '@azure/cosmos'
    summary: >+
      rewraps a client encryption key with new key encryption key


      **Example**


      ```ts snippet:DatabaseRewrapClientEncryptionKey

      import { ClientSecretCredential } from "@azure/identity";

      import {
        AzureKeyVaultEncryptionKeyResolver,
        CosmosClient,
        EncryptionKeyWrapMetadata,
        EncryptionKeyResolverName,
        KeyEncryptionAlgorithm,
      } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const credentials = new ClientSecretCredential("<tenant-id>",
      "<client-id>", "<app-secret>");

      const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);

      const client = new CosmosClient({
        endpoint,
        key,
        clientEncryptionOptions: {
          keyEncryptionKeyResolver: keyResolver,
        },
      });

      const { database } = await client.databases.createIfNotExists({ id: "<db
      id>" });

      const newMetadata: EncryptionKeyWrapMetadata = {
        type: EncryptionKeyResolverName.AzureKeyVault,
        name: "<key-name>",
        value: "<key-vault-url>",
        algorithm: KeyEncryptionAlgorithm.RSA_OAEP,
      };


      await database.rewrapClientEncryptionKey("<new-cek-id>", newMetadata);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rewrapClientEncryptionKey(clientEncryptionKeyId: string,
        newKeyWrapMetadata: EncryptionKeyWrapMetadata):
        Promise<ClientEncryptionKeyResponse>
      parameters:
        - id: clientEncryptionKeyId
          type: string
          description: ''
        - id: newKeyWrapMetadata
          type: <xref uid="@azure/cosmos.EncryptionKeyWrapMetadata" />
          description: new encryption key wrap metadata
      return:
        description: rewrapped client encryption key with new customer managed key
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ClientEncryptionKeyResponse"
          />&gt;
  - name: user(string)
    uid: '@azure/cosmos.Database.user'
    package: '@azure/cosmos'
    summary: >+
      Used to read, replace, or delete a specific, existing
      [User](xref:@azure/cosmos.User) by id.


      Use `.users` for creating new users, or querying/reading all users.


      **Example**


      Delete a user

      ```ts snippet:DatabaseDeleteUser

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      await client.database("<db id>").user("<user id>").delete();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function user(id: string): User'
      parameters:
        - id: id
          type: string
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.User" />
