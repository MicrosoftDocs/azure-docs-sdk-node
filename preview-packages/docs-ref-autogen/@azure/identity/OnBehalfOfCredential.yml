### YamlMime:TSType
name: OnBehalfOfCredential
uid: '@azure/identity.OnBehalfOfCredential'
package: '@azure/identity'
summary: >-
  Enables authentication to Microsoft Entra ID using the [On Behalf Of
  flow](https://learn.microsoft.com/entra/identity-platform/v2-oauth2-on-behalf-of-flow).
fullName: OnBehalfOfCredential
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      OnBehalfOfCredential(OnBehalfOfCredentialAssertionOptions &
      MultiTenantTokenCredentialOptions & CredentialPersistenceOptions)
    uid: '@azure/identity.OnBehalfOfCredential.constructor_2'
    package: '@azure/identity'
    summary: >-
      Creates an instance of the
      [OnBehalfOfCredential](xref:@azure/identity.OnBehalfOfCredential) with the
      details

      needed to authenticate against Microsoft Entra ID with a client
      `getAssertion`

      and an user assertion.


      Example using the `KeyClient` from
      [@azure/keyvault-keys](https://www.npmjs.com/package/@azure/keyvault-keys):


      ```ts snippet:on_behalf_of_credential_assertion_example

      import { OnBehalfOfCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const tokenCredential = new OnBehalfOfCredential({
        tenantId: "tenant-id",
        clientId: "client-id",
        getAssertion: () => {
          return Promise.resolve("my-jwt");
        },
        userAssertionToken: "access-token",
      });

      const client = new KeyClient("vault-url", tokenCredential);


      await client.getKey("key-name");

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new OnBehalfOfCredential(options: OnBehalfOfCredentialAssertionOptions &
        MultiTenantTokenCredentialOptions & CredentialPersistenceOptions)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/identity.OnBehalfOfCredentialAssertionOptions" />
            & <xref uid="@azure/identity.MultiTenantTokenCredentialOptions" /> &
            <xref uid="@azure/identity.CredentialPersistenceOptions" />
          description: Optional parameters, generally common across credentials.
  - name: >-
      OnBehalfOfCredential(OnBehalfOfCredentialCertificateOptions &
      MultiTenantTokenCredentialOptions & CredentialPersistenceOptions)
    uid: '@azure/identity.OnBehalfOfCredential.constructor'
    package: '@azure/identity'
    summary: >-
      Creates an instance of the
      [OnBehalfOfCredential](xref:@azure/identity.OnBehalfOfCredential) with the
      details

      needed to authenticate against Microsoft Entra ID with path to a PEM
      certificate,

      and an user assertion.


      Example using the `KeyClient` from
      [@azure/keyvault-keys](https://www.npmjs.com/package/@azure/keyvault-keys):


      ```ts snippet:on_behalf_of_credential_pem_example

      import { OnBehalfOfCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const tokenCredential = new OnBehalfOfCredential({
        tenantId: "tenant-id",
        clientId: "client-id",
        certificatePath: "/path/to/certificate.pem",
        userAssertionToken: "access-token",
      });

      const client = new KeyClient("vault-url", tokenCredential);


      await client.getKey("key-name");

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new OnBehalfOfCredential(options: OnBehalfOfCredentialCertificateOptions
        & MultiTenantTokenCredentialOptions & CredentialPersistenceOptions)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/identity.OnBehalfOfCredentialCertificateOptions"
            /> & <xref uid="@azure/identity.MultiTenantTokenCredentialOptions"
            /> & <xref uid="@azure/identity.CredentialPersistenceOptions" />
          description: Optional parameters, generally common across credentials.
  - name: >-
      OnBehalfOfCredential(OnBehalfOfCredentialSecretOptions &
      MultiTenantTokenCredentialOptions & CredentialPersistenceOptions)
    uid: '@azure/identity.OnBehalfOfCredential.constructor_1'
    package: '@azure/identity'
    summary: >-
      Creates an instance of the
      [OnBehalfOfCredential](xref:@azure/identity.OnBehalfOfCredential) with the
      details

      needed to authenticate against Microsoft Entra ID with a client

      secret and an user assertion.


      Example using the `KeyClient` from
      [@azure/keyvault-keys](https://www.npmjs.com/package/@azure/keyvault-keys):


      ```ts snippet:on_behalf_of_credential_secret_example

      import { OnBehalfOfCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const tokenCredential = new OnBehalfOfCredential({
        tenantId: "tenant-id",
        clientId: "client-id",
        clientSecret: "client-secret",
        userAssertionToken: "access-token",
      });

      const client = new KeyClient("vault-url", tokenCredential);


      await client.getKey("key-name");

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new OnBehalfOfCredential(options: OnBehalfOfCredentialSecretOptions &
        MultiTenantTokenCredentialOptions & CredentialPersistenceOptions)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/identity.OnBehalfOfCredentialSecretOptions" /> &
            <xref uid="@azure/identity.MultiTenantTokenCredentialOptions" /> &
            <xref uid="@azure/identity.CredentialPersistenceOptions" />
          description: Optional parameters, generally common across credentials.
methods:
  - name: getToken(string | string[], GetTokenOptions)
    uid: '@azure/identity.OnBehalfOfCredential.getToken'
    package: '@azure/identity'
    summary: >-
      Authenticates with Microsoft Entra ID and returns an access token if
      successful.

      If authentication fails, a
      [CredentialUnavailableError](xref:@azure/identity.CredentialUnavailableError)
      will be thrown with the details of the failure.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getToken(scopes: string | string[], options?: GetTokenOptions):
        Promise<AccessToken>
      parameters:
        - id: scopes
          type: string | string[]
          description: The list of scopes for which the token will have access.
        - id: options
          type: <xref uid="@azure/identity.GetTokenOptions" />
          description: The options used to configure the underlying network requests.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/identity.AccessToken" />&gt;
