### YamlMime:TSType
name: WidgetsOperations
uid: '@azure/template.WidgetsOperations'
package: '@azure/template'
summary: Interface representing a Widgets operations.
fullName: WidgetsOperations
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: createOrUpdateWidget
    uid: '@azure/template.WidgetsOperations.createOrUpdateWidget'
    package: '@azure/template'
    summary: Creates or updates a Widget asynchronously.
    fullName: createOrUpdateWidget
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        createOrUpdateWidget: (widgetName: string, resource: WidgetSuite,
        options?: WidgetsCreateOrUpdateWidgetOptionalParams) =>
        PollerLike<OperationState<WidgetSuite>, WidgetSuite>
      return:
        description: ''
        type: >-
          (widgetName: string, resource: WidgetSuite, options?:
          WidgetsCreateOrUpdateWidgetOptionalParams) =&gt;
          PollerLike&lt;OperationState&lt;WidgetSuite&gt;, WidgetSuite&gt;
  - name: deleteWidget
    uid: '@azure/template.WidgetsOperations.deleteWidget'
    package: '@azure/template'
    summary: Delete a Widget asynchronously.
    fullName: deleteWidget
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        deleteWidget: (widgetName: string, options?:
        WidgetsDeleteWidgetOptionalParams) =>
        PollerLike<OperationState<WidgetSuite>, WidgetSuite>
      return:
        description: ''
        type: >-
          (widgetName: string, options?: WidgetsDeleteWidgetOptionalParams)
          =&gt; PollerLike&lt;OperationState&lt;WidgetSuite&gt;, WidgetSuite&gt;
  - name: getWidget
    uid: '@azure/template.WidgetsOperations.getWidget'
    package: '@azure/template'
    summary: Fetch a Widget by name.
    fullName: getWidget
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        getWidget: (widgetName: string, options?:
        WidgetsGetWidgetOptionalParams) => Promise<WidgetSuite>
      return:
        description: ''
        type: >-
          (widgetName: string, options?: WidgetsGetWidgetOptionalParams) =&gt;
          Promise&lt;WidgetSuite&gt;
  - name: getWidgetOperationStatus
    uid: '@azure/template.WidgetsOperations.getWidgetOperationStatus'
    package: '@azure/template'
    summary: Gets status of a Widget operation.
    fullName: getWidgetOperationStatus
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        getWidgetOperationStatus: (widgetName: string, operationId: string,
        options?: WidgetsGetWidgetOperationStatusOptionalParams) =>
        Promise<ResourceOperationStatusWidgetSuiteWidgetSuiteError>
      return:
        description: ''
        type: >-
          (widgetName: string, operationId: string, options?:
          WidgetsGetWidgetOperationStatusOptionalParams) =&gt;
          Promise&lt;ResourceOperationStatusWidgetSuiteWidgetSuiteError&gt;
  - name: listWidgets
    uid: '@azure/template.WidgetsOperations.listWidgets'
    package: '@azure/template'
    summary: List Widget resources
    fullName: listWidgets
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        listWidgets: (options?: WidgetsListWidgetsOptionalParams) =>
        PagedAsyncIterableIterator<WidgetSuite, WidgetSuite[], PageSettings>
      return:
        description: ''
        type: >-
          (options?: WidgetsListWidgetsOptionalParams) =&gt;
          PagedAsyncIterableIterator&lt;WidgetSuite, WidgetSuite[],
          PageSettings&gt;
