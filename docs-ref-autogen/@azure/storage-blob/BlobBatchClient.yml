### YamlMime:TSType
name: BlobBatchClient
uid: '@azure/storage-blob.BlobBatchClient'
package: '@azure/storage-blob'
summary: >-
  A BlobBatchClient allows you to make batched requests to the Azure Storage
  Blob service.


  See https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch
fullName: BlobBatchClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: BlobBatchClient(string, PipelineLike)
    uid: '@azure/storage-blob.BlobBatchClient.constructor_1'
    package: '@azure/storage-blob'
    summary: Creates an instance of BlobBatchClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new BlobBatchClient(url: string, pipeline: PipelineLike)'
      parameters:
        - id: url
          type: string
          description: |-
            A url pointing to Azure Storage blob service, such as
                                "https://myaccount.blob.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.blob.core.windows.net?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-blob.PipelineLike" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      BlobBatchClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-blob.BlobBatchClient.constructor'
    package: '@azure/storage-blob'
    summary: Creates an instance of BlobBatchClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new BlobBatchClient(url: string, credential?: StorageSharedKeyCredential
        | AnonymousCredential | TokenCredential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A url pointing to Azure Storage blob service, such as
                                "https://myaccount.blob.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.blob.core.windows.net?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-blob.AnonymousCredential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: Options to configure the HTTP pipeline.
methods:
  - name: createBatch()
    uid: '@azure/storage-blob.BlobBatchClient.createBatch'
    package: '@azure/storage-blob'
    summary: |-
      Creates a [BlobBatch](xref:@azure/storage-blob.BlobBatch).
      A BlobBatch represents an aggregated set of operations on blobs.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createBatch(): BlobBatch'
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.BlobBatch" />
  - name: deleteBlobs(BlobClient[], BlobDeleteOptions)
    uid: '@azure/storage-blob.BlobBatchClient.deleteBlobs_1'
    package: '@azure/storage-blob'
    summary: >-
      Create multiple delete operations to mark the specified blobs or snapshots
      for deletion.

      Note that in order to delete a blob, you must delete all of its snapshots.

      You can delete both at the same time. See [delete operation
      details](https://learn.microsoft.com/en-us/rest/api/storageservices/delete-blob).

      The operation(subrequest) will be authenticated and authorized with
      specified credential.

      See [blob batch authorization
      details](https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteBlobs(blobClients: BlobClient[], options?:
        BlobDeleteOptions): Promise<BlobBatchSubmitBatchResponse>
      parameters:
        - id: blobClients
          type: <xref uid="@azure/storage-blob.BlobClient" />[]
          description: The BlobClients for the blobs to delete.
        - id: options
          type: <xref uid="@azure/storage-blob.BlobDeleteOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.BlobBatchSubmitBatchResponse" />&gt;
  - name: >-
      deleteBlobs(string[], StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, BlobDeleteOptions)
    uid: '@azure/storage-blob.BlobBatchClient.deleteBlobs'
    package: '@azure/storage-blob'
    summary: >-
      Create multiple delete operations to mark the specified blobs or snapshots
      for deletion.

      Note that in order to delete a blob, you must delete all of its snapshots.

      You can delete both at the same time. See [delete operation
      details](https://learn.microsoft.com/en-us/rest/api/storageservices/delete-blob).

      The operations will be authenticated and authorized with specified
      credential.

      See [blob batch authorization
      details](https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteBlobs(urls: string[], credential:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: BlobDeleteOptions): Promise<BlobBatchSubmitBatchResponse>
      parameters:
        - id: urls
          type: string[]
          description: The urls of the blob resources to delete.
        - id: credential
          type: >-
            <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-blob.AnonymousCredential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-blob.BlobDeleteOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.BlobBatchSubmitBatchResponse" />&gt;
  - name: setBlobsAccessTier(BlobClient[], AccessTier, BlobSetTierOptions)
    uid: '@azure/storage-blob.BlobBatchClient.setBlobsAccessTier_1'
    package: '@azure/storage-blob'
    summary: >-
      Create multiple set tier operations to set the tier on a blob.

      The operation is allowed on a page blob in a premium

      storage account and on a block blob in a blob storage account (locally
      redundant

      storage only). A premium page blob's tier determines the allowed size,
      IOPS,

      and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive

      storage type. This operation does not update the blob's ETag.

      See [set blob tier
      details](https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).

      The operation(subrequest) will be authenticated and authorized

      with specified credential.See [blob batch authorization
      details](https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setBlobsAccessTier(blobClients: BlobClient[], tier: AccessTier,
        options?: BlobSetTierOptions): Promise<BlobBatchSubmitBatchResponse>
      parameters:
        - id: blobClients
          type: <xref uid="@azure/storage-blob.BlobClient" />[]
          description: The BlobClients for the blobs which should have a new tier set.
        - id: tier
          type: <xref uid="@azure/storage-blob.AccessTier" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSetTierOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.BlobBatchSubmitBatchResponse" />&gt;
  - name: >-
      setBlobsAccessTier(string[], StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, AccessTier, BlobSetTierOptions)
    uid: '@azure/storage-blob.BlobBatchClient.setBlobsAccessTier'
    package: '@azure/storage-blob'
    summary: >-
      Create multiple set tier operations to set the tier on a blob.

      The operation is allowed on a page blob in a premium

      storage account and on a block blob in a blob storage account (locally
      redundant

      storage only). A premium page blob's tier determines the allowed size,
      IOPS,

      and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive

      storage type. This operation does not update the blob's ETag.

      See [set blob tier
      details](https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).

      The operation(subrequest) will be authenticated and authorized

      with specified credential.See [blob batch authorization
      details](https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setBlobsAccessTier(urls: string[], credential:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        tier: AccessTier, options?: BlobSetTierOptions):
        Promise<BlobBatchSubmitBatchResponse>
      parameters:
        - id: urls
          type: string[]
          description: The urls of the blob resource to delete.
        - id: credential
          type: >-
            <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-blob.AnonymousCredential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: tier
          type: <xref uid="@azure/storage-blob.AccessTier" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.BlobSetTierOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.BlobBatchSubmitBatchResponse" />&gt;
  - name: submitBatch(BlobBatch, BlobBatchSubmitBatchOptionalParams)
    uid: '@azure/storage-blob.BlobBatchClient.submitBatch'
    package: '@azure/storage-blob'
    summary: |-
      Submit batch request which consists of multiple subrequests.

      Get `blobBatchClient` and other details before running the snippets.
      `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`

      Example usage:

      ```js
      let batchRequest = new BlobBatch();
      await batchRequest.deleteBlob(urlInString0, credential0);
      await batchRequest.deleteBlob(urlInString1, credential1, {
       deleteSnapshots: "include"
      });
      const batchResp = await blobBatchClient.submitBatch(batchRequest);
      console.log(batchResp.subResponsesSucceededCount);
      ```

      Example using a lease:

      ```js
      let batchRequest = new BlobBatch();
      await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
      await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
       conditions: { leaseId: leaseId }
      });
      const batchResp = await blobBatchClient.submitBatch(batchRequest);
      console.log(batchResp.subResponsesSucceededCount);
      ```

      See https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function submitBatch(batchRequest: BlobBatch, options?:
        BlobBatchSubmitBatchOptionalParams):
        Promise<BlobBatchSubmitBatchResponse>
      parameters:
        - id: batchRequest
          type: <xref uid="@azure/storage-blob.BlobBatch" />
          description: A set of Delete or SetTier operations.
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.BlobBatchSubmitBatchOptionalParams"
            />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.BlobBatchSubmitBatchResponse" />&gt;
