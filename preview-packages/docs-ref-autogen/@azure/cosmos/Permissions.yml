### YamlMime:TSType
name: Permissions
uid: '@azure/cosmos.Permissions'
package: '@azure/cosmos'
summary: >-
  Use to create, replace, query, and read all Permissions.


  See [Permission](xref:@azure/cosmos.Permission) to read, replace, or delete a
  specific permission by id.
fullName: Permissions
remarks: ''
isDeprecated: false
type: class
properties:
  - name: user
    uid: '@azure/cosmos.Permissions.user'
    package: '@azure/cosmos'
    summary: ''
    fullName: user
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'user: User'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.User" />
methods:
  - name: create(PermissionDefinition, RequestOptions)
    uid: '@azure/cosmos.Permissions.create'
    package: '@azure/cosmos'
    summary: >+
      Create a permission.


      A permission represents a per-User Permission to access a specific
      resource

      e.g. Item or Container.


      **Example**


      ```ts snippet:PermissionsCreate

      import { CosmosClient, PermissionDefinition, PermissionMode } from
      "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { user } = await database.users.create({ id: "<user-id>" });


      const permissionDefinition: PermissionDefinition = {
        id: "<permission-id>",
        permissionMode: PermissionMode.Read,
        resource: "<resource-url>",
      };

      await user.permissions.create(permissionDefinition);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(body: PermissionDefinition, options?: RequestOptions):
        Promise<PermissionResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.PermissionDefinition" />
          description: Represents the body of the permission.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.PermissionResponse" />&gt;
  - name: query(SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Permissions.query'
    package: '@azure/cosmos'
    summary: >+
      Query all permissions.


      **Example**


      Query permission with id.

      ```ts snippet:PermissionsQuery

      import { CosmosClient, SqlQuerySpec } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const querySpec: SqlQuerySpec = {
        query: `SELECT * FROM root r WHERE r.id = @permission`,
        parameters: [{ name: "@permission", value: "<permission-id>" }],
      };

      const { resources: permisssion } = await database
        .user("<user-id>")
        .permissions.query(querySpec)
        .fetchAll();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: query<T>(SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Permissions.query_1'
    package: '@azure/cosmos'
    summary: Query all permissions.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Permissions.readAll'
    package: '@azure/cosmos'
    summary: >+
      Read all permissions.


      **Example**


      Read all permissions to array.

      ```ts snippet:PermissionsReadAll

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { resources: permissionList } = await
      database.user("user1").permissions.readAll().fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAll(options?: FeedOptions):
        QueryIterator<PermissionDefinition & Resource>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.PermissionDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
  - name: upsert(PermissionDefinition, RequestOptions)
    uid: '@azure/cosmos.Permissions.upsert'
    package: '@azure/cosmos'
    summary: >+
      Upsert a permission.

      A permission represents a per-User Permission to access a

      specific resource e.g. Item or Container.


      **Example**


      ```ts snippet:PermissionsUpsert

      import { CosmosClient, PermissionDefinition, PermissionMode } from
      "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const user = database.user("<user-id>");

      const permissionDefinitionToUpsert: PermissionDefinition = {
        id: "<permission-id>",
        permissionMode: PermissionMode.Read,
        resource: "<resource-url>",
      };


      await user.permissions.upsert(permissionDefinitionToUpsert);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsert(body: PermissionDefinition, options?: RequestOptions):
        Promise<PermissionResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.PermissionDefinition" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.PermissionResponse" />&gt;
