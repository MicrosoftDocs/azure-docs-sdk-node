### YamlMime:TSType
name: BatchJobCreateOptions
uid: '@azure-rest/batch.BatchJobCreateOptions'
package: '@azure-rest/batch'
summary: Parameters for creating an Azure Batch Job.
fullName: BatchJobCreateOptions
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: allowTaskPreemption
    uid: '@azure-rest/batch.BatchJobCreateOptions.allowTaskPreemption'
    package: '@azure-rest/batch'
    summary: >-
      Whether Tasks in this job can be preempted by other high priority jobs. If
      the value is set to True, other high priority jobs submitted to the system
      will take precedence and will be able requeue tasks from this job. You can
      update a job's allowTaskPreemption after it has been created using the
      update job API.
    fullName: allowTaskPreemption
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'allowTaskPreemption?: boolean'
      return:
        description: ''
        type: boolean
  - name: commonEnvironmentSettings
    uid: '@azure-rest/batch.BatchJobCreateOptions.commonEnvironmentSettings'
    package: '@azure-rest/batch'
    summary: >-
      The list of common environment variable settings. These environment
      variables are set for all Tasks in the Job (including the Job Manager, Job
      Preparation and Job Release Tasks). Individual Tasks can override an
      environment setting specified here by specifying the same setting name
      with a different value.
    fullName: commonEnvironmentSettings
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'commonEnvironmentSettings?: EnvironmentSetting[]'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.EnvironmentSetting" />[]
  - name: constraints
    uid: '@azure-rest/batch.BatchJobCreateOptions.constraints'
    package: '@azure-rest/batch'
    summary: The execution constraints for the Job.
    fullName: constraints
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'constraints?: BatchJobConstraints'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobConstraints" />
  - name: displayName
    uid: '@azure-rest/batch.BatchJobCreateOptions.displayName'
    package: '@azure-rest/batch'
    summary: >-
      The display name for the Job. The display name need not be unique and can
      contain any Unicode characters up to a maximum length of 1024.
    fullName: displayName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'displayName?: string'
      return:
        description: ''
        type: string
  - name: id
    uid: '@azure-rest/batch.BatchJobCreateOptions.id'
    package: '@azure-rest/batch'
    summary: >-
      A string that uniquely identifies the Job within the Account. The ID can
      contain any combination of alphanumeric characters including hyphens and
      underscores, and cannot contain more than 64 characters. The ID is
      case-preserving and case-insensitive (that is, you may not have two IDs
      within an Account that differ only by case).
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: jobManagerTask
    uid: '@azure-rest/batch.BatchJobCreateOptions.jobManagerTask'
    package: '@azure-rest/batch'
    summary: >-
      Details of a Job Manager Task to be launched when the Job is started. If
      the Job does not specify a Job Manager Task, the user must explicitly add
      Tasks to the Job. If the Job does specify a Job Manager Task, the Batch
      service creates the Job Manager Task when the Job is created, and will try
      to schedule the Job Manager Task before scheduling other Tasks in the Job.
      The Job Manager Task's typical purpose is to control and/or monitor Job
      execution, for example by deciding what additional Tasks to run,
      determining when the work is complete, etc. (However, a Job Manager Task
      is not restricted to these activities - it is a fully-fledged Task in the
      system and perform whatever actions are required for the Job.) For
      example, a Job Manager Task might download a file specified as a
      parameter, analyze the contents of that file and submit additional Tasks
      based on those contents.
    fullName: jobManagerTask
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'jobManagerTask?: BatchJobManagerTask'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobManagerTask" />
  - name: jobPreparationTask
    uid: '@azure-rest/batch.BatchJobCreateOptions.jobPreparationTask'
    package: '@azure-rest/batch'
    summary: >-
      The Job Preparation Task. If a Job has a Job Preparation Task, the Batch
      service will run the Job Preparation Task on a Node before starting any
      Tasks of that Job on that Compute Node.
    fullName: jobPreparationTask
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'jobPreparationTask?: BatchJobPreparationTask'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobPreparationTask" />
  - name: jobReleaseTask
    uid: '@azure-rest/batch.BatchJobCreateOptions.jobReleaseTask'
    package: '@azure-rest/batch'
    summary: >-
      The Job Release Task. A Job Release Task cannot be specified without also
      specifying a Job Preparation Task for the Job. The Batch service runs the
      Job Release Task on the Nodes that have run the Job Preparation Task. The
      primary purpose of the Job Release Task is to undo changes to Compute
      Nodes made by the Job Preparation Task. Example activities include
      deleting local files, or shutting down services that were started as part
      of Job preparation.
    fullName: jobReleaseTask
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'jobReleaseTask?: BatchJobReleaseTask'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobReleaseTask" />
  - name: maxParallelTasks
    uid: '@azure-rest/batch.BatchJobCreateOptions.maxParallelTasks'
    package: '@azure-rest/batch'
    summary: >-
      The maximum number of tasks that can be executed in parallel for the job.
      The value of maxParallelTasks must be -1 or greater than 0 if specified.
      If not specified, the default value is -1, which means there's no limit to
      the number of tasks that can be run at once. You can update a job's
      maxParallelTasks after it has been created using the update job API.
    fullName: maxParallelTasks
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'maxParallelTasks?: number'
      return:
        description: ''
        type: number
  - name: metadata
    uid: '@azure-rest/batch.BatchJobCreateOptions.metadata'
    package: '@azure-rest/batch'
    summary: >-
      A list of name-value pairs associated with the Job as metadata. The Batch
      service does not assign any meaning to metadata; it is solely for the use
      of user code.
    fullName: metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'metadata?: BatchMetadataItem[]'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchMetadataItem" />[]
  - name: networkConfiguration
    uid: '@azure-rest/batch.BatchJobCreateOptions.networkConfiguration'
    package: '@azure-rest/batch'
    summary: The network configuration for the Job.
    fullName: networkConfiguration
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'networkConfiguration?: BatchJobNetworkConfiguration'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchJobNetworkConfiguration" />
  - name: onAllTasksComplete
    uid: '@azure-rest/batch.BatchJobCreateOptions.onAllTasksComplete'
    package: '@azure-rest/batch'
    summary: >-
      The action the Batch service should take when all Tasks in the Job are in
      the completed state. Note that if a Job contains no Tasks, then all Tasks
      are considered complete. This option is therefore most commonly used with
      a Job Manager task; if you want to use automatic Job termination without a
      Job Manager, you should initially set onAllTasksComplete to noaction and
      update the Job properties to set onAllTasksComplete to terminatejob once
      you have finished adding Tasks. The default is noaction.


      Possible values: "noaction", "terminatejob"
    fullName: onAllTasksComplete
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'onAllTasksComplete?: string'
      return:
        description: ''
        type: string
  - name: onTaskFailure
    uid: '@azure-rest/batch.BatchJobCreateOptions.onTaskFailure'
    package: '@azure-rest/batch'
    summary: >-
      The action the Batch service should take when any Task in the Job fails. A
      Task is considered to have failed if has a failureInfo. A failureInfo is
      set if the Task completes with a non-zero exit code after exhausting its
      retry count, or if there was an error starting the Task, for example due
      to a resource file download error. The default is noaction.


      Possible values: "noaction", "performexitoptionsjobaction"
    fullName: onTaskFailure
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'onTaskFailure?: string'
      return:
        description: ''
        type: string
  - name: poolInfo
    uid: '@azure-rest/batch.BatchJobCreateOptions.poolInfo'
    package: '@azure-rest/batch'
    summary: The Pool on which the Batch service runs the Job's Tasks.
    fullName: poolInfo
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'poolInfo: BatchPoolInfo'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchPoolInfo" />
  - name: priority
    uid: '@azure-rest/batch.BatchJobCreateOptions.priority'
    package: '@azure-rest/batch'
    summary: >-
      The priority of the Job. Priority values can range from -1000 to 1000,
      with -1000 being the lowest priority and 1000 being the highest priority.
      The default value is 0.
    fullName: priority
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'priority?: number'
      return:
        description: ''
        type: number
  - name: usesTaskDependencies
    uid: '@azure-rest/batch.BatchJobCreateOptions.usesTaskDependencies'
    package: '@azure-rest/batch'
    summary: >-
      Whether Tasks in the Job can define dependencies on each other. The
      default is false.
    fullName: usesTaskDependencies
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'usesTaskDependencies?: boolean'
      return:
        description: ''
        type: boolean
