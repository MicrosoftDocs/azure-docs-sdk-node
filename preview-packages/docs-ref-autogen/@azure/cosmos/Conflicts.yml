### YamlMime:TSType
name: Conflicts
uid: '@azure/cosmos.Conflicts'
package: '@azure/cosmos'
summary: >-
  Use to query or read all conflicts.


  See [Conflict](xref:@azure/cosmos.Conflict) to read or delete a given
  [Conflict](xref:@azure/cosmos.Conflict) by id.
fullName: Conflicts
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: Conflicts(Container, ClientContext)
    uid: '@azure/cosmos.Conflicts.constructor'
    package: '@azure/cosmos'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new Conflicts(container: Container, clientContext: ClientContext)'
      parameters:
        - id: container
          type: <xref uid="@azure/cosmos.Container" />
          description: ''
        - id: clientContext
          type: ClientContext
          description: ''
properties:
  - name: container
    uid: '@azure/cosmos.Conflicts.container'
    package: '@azure/cosmos'
    summary: ''
    fullName: container
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'container: Container'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container" />
methods:
  - name: query(string | SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Conflicts.query'
    package: '@azure/cosmos'
    summary: Queries all conflicts.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query(query: string | SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: >-
          [QueryIterator](xref:@azure/cosmos.QueryIterator) Allows you to return
          results in an array or iterate over them one at a time.
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: query<T>(string | SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Conflicts.query_1'
    package: '@azure/cosmos'
    summary: >+
      Queries all conflicts.


      **Example**


      Query conflict with id

      ```ts snippet:ConflictsQuery

      import { CosmosClient, SqlQuerySpec } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const container = database.container("Test Container");


      const querySpec: SqlQuerySpec = {
        query: `SELECT * FROM root r WHERE r.id = @conflict`,
        parameters: [{ name: "@conflict", value: "<conflict-id>" }],
      };

      const { resources: conflict } = await
      container.conflicts.query(querySpec).fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: string | SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: >-
          [QueryIterator](xref:@azure/cosmos.QueryIterator) Allows you to return
          results in an array or iterate over them one at a time.
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Conflicts.readAll'
    package: '@azure/cosmos'
    summary: >+
      Reads all conflicts


      **Example**


      ```ts snippet:ConflictsReadAll

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const container = database.container("Test Container");


      const { resources: conflicts } = await
      container.conflicts.readAll().fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAll(options?: FeedOptions):
        QueryIterator<ConflictDefinition & Resource>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: ''
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.ConflictDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
