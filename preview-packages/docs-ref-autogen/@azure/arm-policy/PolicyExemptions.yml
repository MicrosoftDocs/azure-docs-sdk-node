### YamlMime:TSType
name: PolicyExemptions
uid: '@azure/arm-policy.PolicyExemptions'
package: '@azure/arm-policy'
summary: Interface representing a PolicyExemptions.
fullName: PolicyExemptions
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: >-
      createOrUpdate(string, string, PolicyExemption,
      PolicyExemptionsCreateOrUpdateOptionalParams)
    uid: '@azure/arm-policy.PolicyExemptions.createOrUpdate'
    package: '@azure/arm-policy'
    summary: >-
      This operation creates or updates a policy exemption with the given scope
      and name. Policy

      exemptions apply to all resources contained within their scope. For
      example, when you create a

      policy exemption at resource group scope for a policy assignment at the
      same or above level, the

      exemption exempts to all applicable resources in the resource group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(scope: string, policyExemptionName: string,
        parameters: PolicyExemption, options?:
        PolicyExemptionsCreateOrUpdateOptionalParams): Promise<PolicyExemption>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy exemption. Valid scopes are: management
            group (format:
                         '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyExemptionName
          type: string
          description: The name of the policy exemption to delete.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyExemption" />
          description: Parameters for the policy exemption.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyExemptionsCreateOrUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyExemption" />&gt;
  - name: delete(string, string, PolicyExemptionsDeleteOptionalParams)
    uid: '@azure/arm-policy.PolicyExemptions.delete'
    package: '@azure/arm-policy'
    summary: >-
      This operation deletes a policy exemption, given its name and the scope it
      was created in. The scope

      of a policy exemption is the part of its ID preceding

      '/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}'.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(scope: string, policyExemptionName: string, options?:
        PolicyExemptionsDeleteOptionalParams): Promise<void>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy exemption. Valid scopes are: management
            group (format:
                         '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyExemptionName
          type: string
          description: The name of the policy exemption to delete.
        - id: options
          type: >-
            <xref uid="@azure/arm-policy.PolicyExemptionsDeleteOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: get(string, string, PolicyExemptionsGetOptionalParams)
    uid: '@azure/arm-policy.PolicyExemptions.get'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves a single policy exemption, given its name and the
      scope it was created at.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, policyExemptionName: string, options?:
        PolicyExemptionsGetOptionalParams): Promise<PolicyExemption>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy exemption. Valid scopes are: management
            group (format:
                         '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyExemptionName
          type: string
          description: The name of the policy exemption to delete.
        - id: options
          type: <xref uid="@azure/arm-policy.PolicyExemptionsGetOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyExemption" />&gt;
  - name: list(PolicyExemptionsListOptionalParams)
    uid: '@azure/arm-policy.PolicyExemptions.list'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy exemptions associated with
      the given subscription

      that match the optional given $filter. Valid values for $filter are:
      'atScope()', 'atExactScope()',

      'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
      provided, the unfiltered

      list includes all policy exemptions associated with the subscription,
      including those that apply

      directly or from management groups that contain the given subscription, as
      well as any applied to

      objects contained within the subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(options?: PolicyExemptionsListOptionalParams):
        PagedAsyncIterableIterator<PolicyExemption, PolicyExemption[],
        PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/arm-policy.PolicyExemptionsListOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-policy.PolicyExemption" />, <xref
          uid="@azure/arm-policy.PolicyExemption" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listForManagementGroup(string,
      PolicyExemptionsListForManagementGroupOptionalParams)
    uid: '@azure/arm-policy.PolicyExemptions.listForManagementGroup'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy exemptions applicable to
      the management group that

      match the given $filter. Valid values for $filter are: 'atScope()',
      'atExactScope()',

      'excludeExpired()' or 'policyAssignmentId eq '{value}''. If
      $filter=atScope() is provided, the

      returned list includes all policy exemptions that are assigned to the
      management group or the

      management group's ancestors.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForManagementGroup(managementGroupId: string, options?:
        PolicyExemptionsListForManagementGroupOptionalParams):
        PagedAsyncIterableIterator<PolicyExemption, PolicyExemption[],
        PageSettings>
      parameters:
        - id: managementGroupId
          type: string
          description: The ID of the management group.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyExemptionsListForManagementGroupOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-policy.PolicyExemption" />, <xref
          uid="@azure/arm-policy.PolicyExemption" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listForResource(string, string, string, string, string,
      PolicyExemptionsListForResourceOptionalParams)
    uid: '@azure/arm-policy.PolicyExemptions.listForResource'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy exemptions associated with
      the specified resource in

      the given resource group and subscription that match the optional given
      $filter. Valid values for

      $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
      'policyAssignmentId eq '{value}''.

      If $filter is not provided, the unfiltered list includes all policy
      exemptions associated with the

      resource, including those that apply directly or from all containing
      scopes, as well as any applied

      to resources contained within the resource. Three parameters plus the
      resource name are used to

      identify a specific resource. If the resource is not part of a parent
      resource (the more common

      case), the parent resource path should not be provided (or provided as
      ''). For example a web app

      could be specified as ({resourceProviderNamespace} == 'Microsoft.Web',
      {parentResourcePath} == '',

      {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource
      is part of a parent

      resource, then all parameters should be provided. For example a virtual
      machine DNS name could be

      specified as ({resourceProviderNamespace} == 'Microsoft.Compute',
      {parentResourcePath} ==

      'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
      {resourceName} ==

      'MyComputerName'). A convenient alternative to providing the namespace and
      type name separately is

      to provide both in the {resourceType} parameter, format:
      ({resourceProviderNamespace} == '',

      {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
      {resourceName} == 'MyWebApp').
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForResource(resourceGroupName: string,
        resourceProviderNamespace: string, parentResourcePath: string,
        resourceType: string, resourceName: string, options?:
        PolicyExemptionsListForResourceOptionalParams):
        PagedAsyncIterableIterator<PolicyExemption, PolicyExemption[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group containing the resource.
        - id: resourceProviderNamespace
          type: string
          description: |-
            The namespace of the resource provider. For example, the namespace
                                             of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
        - id: parentResourcePath
          type: string
          description: The parent resource path. Use empty string if there is none.
        - id: resourceType
          type: string
          description: >-
            The resource type name. For example the type name of a web app is
            'sites' (from
                                Microsoft.Web/sites).
        - id: resourceName
          type: string
          description: The name of the resource.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyExemptionsListForResourceOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-policy.PolicyExemption" />, <xref
          uid="@azure/arm-policy.PolicyExemption" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listForResourceGroup(string,
      PolicyExemptionsListForResourceGroupOptionalParams)
    uid: '@azure/arm-policy.PolicyExemptions.listForResourceGroup'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy exemptions associated with
      the given resource group

      in the given subscription that match the optional given $filter. Valid
      values for $filter are:

      'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId
      eq '{value}''. If $filter

      is not provided, the unfiltered list includes all policy exemptions
      associated with the resource

      group, including those that apply directly or apply from containing
      scopes, as well as any applied

      to resources contained within the resource group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroup(resourceGroupName: string, options?:
        PolicyExemptionsListForResourceGroupOptionalParams):
        PagedAsyncIterableIterator<PolicyExemption, PolicyExemption[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group containing the resource.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyExemptionsListForResourceGroupOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-policy.PolicyExemption" />, <xref
          uid="@azure/arm-policy.PolicyExemption" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      update(string, string, PolicyExemptionUpdate,
      PolicyExemptionsUpdateOptionalParams)
    uid: '@azure/arm-policy.PolicyExemptions.update'
    package: '@azure/arm-policy'
    summary: This operation updates a policy exemption with the given scope and name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(scope: string, policyExemptionName: string, parameters:
        PolicyExemptionUpdate, options?: PolicyExemptionsUpdateOptionalParams):
        Promise<PolicyExemption>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy exemption. Valid scopes are: management
            group (format:
                         '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyExemptionName
          type: string
          description: The name of the policy exemption to delete.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyExemptionUpdate" />
          description: Parameters for policy exemption patch request.
        - id: options
          type: >-
            <xref uid="@azure/arm-policy.PolicyExemptionsUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyExemption" />&gt;
