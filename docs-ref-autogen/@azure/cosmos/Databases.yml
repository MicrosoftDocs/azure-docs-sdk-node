### YamlMime:TSType
name: Databases
uid: '@azure/cosmos.Databases'
package: '@azure/cosmos'
summary: >-
  Operations for creating new databases, and reading/querying all databases


  See [Database](xref:@azure/cosmos.Database) for reading or deleting an
  existing database; use `client.database(id)`.


  Note: all these operations make calls against a fixed budget.

  You should design your system such that these calls scale sublinearly with
  your application.

  For instance, do not call `databases.readAll()` before every single
  `item.read()` call, to ensure the database exists;

  do this once on application start up.
fullName: Databases
remarks: ''
isDeprecated: false
type: class
properties:
  - name: client
    uid: '@azure/cosmos.Databases.client'
    package: '@azure/cosmos'
    summary: ''
    fullName: client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'client: CosmosClient'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.CosmosClient" />
methods:
  - name: create(DatabaseRequest, RequestOptions)
    uid: '@azure/cosmos.Databases.create'
    package: '@azure/cosmos'
    summary: >+
      Send a request for creating a database.


      A database manages users, permissions and a set of containers.

      Each Azure Cosmos DB Database Account is able to support multiple
      independent named databases,

      with the database being the logical container for data.


      Each Database consists of one or more containers, each of which in turn
      contain one or more

      documents. Since databases are an administrative resource, the Service
      Master Key will be

      required in order to access and successfully complete any action using the
      User APIs.


      **Example**


      ```ts snippet:CosmosClientDatabases

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { resource: databaseDefinition, database } = await
      client.databases.create({
        id: "<name here>",
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(body: DatabaseRequest, options?: RequestOptions):
        Promise<DatabaseResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.DatabaseRequest" />
          description: >-
            The [DatabaseDefinition](xref:@azure/cosmos.DatabaseDefinition) that
            represents the [Database](xref:@azure/cosmos.Database) to be
            created.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.DatabaseResponse" />&gt;
  - name: createIfNotExists(DatabaseRequest, RequestOptions)
    uid: '@azure/cosmos.Databases.createIfNotExists'
    package: '@azure/cosmos'
    summary: >+
      Check if a database exists, and if it doesn't, create it.

      This will make a read operation based on the id in the `body`, then if it
      is not found, a create operation.


      A database manages users, permissions and a set of containers.

      Each Azure Cosmos DB Database Account is able to support multiple
      independent named databases,

      with the database being the logical container for data.


      Each Database consists of one or more containers, each of which in turn
      contain one or more

      documents. Since databases are an an administrative resource, the Service
      Master Key will be

      required in order to access and successfully complete any action using the
      User APIs.


      **Example**


      ```ts snippet:ReadmeSampleCreateDatabase

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(body: DatabaseRequest, options?:
        RequestOptions): Promise<DatabaseResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.DatabaseRequest" />
          description: >-
            The [DatabaseDefinition](xref:@azure/cosmos.DatabaseDefinition) that
            represents the [Database](xref:@azure/cosmos.Database) to be
            created.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: Additional options for the request
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.DatabaseResponse" />&gt;
  - name: query(string | SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Databases.query'
    package: '@azure/cosmos'
    summary: >+
      Queries all databases.


      **Example**


      Read all databases to array.

      ```ts snippet:DatabasesQueryDatabases

      import { CosmosClient, SqlQuerySpec } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const querySpec: SqlQuerySpec = {
        query: `SELECT * FROM root r WHERE r.id = @database`,
        parameters: [{ name: "@database", value: "Todo" }],
      };

      const { resources: databaseList } = await
      client.databases.query(querySpec).fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query(query: string | SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: >-
          [QueryIterator](xref:@azure/cosmos.QueryIterator) Allows you to return
          all databases in an array or iterate over them one at a time.
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: query<T>(string | SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Databases.query_1'
    package: '@azure/cosmos'
    summary: >+
      Queries all databases.


      **Example**


      Read all databases to array.

      ```ts snippet:DatabasesQueryDatabases

      import { CosmosClient, SqlQuerySpec } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const querySpec: SqlQuerySpec = {
        query: `SELECT * FROM root r WHERE r.id = @database`,
        parameters: [{ name: "@database", value: "Todo" }],
      };

      const { resources: databaseList } = await
      client.databases.query(querySpec).fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: string | SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: >-
          [QueryIterator](xref:@azure/cosmos.QueryIterator) Allows you to return
          all databases in an array or iterate over them one at a time.
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Databases.readAll'
    package: '@azure/cosmos'
    summary: >+
      Reads all databases.


      **Example**


      Read all databases to array.

      ```ts snippet:DatabasesReadAll

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { resources: databaseList } = await
      client.databases.readAll().fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAll(options?: FeedOptions):
        QueryIterator<DatabaseDefinition & Resource>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: >-
          [QueryIterator](xref:@azure/cosmos.QueryIterator) Allows you to return
          all databases in an array or iterate over them one at a time.
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.DatabaseDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
