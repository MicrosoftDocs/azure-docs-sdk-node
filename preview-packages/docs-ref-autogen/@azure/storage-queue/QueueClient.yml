### YamlMime:TSType
name: QueueClient
uid: '@azure/storage-queue.QueueClient'
package: '@azure/storage-queue'
summary: >-
  A QueueClient represents a URL to an Azure Storage Queue's messages allowing
  you to manipulate its messages.
fullName: QueueClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: QueueClient(string, Pipeline)
    uid: '@azure/storage-queue.QueueClient.constructor_2'
    package: '@azure/storage-queue'
    summary: Creates an instance of QueueClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new QueueClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage queue, such as
                                "https://myaccount.queue.core.windows.net/myqueue". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.queue.core.windows.net/myqueue?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-queue.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      QueueClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-queue.QueueClient.constructor_1'
    package: '@azure/storage-queue'
    summary: Creates an instance of QueueClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new QueueClient(url: string, credential?: StorageSharedKeyCredential |
        AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage queue, such as
                                "https://myaccount.queue.core.windows.net/myqueue". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.queue.core.windows.net/myqueue?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-queue.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-queue.AnonymousCredential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-queue.StoragePipelineOptions" />
          description: Options to configure the HTTP pipeline.
  - name: QueueClient(string, string, StoragePipelineOptions)
    uid: '@azure/storage-queue.QueueClient.constructor'
    package: '@azure/storage-queue'
    summary: Creates an instance of QueueClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new QueueClient(connectionString: string, queueName: string, options?:
        StoragePipelineOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: queueName
          type: string
          description: Queue name.
        - id: options
          type: <xref uid="@azure/storage-queue.StoragePipelineOptions" />
          description: Options to configure the HTTP pipeline.
properties:
  - name: name
    uid: '@azure/storage-queue.QueueClient.name'
    package: '@azure/storage-queue'
    summary: The name of the queue.
    fullName: name
    remarks: ''
    isDeprecated: false
    syntax:
      content: string name
      return:
        description: ''
        type: string
inheritedProperties:
  - name: accountName
    uid: '@azure/storage-queue.QueueClient.accountName'
    package: '@azure/storage-queue'
    summary: ''
    fullName: accountName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.accountName
  - name: url
    uid: '@azure/storage-queue.QueueClient.url'
    package: '@azure/storage-queue'
    summary: URL string value.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.url
methods:
  - name: clearMessages(QueueClearMessagesOptions)
    uid: '@azure/storage-queue.QueueClient.clearMessages'
    package: '@azure/storage-queue'
    summary: >-
      Clear deletes all messages from a queue.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/clear-messages
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function clearMessages(options?: QueueClearMessagesOptions):
        Promise<MessagesClearResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueClearMessagesOptions" />
          description: Options to clear messages operation.
      return:
        description: Response data for the clear messages operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.MessagesClearResponse"
          />&gt;
  - name: create(QueueCreateOptions)
    uid: '@azure/storage-queue.QueueClient.create'
    package: '@azure/storage-queue'
    summary: >-
      Creates a new queue under the specified account.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-queue4
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(options?: QueueCreateOptions):
        Promise<QueueCreateResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueCreateOptions" />
          description: Options to Queue create operation.
      return:
        description: |-
          Response data for the Queue create operation.

          Example usage:

          ```ts snippet:ReadmeSampleCreateQueue
          import { QueueServiceClient } from "@azure/storage-queue";
          import { DefaultAzureCredential } from "@azure/identity";

          const account = "<account>";
          const queueServiceClient = new QueueServiceClient(
            `https://${account}.queue.core.windows.net`,
            new DefaultAzureCredential(),
          );

          const queueName = "<valid queue name>";
          const queueClient = queueServiceClient.getQueueClient(queueName);
          const createQueueResponse = await queueClient.create();
          console.log(
            `Created queue ${queueName} successfully, service assigned request Id: ${createQueueResponse.requestId}`,
          );
          ```
        type: Promise&lt;<xref uid="@azure/storage-queue.QueueCreateResponse" />&gt;
  - name: createIfNotExists(QueueCreateOptions)
    uid: '@azure/storage-queue.QueueClient.createIfNotExists'
    package: '@azure/storage-queue'
    summary: >-
      Creates a new queue under the specified account if it doesn't already
      exist.

      If the queue already exists, it is not changed.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-queue4
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(options?: QueueCreateOptions):
        Promise<QueueCreateIfNotExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueCreateOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueCreateIfNotExistsResponse" />&gt;
  - name: delete(QueueDeleteOptions)
    uid: '@azure/storage-queue.QueueClient.delete'
    package: '@azure/storage-queue'
    summary: >-
      Deletes the specified queue permanently.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-queue3
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?: QueueDeleteOptions):
        Promise<QueueDeleteResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueDeleteOptions" />
          description: Options to Queue delete operation.
      return:
        description: |-
          Response data for the Queue delete operation.

          Example usage:

          ```ts snippet:ReadmeSampleDeleteQueue
          import { QueueServiceClient } from "@azure/storage-queue";
          import { DefaultAzureCredential } from "@azure/identity";

          const account = "<account>";
          const queueServiceClient = new QueueServiceClient(
            `https://${account}.queue.core.windows.net`,
            new DefaultAzureCredential(),
          );

          const queueName = "<valid queue name>";
          const queueClient = queueServiceClient.getQueueClient(queueName);
          const deleteQueueResponse = await queueClient.delete();
          console.log(
            `Deleted queue successfully, service assigned request Id: ${deleteQueueResponse.requestId}`,
          );
          ```
        type: Promise&lt;<xref uid="@azure/storage-queue.QueueDeleteResponse" />&gt;
  - name: deleteIfExists(QueueDeleteOptions)
    uid: '@azure/storage-queue.QueueClient.deleteIfExists'
    package: '@azure/storage-queue'
    summary: >-
      Deletes the specified queue permanently if it exists.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-queue3
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteIfExists(options?: QueueDeleteOptions):
        Promise<QueueDeleteIfExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueDeleteOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueDeleteIfExistsResponse" />&gt;
  - name: deleteMessage(string, string, QueueDeleteMessageOptions)
    uid: '@azure/storage-queue.QueueClient.deleteMessage'
    package: '@azure/storage-queue'
    summary: >-
      deleteMessage permanently removes the specified message from its queue.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-message2
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMessage(messageId: string, popReceipt: string, options?:
        QueueDeleteMessageOptions): Promise<MessageIdDeleteResponse>
      parameters:
        - id: messageId
          type: string
          description: Id of the message.
        - id: popReceipt
          type: string
          description: >-
            A valid pop receipt value returned from an earlier call to the
            receive messages or update message operation.
        - id: options
          type: <xref uid="@azure/storage-queue.QueueDeleteMessageOptions" />
          description: Options to delete message operation.
      return:
        description: Response data for the delete message operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.MessageIdDeleteResponse"
          />&gt;
  - name: exists(QueueExistsOptions)
    uid: '@azure/storage-queue.QueueClient.exists'
    package: '@azure/storage-queue'
    summary: >-
      Returns true if the specified queue exists; false otherwise.


      NOTE: use this function with care since an existing queue might be deleted
      by other clients or

      applications. Vice versa new queues might be added by other clients or
      applications after this

      function completes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function exists(options?: QueueExistsOptions): Promise<boolean>'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueExistsOptions" />
          description: options to Exists operation.
      return:
        description: ''
        type: Promise&lt;boolean&gt;
  - name: generateSasStringToSign(QueueGenerateSasUrlOptions)
    uid: '@azure/storage-queue.QueueClient.generateSasStringToSign'
    package: '@azure/storage-queue'
    summary: >-
      Only available for QueueClient constructed with a shared key credential.


      Generates string to sign for a Service Shared Access Signature (SAS) URI
      based on the client properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSasStringToSign(options: QueueGenerateSasUrlOptions):
        string
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
  - name: generateSasUrl(QueueGenerateSasUrlOptions)
    uid: '@azure/storage-queue.QueueClient.generateSasUrl'
    package: '@azure/storage-queue'
    summary: >-
      Only available for QueueClient constructed with a shared key credential.


      Generates a Service Shared Access Signature (SAS) URI based on the client
      properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function generateSasUrl(options: QueueGenerateSasUrlOptions): string'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
  - name: getAccessPolicy(QueueGetAccessPolicyOptions)
    uid: '@azure/storage-queue.QueueClient.getAccessPolicy'
    package: '@azure/storage-queue'
    summary: >-
      Gets details about any stored access policies specified on the queue that
      may be used with Shared Access Signatures.


      WARNING: JavaScript Date will potential lost precision when parsing start
      and expiry string.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-queue-acl
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccessPolicy(options?: QueueGetAccessPolicyOptions):
        Promise<QueueGetAccessPolicyResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueGetAccessPolicyOptions" />
          description: Options to Queue get access policy operation.
      return:
        description: Response data for the Queue get access policy operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueGetAccessPolicyResponse" />&gt;
  - name: getProperties(QueueGetPropertiesOptions)
    uid: '@azure/storage-queue.QueueClient.getProperties'
    package: '@azure/storage-queue'
    summary: >-
      Gets all user-defined metadata and system properties for the specified

      queue. Metadata is associated with the queue as name-values pairs.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-queue-metadata


      WARNING: The `metadata` object returned in the response will have its keys
      in lowercase, even if

      they originally contained uppercase characters. This differs from the
      metadata keys returned by

      the `listQueues` method of
      [QueueServiceClient](xref:@azure/storage-queue.QueueServiceClient) using
      the `includeMetadata` option, which

      will retain their original casing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: QueueGetPropertiesOptions):
        Promise<QueueGetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueGetPropertiesOptions" />
          description: Options to Queue get properties operation.
      return:
        description: Response data for the Queue get properties operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.QueueGetPropertiesResponse"
          />&gt;
  - name: peekMessages(QueuePeekMessagesOptions)
    uid: '@azure/storage-queue.QueueClient.peekMessages'
    package: '@azure/storage-queue'
    summary: >-
      peekMessages retrieves one or more messages from the front of the queue
      but does not alter the visibility of the message.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/peek-messages
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function peekMessages(options?: QueuePeekMessagesOptions):
        Promise<QueuePeekMessagesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueuePeekMessagesOptions" />
          description: Options to peek messages operation.
      return:
        description: >-
          Response data for the peek messages operation.


          Example usage:


          ```ts snippet:ReadmeSamplePeekMessage

          import { QueueServiceClient } from "@azure/storage-queue";

          import { DefaultAzureCredential } from "@azure/identity";


          const account = "<account>";

          const queueServiceClient = new QueueServiceClient(
            `https://${account}.queue.core.windows.net`,
            new DefaultAzureCredential(),
          );


          const queueName = "<valid queue name>";

          const queueClient = queueServiceClient.getQueueClient(queueName);

          const peekMessagesResponse = await queueClient.peekMessages();

          console.log(`The peeked message is:
          ${peekMessagesResponse.peekedMessageItems[0].messageText}`);

          ```
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.QueuePeekMessagesResponse"
          />&gt;
  - name: receiveMessages(QueueReceiveMessageOptions)
    uid: '@azure/storage-queue.QueueClient.receiveMessages'
    package: '@azure/storage-queue'
    summary: >-
      receiveMessages retrieves one or more messages from the front of the
      queue.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-messages
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveMessages(options?: QueueReceiveMessageOptions):
        Promise<QueueReceiveMessageResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.QueueReceiveMessageOptions" />
          description: Options to receive messages operation.
      return:
        description: |-
          Response data for the receive messages operation.

          Example usage:

          ```ts snippet:ReadmeSampleReceiveMessage
          import { QueueServiceClient } from "@azure/storage-queue";
          import { DefaultAzureCredential } from "@azure/identity";

          const account = "<account>";
          const queueServiceClient = new QueueServiceClient(
            `https://${account}.queue.core.windows.net`,
            new DefaultAzureCredential(),
          );

          const queueName = "<valid queue name>";
          const queueClient = queueServiceClient.getQueueClient(queueName);
          const response = await queueClient.receiveMessages();
          if (response.receivedMessageItems.length === 1) {
            const receivedMessageItem = response.receivedMessageItems[0];
            console.log(`Processing & deleting message with content: ${receivedMessageItem.messageText}`);
            const deleteMessageResponse = await queueClient.deleteMessage(
              receivedMessageItem.messageId,
              receivedMessageItem.popReceipt,
            );
            console.log(
              `Delete message successfully, service assigned request Id: ${deleteMessageResponse.requestId}`,
            );
          }
          ```
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueReceiveMessageResponse" />&gt;
  - name: sendMessage(string, QueueSendMessageOptions)
    uid: '@azure/storage-queue.QueueClient.sendMessage'
    package: '@azure/storage-queue'
    summary: >-
      sendMessage adds a new message to the back of a queue. The visibility
      timeout specifies how long

      the message should be invisible to Dequeue and Peek operations.

      The message content is up to 64KB in size, and must be in a format that
      can be included in an XML request with UTF-8 encoding.

      To include markup in the message, the contents of the message must either
      be XML-escaped or Base64-encode.


      See https://learn.microsoft.com/en-us/rest/api/storageservices/put-message
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendMessage(messageText: string, options?:
        QueueSendMessageOptions): Promise<QueueSendMessageResponse>
      parameters:
        - id: messageText
          type: string
          description: Text of the message to send
        - id: options
          type: <xref uid="@azure/storage-queue.QueueSendMessageOptions" />
          description: Options to send messages operation.
      return:
        description: >-
          Response data for the send messages operation.


          Example usage:


          ```ts snippet:ReadmeSampleSendMessage

          import { QueueServiceClient } from "@azure/storage-queue";

          import { DefaultAzureCredential } from "@azure/identity";


          const account = "<account>";

          const queueServiceClient = new QueueServiceClient(
            `https://${account}.queue.core.windows.net`,
            new DefaultAzureCredential(),
          );


          const queueName = "<valid queue name>";

          const queueClient = queueServiceClient.getQueueClient(queueName);

          // Send a message into the queue using the sendMessage method.

          const sendMessageResponse = await queueClient.sendMessage("Hello
          World!");

          console.log(
            `Sent message successfully, service assigned message Id: ${sendMessageResponse.messageId}, service assigned request Id: ${sendMessageResponse.requestId}`,
          );

          ```
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.QueueSendMessageResponse"
          />&gt;
  - name: setAccessPolicy(SignedIdentifier[], QueueSetAccessPolicyOptions)
    uid: '@azure/storage-queue.QueueClient.setAccessPolicy'
    package: '@azure/storage-queue'
    summary: >-
      Sets stored access policies for the queue that may be used with Shared
      Access Signatures.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-queue-acl
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(queueAcl?: SignedIdentifier[], options?:
        QueueSetAccessPolicyOptions): Promise<QueueSetAccessPolicyResponse>
      parameters:
        - id: queueAcl
          type: <xref uid="@azure/storage-queue.SignedIdentifier" />[]
          description: ''
        - id: options
          type: <xref uid="@azure/storage-queue.QueueSetAccessPolicyOptions" />
          description: Options to Queue set access policy operation.
      return:
        description: Response data for the Queue set access policy operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.QueueSetAccessPolicyResponse" />&gt;
  - name: setMetadata(Metadata, QueueSetMetadataOptions)
    uid: '@azure/storage-queue.QueueClient.setMetadata'
    package: '@azure/storage-queue'
    summary: >-
      Sets one or more user-defined name-value pairs for the specified queue.


      If no option provided, or no metadata defined in the option parameter, the
      queue

      metadata will be removed.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-queue-metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        QueueSetMetadataOptions): Promise<QueueSetMetadataResponse>
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-queue.Metadata" />
          description: If no metadata provided, all existing metadata will be removed.
        - id: options
          type: <xref uid="@azure/storage-queue.QueueSetMetadataOptions" />
          description: Options to Queue set metadata operation.
      return:
        description: Response data for the Queue set metadata operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.QueueSetMetadataResponse"
          />&gt;
  - name: updateMessage(string, string, string, number, QueueUpdateMessageOptions)
    uid: '@azure/storage-queue.QueueClient.updateMessage'
    package: '@azure/storage-queue'
    summary: >-
      Update changes a message's visibility timeout and contents.

      The message content is up to 64KB in size, and must be in a format that
      can be included in an XML request with UTF-8 encoding.

      To include markup in the message, the contents of the message must either
      be XML-escaped or Base64-encode.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/update-message
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateMessage(messageId: string, popReceipt: string, message?:
        string, visibilityTimeout?: number, options?:
        QueueUpdateMessageOptions): Promise<MessageIdUpdateResponse>
      parameters:
        - id: messageId
          type: string
          description: Id of the message
        - id: popReceipt
          type: string
          description: >-
            A valid pop receipt value returned from an earlier call to the
            receive messages or update message operation.
        - id: message
          type: string
          description: >-
            Message to update. If this parameter is undefined, then the content
            of the message won't be updated.
        - id: visibilityTimeout
          type: number
          description: |-
            Specifies the new visibility timeout value, in seconds,
                                              relative to server time. The new value must be larger than or equal to 0,
                                              and cannot be larger than 7 days. The visibility timeout of a message cannot
                                              be set to a value later than the expiry time.
                                              A message can be updated until it has been deleted or has expired.
        - id: options
          type: <xref uid="@azure/storage-queue.QueueUpdateMessageOptions" />
          description: Options to update message operation.
      return:
        description: Response data for the update message operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-queue.MessageIdUpdateResponse"
          />&gt;
extends: StorageClient
