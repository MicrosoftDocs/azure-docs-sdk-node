### YamlMime:TSType
name: NodeJSReadableStream
uid: '@azure/core-sse.NodeJSReadableStream'
package: '@azure/core-sse'
summary: A Node.js Readable stream that also has a `destroy` method.
fullName: NodeJSReadableStream
remarks: ''
isDeprecated: false
type: interface
inheritedProperties:
  - name: readable
    uid: '@azure/core-sse.NodeJSReadableStream.readable'
    package: '@azure/core-sse'
    summary: ''
    fullName: readable
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'readable: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.readable
inheritedMethods:
  - name: 'addListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-sse.NodeJSReadableStream.addListener'
    package: '@azure/core-sse'
    summary: Alias for `emitter.on(eventName, listener)`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): NodeJSReadableStream
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.addListener
  - name: emit<K>(string | symbol, AnyRest)
    uid: '@azure/core-sse.NodeJSReadableStream.emit'
    package: '@azure/core-sse'
    summary: >-
      Synchronously calls each of the listeners registered for the event named
      `eventName`, in the order they were registered, passing the supplied
      arguments

      to each.


      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      import { EventEmitter } from 'node:events';

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit<K>(eventName: string | symbol, args: AnyRest): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.emit
  - name: eventNames()
    uid: '@azure/core-sse.NodeJSReadableStream.eventNames'
    package: '@azure/core-sse'
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.

      ```js
      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function eventNames(): (string | symbol)[]'
      return:
        description: ''
        type: (string | symbol)[]
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.eventNames
  - name: getMaxListeners()
    uid: '@azure/core-sse.NodeJSReadableStream.getMaxListeners'
    package: '@azure/core-sse'
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:EventEmitter.defaultMaxListeners>.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.getMaxListeners
  - name: isPaused()
    uid: '@azure/core-sse.NodeJSReadableStream.isPaused'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function isPaused(): boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.isPaused
  - name: listenerCount<K>(string | symbol, Function)
    uid: '@azure/core-sse.NodeJSReadableStream.listenerCount'
    package: '@azure/core-sse'
    summary: >-
      Returns the number of listeners listening for the event named `eventName`.

      If `listener` is provided, it will return how many times the listener is
      found

      in the list of the listeners of the event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listenerCount<K>(eventName: string | symbol, listener?:
        Function): number
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event being listened for
        - id: listener
          type: Function
          description: The event handler function
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.listenerCount
  - name: listeners<K>(string | symbol)
    uid: '@azure/core-sse.NodeJSReadableStream.listeners'
    package: '@azure/core-sse'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.

      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function listeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.listeners
  - name: 'off<K>(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-sse.NodeJSReadableStream.off'
    package: '@azure/core-sse'
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): NodeJSReadableStream
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.off
  - name: 'on<K>(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-sse.NodeJSReadableStream.on'
    package: '@azure/core-sse'
    summary: >-
      Adds the `listener` function to the end of the listeners array for the
      event

      named `eventName`. No checks are made to see if the `listener` has already

      been added. Multiple calls passing the same combination of `eventName` and

      `listener` will result in the `listener` being added, and called, multiple
      times.


      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added. The
      `emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): NodeJSReadableStream
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.on
  - name: 'once<K>(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-sse.NodeJSReadableStream.once'
    package: '@azure/core-sse'
    summary: >-
      Adds a **one-time** `listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.


      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added. The
      `emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      import { EventEmitter } from 'node:events';

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function once<K>(eventName: string | symbol, listener: (args: any[]) =>
        void): NodeJSReadableStream
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.once
  - name: pause()
    uid: '@azure/core-sse.NodeJSReadableStream.pause'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function pause(): NodeJSReadableStream'
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.pause
  - name: 'pipe<T>(T, { end?: boolean })'
    uid: '@azure/core-sse.NodeJSReadableStream.pipe'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function pipe<T>(destination: T, options?: { end?: boolean }): T'
      parameters:
        - id: destination
          type: T
          description: ''
        - id: options
          type: '{ end?: boolean }'
          description: ''
      return:
        description: ''
        type: T
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.pipe
  - name: 'prependListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-sse.NodeJSReadableStream.prependListener'
    package: '@azure/core-sse'
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`

      and `listener` will result in the `listener` being added, and called,
      multiple times.


      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): NodeJSReadableStream
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.prependListener
  - name: 'prependOnceListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-sse.NodeJSReadableStream.prependOnceListener'
    package: '@azure/core-sse'
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.


      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener<K>(eventName: string | symbol, listener:
        (args: any[]) => void): NodeJSReadableStream
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: The callback function
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.prependOnceListener
  - name: rawListeners<K>(string | symbol)
    uid: '@azure/core-sse.NodeJSReadableStream.rawListeners'
    package: '@azure/core-sse'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).

      ```js
      import { EventEmitter } from 'node:events';
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rawListeners<K>(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: Function[]
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.rawListeners
  - name: read(number)
    uid: '@azure/core-sse.NodeJSReadableStream.read'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function read(size?: number): string | Buffer'
      parameters:
        - id: size
          type: number
          description: ''
      return:
        description: ''
        type: string | Buffer
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.read
  - name: removeAllListeners(string | symbol)
    uid: '@azure/core-sse.NodeJSReadableStream.removeAllListeners'
    package: '@azure/core-sse'
    summary: |-
      Removes all listeners, or those of the specified `eventName`.

      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeAllListeners(eventName?: string | symbol):
        NodeJSReadableStream
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.removeAllListeners
  - name: 'removeListener<K>(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-sse.NodeJSReadableStream.removeListener'
    package: '@azure/core-sse'
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named `eventName`.


      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that any
      `removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      import { EventEmitter } from 'node:events';

      class MyEmitter extends EventEmitter {}

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')` listener is
      removed:


      ```js

      import { EventEmitter } from 'node:events';

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeListener<K>(eventName: string | symbol, listener: (args:
        any[]) => void): NodeJSReadableStream
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.removeListener
  - name: resume()
    uid: '@azure/core-sse.NodeJSReadableStream.resume'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function resume(): NodeJSReadableStream'
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.resume
  - name: setEncoding(BufferEncoding)
    uid: '@azure/core-sse.NodeJSReadableStream.setEncoding'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setEncoding(encoding: BufferEncoding): NodeJSReadableStream'
      parameters:
        - id: encoding
          type: BufferEncoding
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.setEncoding
  - name: setMaxListeners(number)
    uid: '@azure/core-sse.NodeJSReadableStream.setMaxListeners'
    package: '@azure/core-sse'
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to `Infinity` (or `0`) to indicate an unlimited number of listeners.


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): NodeJSReadableStream'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.setMaxListeners
  - name: unpipe(WritableStream)
    uid: '@azure/core-sse.NodeJSReadableStream.unpipe'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function unpipe(destination?: WritableStream): NodeJSReadableStream'
      parameters:
        - id: destination
          type: WritableStream
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.unpipe
  - name: unshift(string | Uint8Array, BufferEncoding)
    uid: '@azure/core-sse.NodeJSReadableStream.unshift'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function unshift(chunk: string | Uint8Array, encoding?: BufferEncoding)'
      parameters:
        - id: chunk
          type: string | Uint8Array
          description: ''
        - id: encoding
          type: BufferEncoding
          description: ''
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.unshift
  - name: wrap(ReadableStream)
    uid: '@azure/core-sse.NodeJSReadableStream.wrap'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function wrap(oldStream: ReadableStream): NodeJSReadableStream'
      parameters:
        - id: oldStream
          type: ReadableStream
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/core-sse.NodeJSReadableStream" />
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.wrap
  - name: '[asyncIterator]()'
    uid: '@azure/core-sse.NodeJSReadableStream.[asyncIterator]'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function [asyncIterator](): AsyncIterator<string | Buffer, any, any>'
      return:
        description: ''
        type: AsyncIterator&lt;string | Buffer, any, any&gt;
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.__@asyncIterator@52
  - name: '[captureRejectionSymbol]<K>(Error, string | symbol, AnyRest)'
    uid: '@azure/core-sse.NodeJSReadableStream.[captureRejectionSymbol]'
    package: '@azure/core-sse'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function [captureRejectionSymbol]<K>(error: Error, event: string |
        symbol, args: AnyRest)
      parameters:
        - id: error
          type: Error
          description: ''
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: AnyRest
          description: ''
    inheritanceDescription: <b>Inherited From</b> NodeJS.ReadableStream.__@captureRejectionSymbol@103
methods:
  - name: destroy(Error)
    uid: '@azure/core-sse.NodeJSReadableStream.destroy'
    package: '@azure/core-sse'
    summary: |-
      Destroy the stream. Optionally emit an 'error' event, and emit a
      'close' event (unless emitClose is set to false). After this call,
      internal resources will be released.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function destroy(error?: Error)'
      parameters:
        - id: error
          type: Error
          description: ''
extends: ReadableStream
