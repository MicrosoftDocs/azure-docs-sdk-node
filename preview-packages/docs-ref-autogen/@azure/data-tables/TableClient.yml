### YamlMime:TSType
name: TableClient
uid: '@azure/data-tables.TableClient'
package: '@azure/data-tables'
summary: |-
  A TableClient represents a Client to the Azure Tables service allowing you
  to perform operations on a single table.
fullName: TableClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: TableClient(string, string, NamedKeyCredential, TableServiceClientOptions)
    uid: '@azure/data-tables.TableClient.constructor'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TableClient(url: string, tableName: string, credential:
        NamedKeyCredential, options?: TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation, such as "https://myaccount.table.core.windows.net".
        - id: tableName
          type: string
          description: the name of the table
        - id: credential
          type: <xref uid="@azure/data-tables.NamedKeyCredential" />
          description: >-
            NamedKeyCredential used to authenticate requests. Only Supported for
            Node
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: >-
            Optional. Options to configure the HTTP pipeline.



            ### Example using an account name/key:


            ```ts snippet:ReadmeSampleCreateTableClient_NamedKeyCredential

            import { AzureNamedKeyCredential, TableClient } from
            "@azure/data-tables";


            // Enter your storage account name and shared key

            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            // Use AzureNamedKeyCredential with storage account and account key

            // AzureNamedKeyCredential is only available in Node.js runtime, not
            in browsers

            const credential = new AzureNamedKeyCredential(account, accountKey);

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);

            ```
  - name: TableClient(string, string, SASCredential, TableServiceClientOptions)
    uid: '@azure/data-tables.TableClient.constructor_1'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TableClient(url: string, tableName: string, credential:
        SASCredential, options?: TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation, such as "https://myaccount.table.core.windows.net".
        - id: tableName
          type: string
          description: the name of the table
        - id: credential
          type: <xref uid="@azure/core-auth.SASCredential" />
          description: SASCredential used to authenticate requests
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: >-
            Optional. Options to configure the HTTP pipeline.



            ### Example using a SAS Token:


            ```ts snippet:ReadmeSampleCreateTableClient_SASToken

            import { TableClient, AzureSASCredential } from
            "@azure/data-tables";


            const account = "<account name>";

            const sas = "<service Shared Access Signature Token>";

            const tableName = "<tableName>";


            const clientWithSAS = new TableClient(
              `https://${account}.table.core.windows.net`,
              tableName,
              new AzureSASCredential(sas),
            );

            ```
  - name: TableClient(string, string, TableServiceClientOptions)
    uid: '@azure/data-tables.TableClient.constructor_3'
    package: '@azure/data-tables'
    summary: Creates an instance of TableClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TableClient(url: string, tableName: string, options?:
        TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage table service, such as
                         "https://myaccount.table.core.windows.net". You can append a SAS,
                         such as "https://myaccount.table.core.windows.net?sasString".
        - id: tableName
          type: string
          description: the name of the table
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: |-
            Options to configure the HTTP pipeline.

            ### Example appending a SAS token:

            ```ts snippet:ReadmeSampleCreateTableClient_SASTokenURL
            import { TableClient } from "@azure/data-tables";

            const account = "<account name>";
            const sasToken = "<SAS token>";
            const tableName = "<tableName>";

            const clientWithSAS = new TableClient(
              `https://${account}.table.core.windows.net?${sasToken}`,
              tableName,
            );
            ```
  - name: TableClient(string, string, TokenCredential, TableServiceClientOptions)
    uid: '@azure/data-tables.TableClient.constructor_2'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TableClient(url: string, tableName: string, credential:
        TokenCredential, options?: TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation, such as "https://myaccount.table.core.windows.net".
        - id: tableName
          type: string
          description: the name of the table
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: Azure Active Directory credential used to authenticate requests
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: |-
            Optional. Options to configure the HTTP pipeline.


            ### Example using an Azure Active Directory credential:

            ```ts snippet:ReadmeSampleCreateTableClient_TokenCredential
            import { DefaultAzureCredential } from "@azure/identity";
            import { TableClient } from "@azure/data-tables";

            const credential = new DefaultAzureCredential();
            const account = "<account name>";
            const tableName = "<tableName>";

            const clientWithAAD = new TableClient(
              `https://${account}.table.core.windows.net`,
              tableName,
              credential,
            );
            ```
properties:
  - name: pipeline
    uid: '@azure/data-tables.TableClient.pipeline'
    package: '@azure/data-tables'
    summary: >-
      Represents a pipeline for making a HTTP request to a URL.

      Pipelines can have multiple policies to manage manipulating each request
      before and after it is made to the server.
    fullName: pipeline
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'pipeline: Pipeline'
      return:
        description: ''
        type: <xref uid="@azure/core-rest-pipeline.Pipeline" />
  - name: tableName
    uid: '@azure/data-tables.TableClient.tableName'
    package: '@azure/data-tables'
    summary: Name of the table to perform operations on.
    fullName: tableName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'tableName: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/data-tables.TableClient.url'
    package: '@azure/data-tables'
    summary: Table Account URL
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
methods:
  - name: createEntity<T>(TableEntity<T>, OperationOptions)
    uid: '@azure/data-tables.TableClient.createEntity'
    package: '@azure/data-tables'
    summary: Insert entity in the table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createEntity<T>(entity: TableEntity<T>, options?:
        OperationOptions): Promise<TableInsertEntityHeaders>
      parameters:
        - id: entity
          type: <xref uid="@azure/data-tables.TableEntity" />&lt;T&gt;
          description: The properties for the table entity.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: >-
            The options parameters.


            ### Example creating an entity

            ```ts snippet:ReadmeSampleCreateEntity

            import { DefaultAzureCredential } from "@azure/identity";

            import { TableClient } from "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            const credential = new DefaultAzureCredential();

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);


            const testEntity = {
              partitionKey: "P1",
              rowKey: "R1",
              foo: "foo",
              bar: 123,
            };

            await client.createEntity(testEntity);

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.TableInsertEntityHeaders"
          />&gt;
  - name: createTable(OperationOptions)
    uid: '@azure/data-tables.TableClient.createTable'
    package: '@azure/data-tables'
    summary: Creates a table with the tableName passed to the client constructor
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createTable(options?: OperationOptions): Promise<void>'
      parameters:
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: >-
            The options parameters.


            ### Example creating a table

            ```ts snippet:ReadmeSampleTableClientCreateTable

            import { DefaultAzureCredential } from "@azure/identity";

            import { TableClient } from "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            const credential = new DefaultAzureCredential();

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);


            // If the table 'newTable' already exists, createTable doesn't throw

            await client.createTable();

            ```
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: deleteEntity(string, string, DeleteTableEntityOptions)
    uid: '@azure/data-tables.TableClient.deleteEntity'
    package: '@azure/data-tables'
    summary: Deletes the specified entity in the table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteEntity(partitionKey: string, rowKey: string, options?:
        DeleteTableEntityOptions): Promise<TableDeleteEntityHeaders>
      parameters:
        - id: partitionKey
          type: string
          description: The partition key of the entity.
        - id: rowKey
          type: string
          description: The row key of the entity.
        - id: options
          type: <xref uid="@azure/data-tables.DeleteTableEntityOptions" />
          description: >-
            The options parameters.


            ### Example deleting an entity

            ```ts snippet:ReadmeSampleDeleteEntity

            import { DefaultAzureCredential } from "@azure/identity";

            import { TableClient } from "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            const credential = new DefaultAzureCredential();

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);


            // deleteEntity deletes the entity that matches exactly the
            partitionKey and rowKey

            await client.deleteEntity("<partitionKey>", "<rowKey>");

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.TableDeleteEntityHeaders"
          />&gt;
  - name: deleteTable(OperationOptions)
    uid: '@azure/data-tables.TableClient.deleteTable'
    package: '@azure/data-tables'
    summary: Permanently deletes the current table with all of its entities.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deleteTable(options?: OperationOptions): Promise<void>'
      parameters:
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: >-
            The options parameters.


            ### Example deleting a table

            ```ts snippet:ReadmeSampleDeleteTable

            import { DefaultAzureCredential } from "@azure/identity";

            import { TableClient } from "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            const credential = new DefaultAzureCredential();

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);


            await client.deleteTable();

            ```
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: fromConnectionString(string, string, TableServiceClientOptions)
    uid: '@azure/data-tables.TableClient.fromConnectionString'
    package: '@azure/data-tables'
    summary: Creates an instance of TableClient from connection string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string,
        tableName: string, options?: TableServiceClientOptions): TableClient
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                      [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                      Account connection string example -
                                      `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                      SAS connection string example -
                                      `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: tableName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: Options to configure the HTTP pipeline.
      return:
        description: A new TableClient from the given connection string.
        type: <xref uid="@azure/data-tables.TableClient" />
  - name: getAccessPolicy(OperationOptions)
    uid: '@azure/data-tables.TableClient.getAccessPolicy'
    package: '@azure/data-tables'
    summary: >-
      Retrieves details about any stored access policies specified on the table
      that may be used with

      Shared Access Signatures.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccessPolicy(options?: OperationOptions):
        Promise<GetAccessPolicyResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.GetAccessPolicyResponse"
          />&gt;
  - name: getEntity<T>(string, string, GetTableEntityOptions)
    uid: '@azure/data-tables.TableClient.getEntity'
    package: '@azure/data-tables'
    summary: Returns a single entity in the table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getEntity<T>(partitionKey: string, rowKey: string, options?:
        GetTableEntityOptions):
        Promise<GetTableEntityResponse<TableEntityResult<T>>>
      parameters:
        - id: partitionKey
          type: string
          description: The partition key of the entity.
        - id: rowKey
          type: string
          description: The row key of the entity.
        - id: options
          type: <xref uid="@azure/data-tables.GetTableEntityOptions" />
          description: >-
            The options parameters.


            ### Example getting an entity

            ```ts snippet:ReadmeSampleGetEntity

            import { DefaultAzureCredential } from "@azure/identity";

            import { TableClient } from "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            const credential = new DefaultAzureCredential();

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);


            const entity = await client.getEntity("<partitionKey>", "<rowKey>");

            console.log(`Entity: PartitionKey: ${entity.partitionKey} RowKey:
            ${entity.rowKey}`);

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.GetTableEntityResponse"
          />&lt;<xref uid="@azure/data-tables.TableEntityResult"
          />&lt;T&gt;&gt;&gt;
  - name: listEntities<T>(ListTableEntitiesOptions)
    uid: '@azure/data-tables.TableClient.listEntities'
    package: '@azure/data-tables'
    summary: Queries entities in a table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listEntities<T>(options?: ListTableEntitiesOptions):
        PagedAsyncIterableIterator<TableEntityResult<T>,
        TableEntityResultPage<T>, PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/data-tables.ListTableEntitiesOptions" />
          description: >-
            The options parameters.


            Example listing entities

            ```ts snippet:ReadmeSampleListEntities

            import { DefaultAzureCredential } from "@azure/identity";

            import { TableClient } from "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            const credential = new DefaultAzureCredential();

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);


            let i = 0;

            const entities = client.listEntities();

            for await (const entity of entities) {
              console.log(`Entity${++i}: PartitionKey: ${entity.partitionKey} RowKey: ${entity.rowKey}`);
            }

            ```
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/data-tables.TableEntityResult" />&lt;T&gt;, <xref
          uid="@azure/data-tables.TableEntityResultPage" />&lt;T&gt;, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: setAccessPolicy(SignedIdentifier[], OperationOptions)
    uid: '@azure/data-tables.TableClient.setAccessPolicy'
    package: '@azure/data-tables'
    summary: >-
      Sets stored access policies for the table that may be used with Shared
      Access Signatures.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(tableAcl: SignedIdentifier[], options?:
        OperationOptions): Promise<TableSetAccessPolicyHeaders>
      parameters:
        - id: tableAcl
          type: <xref uid="@azure/data-tables.SignedIdentifier" />[]
          description: The Access Control List for the table.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.TableSetAccessPolicyHeaders"
          />&gt;
  - name: submitTransaction(TransactionAction[], OperationOptions)
    uid: '@azure/data-tables.TableClient.submitTransaction'
    package: '@azure/data-tables'
    summary: >-
      Submits a Transaction which is composed of a set of actions. You can
      provide the actions as a list

      or you can use
      [TableTransaction](xref:@azure/data-tables.TableTransaction) to help
      building the transaction.


      Example usage:

      ```ts snippet:ReadmeSampleSubmitTransaction

      import { DefaultAzureCredential } from "@azure/identity";

      import { TableClient, TransactionAction } from "@azure/data-tables";


      const account = "<account>";

      const accountKey = "<accountkey>";

      const tableName = "<tableName>";


      const credential = new DefaultAzureCredential();

      const client = new
      TableClient(`https://${account}.table.core.windows.net`, tableName,
      credential);


      const actions: TransactionAction[] = [
        ["create", { partitionKey: "p1", rowKey: "1", data: "test1" }],
        ["delete", { partitionKey: "p1", rowKey: "2" }],
        ["update", { partitionKey: "p1", rowKey: "3", data: "newTest" }, "Merge"],
      ];

      const result = await client.submitTransaction(actions);

      ```


      Example usage with TableTransaction:

      ```ts snippet:ReadmeSampleSubmitTransactionWithTableTransaction

      import { DefaultAzureCredential } from "@azure/identity";

      import { TableClient, TableTransaction } from "@azure/data-tables";


      const account = "<account>";

      const accountKey = "<accountkey>";

      const tableName = "<tableName>";


      const credential = new DefaultAzureCredential();

      const client = new
      TableClient(`https://${account}.table.core.windows.net`, tableName,
      credential);


      const transaction = new TableTransaction();


      // Call the available action in the TableTransaction object

      transaction.createEntity({ partitionKey: "p1", rowKey: "1", data: "test1"
      });

      transaction.deleteEntity("p1", "2");

      transaction.updateEntity({ partitionKey: "p1", rowKey: "3", data:
      "newTest" }, "Merge");


      // submitTransaction with the actions list on the transaction.

      const result = await client.submitTransaction(transaction.actions);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function submitTransaction(actions: TransactionAction[], options?:
        OperationOptions): Promise<TableTransactionResponse>
      parameters:
        - id: actions
          type: <xref uid="@azure/data-tables.TransactionAction" />[]
          description: >-
            tuple that contains the action to perform, and the entity to perform
            the action with
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: Options for the request.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.TableTransactionResponse"
          />&gt;
  - name: updateEntity<T>(TableEntity<T>, UpdateMode, UpdateTableEntityOptions)
    uid: '@azure/data-tables.TableClient.updateEntity'
    package: '@azure/data-tables'
    summary: Update an entity in the table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateEntity<T>(entity: TableEntity<T>, mode?: UpdateMode,
        options?: UpdateTableEntityOptions): Promise<TableUpdateEntityHeaders>
      parameters:
        - id: entity
          type: <xref uid="@azure/data-tables.TableEntity" />&lt;T&gt;
          description: The properties of the entity to be updated.
        - id: mode
          type: <xref uid="@azure/data-tables.UpdateMode" />
          description: |-
            The different modes for updating the entity:
                          - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
                          - Replace: Updates an existing entity by replacing the entire entity.
        - id: options
          type: <xref uid="@azure/data-tables.UpdateTableEntityOptions" />
          description: >-
            The options parameters.


            ### Example updating an entity

            ```ts snippet:ReadmeSampleUpdateEntity

            import { DefaultAzureCredential } from "@azure/identity";

            import { TableClient } from "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            const credential = new DefaultAzureCredential();

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);


            const entity = { partitionKey: "p1", rowKey: "r1", bar: "updatedBar"
            };


            // Update uses update mode "Merge" as default

            // merge means that update will match a stored entity

            // that has the same partitionKey and rowKey as the entity

            // passed to the method and then will only update the properties
            present in it.

            // Any other properties that are not defined in the entity passed to
            updateEntity

            // will remain as they are in the service

            await client.updateEntity(entity);


            // We can also set the update mode to Replace, which will match the
            entity passed

            // to updateEntity with one stored in the service and replace with
            the new one.

            // If there are any missing properties in the entity passed to
            updateEntity, they

            // will be removed from the entity stored in the service

            await client.updateEntity(entity, "Replace");

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.TableUpdateEntityHeaders"
          />&gt;
  - name: upsertEntity<T>(TableEntity<T>, UpdateMode, OperationOptions)
    uid: '@azure/data-tables.TableClient.upsertEntity'
    package: '@azure/data-tables'
    summary: Upsert an entity in the table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsertEntity<T>(entity: TableEntity<T>, mode?: UpdateMode,
        options?: OperationOptions): Promise<TableMergeEntityHeaders>
      parameters:
        - id: entity
          type: <xref uid="@azure/data-tables.TableEntity" />&lt;T&gt;
          description: The properties for the table entity.
        - id: mode
          type: <xref uid="@azure/data-tables.UpdateMode" />
          description: |-
            The different modes for updating the entity:
                          - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
                          - Replace: Updates an existing entity by replacing the entire entity.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: >-
            The options parameters.


            ### Example upserting an entity

            ```ts snippet:ReadmeSampleUpsertEntity

            import { DefaultAzureCredential } from "@azure/identity";

            import { TableClient } from "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";

            const tableName = "<tableName>";


            const credential = new DefaultAzureCredential();

            const client = new
            TableClient(`https://${account}.table.core.windows.net`, tableName,
            credential);


            const entity = { partitionKey: "p1", rowKey: "r1", bar: "updatedBar"
            };


            // Upsert uses update mode "Merge" as default.

            // This behaves similarly to update but creates the entity

            // if it doesn't exist in the service

            await client.upsertEntity(entity);


            // We can also set the update mode to Replace.

            // This behaves similarly to update but creates the entity

            // if it doesn't exist in the service

            await client.upsertEntity(entity, "Replace");

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.TableMergeEntityHeaders"
          />&gt;
