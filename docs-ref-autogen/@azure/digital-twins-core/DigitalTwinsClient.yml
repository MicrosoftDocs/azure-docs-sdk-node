### YamlMime:TSType
name: DigitalTwinsClient
uid: '@azure/digital-twins-core.DigitalTwinsClient'
package: '@azure/digital-twins-core'
summary: Client for Azure IoT DigitalTwins API.
fullName: DigitalTwinsClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: DigitalTwinsClient(string, TokenCredential, DigitalTwinsClientOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.constructor'
    package: '@azure/digital-twins-core'
    summary: |-
      Creates an instance of AzureDigitalTwinsAPI.

      Example usage:
      ```ts snippet:ReadmeSampleCreateClient_Node
      import { DefaultAzureCredential } from "@azure/identity";
      import { DigitalTwinsClient } from "@azure/digital-twins-core";

      const url = "<URL to Azure Digital Twins instance>";
      const credential = new DefaultAzureCredential();
      const serviceClient = new DigitalTwinsClient(url, credential);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new DigitalTwinsClient(endpointUrl: string, credential: TokenCredential,
        options?: DigitalTwinsClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: The endpoint URL of the service.
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: Used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/digital-twins-core.DigitalTwinsClientOptions" />
          description: Used to configure the service client.
methods:
  - name: createModels(Record<string, unknown>[], OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.createModels'
    package: '@azure/digital-twins-core'
    summary: Create one or many
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createModels(dtdlModels: Record<string, unknown>[], options?:
        OperationOptions): Promise<DigitalTwinModelsAddResponse>
      parameters:
        - id: dtdlModels
          type: Record&lt;string, unknown&gt;[]
          description: >-
            The set of models to create. Each string corresponds to exactly one
            model.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: The created application/json models.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinModelsAddResponse" />&gt;
  - name: decomissionModel(string, OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.decomissionModel'
    package: '@azure/digital-twins-core'
    summary: >-
      Decommission a model using a json patch.

      When a model is decommissioned, new digital twins will no longer be able
      to be

      defined by this model. However, existing digital twins may continue to use
      this model.

      Once a model is decommissioned, it may not be recommissioned.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function decomissionModel(modelId: string, options?: OperationOptions):
        Promise<void>
      parameters:
        - id: modelId
          type: string
          description: |-
            The Id of the model to decommission.
            property can be replaced.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: deleteDigitalTwin(string, DigitalTwinsDeleteOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.deleteDigitalTwin'
    package: '@azure/digital-twins-core'
    summary: Delete a digital twin
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDigitalTwin(digitalTwinId: string, options?:
        DigitalTwinsDeleteOptionalParams): Promise<void>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsDeleteOptionalParams" />
          description: |-
            Extended operation options including
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: deleteEventRoute(string, OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.deleteEventRoute'
    package: '@azure/digital-twins-core'
    summary: Delete an event route.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteEventRoute(eventRouteId: string, options?:
        OperationOptions): Promise<void>
      parameters:
        - id: eventRouteId
          type: string
          description: The Id of the eventRoute to delete.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: deleteModel(string, OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.deleteModel'
    package: '@azure/digital-twins-core'
    summary: Delete a model.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteModel(modelId: string, options?: OperationOptions):
        Promise<void>
      parameters:
        - id: modelId
          type: string
          description: The Id of the model to delete.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      deleteRelationship(string, string,
      DigitalTwinsDeleteRelationshipOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.deleteRelationship'
    package: '@azure/digital-twins-core'
    summary: Delete a relationship on a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteRelationship(digitalTwinId: string, relationshipId:
        string, options?: DigitalTwinsDeleteRelationshipOptionalParams):
        Promise<void>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsDeleteRelationshipOptionalParams"
            />
          description: |-
            The operation options
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: getComponent(string, string, OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getComponent'
    package: '@azure/digital-twins-core'
    summary: Get a component on a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComponent(digitalTwinId: string, componentName: string,
        options?: OperationOptions): Promise<DigitalTwinsGetComponentResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: componentName
          type: string
          description: The component being retrieved.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: >-
          Json string representation of the component corresponding to the
          provided componentName.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsGetComponentResponse"
          />&gt;
  - name: getDigitalTwin(string, OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getDigitalTwin'
    package: '@azure/digital-twins-core'
    summary: Get a digital twin
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDigitalTwin(digitalTwinId: string, options?:
        OperationOptions): Promise<DigitalTwinsGetByIdResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: The application/json digital twin.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsGetByIdResponse" />&gt;
  - name: getEventRoute(string, OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getEventRoute'
    package: '@azure/digital-twins-core'
    summary: Get an event route.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getEventRoute(eventRouteId: string, options?:
        OperationOptions): Promise<EventRoute>
      parameters:
        - id: eventRouteId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: The application/json event route.
        type: Promise&lt;<xref uid="@azure/digital-twins-core.EventRoute" />&gt;
  - name: getModel(string, DigitalTwinModelsGetByIdOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getModel'
    package: '@azure/digital-twins-core'
    summary: Get a model, including the model metadata and the model definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getModel(modelId: string, options?:
        DigitalTwinModelsGetByIdOptionalParams): Promise<DigitalTwinsModelData>
      parameters:
        - id: modelId
          type: string
          description: The Id of the model.
        - id: options
          type: <xref uid="@azure/digital-twins-core.GetModelOptions" />
          description: Options for this operation
      return:
        description: The application/json model.
        type: >-
          Promise&lt;<xref uid="@azure/digital-twins-core.DigitalTwinsModelData"
          />&gt;
  - name: getRelationship(string, string, OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.getRelationship'
    package: '@azure/digital-twins-core'
    summary: Get a relationship on a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRelationship(digitalTwinId: string, relationshipId: string,
        options?: OperationOptions):
        Promise<DigitalTwinsGetRelationshipByIdResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to retrieve.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: >-
          The pageable list of application/json relationships belonging to the
          specified digital twin.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsGetRelationshipByIdResponse"
          />&gt;
  - name: listEventRoutes(EventRoutesListOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.listEventRoutes'
    package: '@azure/digital-twins-core'
    summary: List the event routes in a digital twins instance.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listEventRoutes(options?: EventRoutesListOptionalParams):
        PagedAsyncIterableIterator<EventRoute, EventRoute[], PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/digital-twins-core.ListEventRoutesOptions" />
          description: Options for listEventRoutes.
      return:
        description: The application/json event route.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/digital-twins-core.EventRoute" />, <xref
          uid="@azure/digital-twins-core.EventRoute" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listIncomingRelationships(string,
      DigitalTwinsListIncomingRelationshipsOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.listIncomingRelationships'
    package: '@azure/digital-twins-core'
    summary: Retrieve all incoming relationships for a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listIncomingRelationships(digitalTwinId: string, options?:
        DigitalTwinsListIncomingRelationshipsOptionalParams):
        PagedAsyncIterableIterator<IncomingRelationship, IncomingRelationship[],
        PageSettings>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.ListIncomingRelationshipsOptions" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/digital-twins-core.IncomingRelationship" />, <xref
          uid="@azure/digital-twins-core.IncomingRelationship" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listModels(DigitalTwinModelsListOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.listModels'
    package: '@azure/digital-twins-core'
    summary: Get the list of models
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listModels(options?: DigitalTwinModelsListOptionalParams):
        PagedAsyncIterableIterator<DigitalTwinsModelData,
        DigitalTwinsModelData[], PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/digital-twins-core.ListModelsOptions" />
          description: Options for listing models.
      return:
        description: A pageable set of application/json models.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsModelData" />, <xref
          uid="@azure/digital-twins-core.DigitalTwinsModelData" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listRelationships(string, DigitalTwinsListRelationshipsOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.listRelationships'
    package: '@azure/digital-twins-core'
    summary: Retrieve relationships for a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRelationships(digitalTwinId: string, options?:
        DigitalTwinsListRelationshipsOptionalParams):
        PagedAsyncIterableIterator<Record<string, unknown>, Record<string,
        unknown>[], PageSettings>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: options
          type: <xref uid="@azure/digital-twins-core.ListRelationshipsOptions" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator"
          />&lt;Record&lt;string, unknown&gt;, Record&lt;string, unknown&gt;[],
          <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      publishComponentTelemetry(string, string, Record<string, unknown>, string,
      OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.publishComponentTelemetry'
    package: '@azure/digital-twins-core'
    summary: >-
      Publish telemetry from a digital twin's component, which is then consumed
      by one or many destination endpoints (subscribers) defined under.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function publishComponentTelemetry(digitalTwinId: string, componentName:
        string, payload: Record<string, unknown>, messageId: string, options?:
        OperationOptions): Promise<void>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: componentName
          type: string
          description: The name of the DTDL component.
        - id: payload
          type: Record&lt;string, unknown&gt;
          description: The application/json telemetry payload to be sent.
        - id: messageId
          type: string
          description: The message Id.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      publishTelemetry(string, Record<string, unknown>, string,
      OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.publishTelemetry'
    package: '@azure/digital-twins-core'
    summary: >-
      Publish telemetry from a digital twin, which is then consumed by one or
      many destination endpoints (subscribers) defined under.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function publishTelemetry(digitalTwinId: string, payload: Record<string,
        unknown>, messageId: string, options?: OperationOptions): Promise<void>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: payload
          type: Record&lt;string, unknown&gt;
          description: The application/json telemetry payload to be sent.
        - id: messageId
          type: string
          description: The message Id.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: queryTwins(string, QueryQueryTwinsOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.queryTwins'
    package: '@azure/digital-twins-core'
    summary: Query for digital twins.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function queryTwins(query: string, options?:
        QueryQueryTwinsOptionalParams):
        PagedAsyncIterableIterator<Record<string, unknown>,
        QueryQueryTwinsResponse, PageSettings>
      parameters:
        - id: query
          type: string
          description: The query string, in SQL-like syntax.
        - id: options
          type: <xref uid="@azure/digital-twins-core.QueryTwinsOptions" />
          description: Options for the query operation.
      return:
        description: The pageable list of query results.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator"
          />&lt;Record&lt;string, unknown&gt;, <xref
          uid="@azure/digital-twins-core.QueryQueryTwinsResponse" />, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      updateComponent(string, string, Record<string, unknown>[],
      DigitalTwinsUpdateComponentOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.updateComponent'
    package: '@azure/digital-twins-core'
    summary: Update properties of a component on a digital twin using a JSON patch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateComponent(digitalTwinId: string, componentName: string,
        jsonPatch: Record<string, unknown>[], options?:
        DigitalTwinsUpdateComponentOptionalParams):
        Promise<DigitalTwinsUpdateComponentHeaders>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: componentName
          type: string
          description: The component being updated.
        - id: jsonPatch
          type: Record&lt;string, unknown&gt;[]
          description: >-
            The application/json-patch+json operations to be performed on the
            specified digital twin's component.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsUpdateComponentOptionalParams"
            />
          description: |-
            Extended operation options including
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsUpdateComponentHeaders"
          />&gt;
  - name: >-
      updateDigitalTwin(string, Record<string, unknown>[],
      DigitalTwinsUpdateOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.updateDigitalTwin'
    package: '@azure/digital-twins-core'
    summary: Update a digital twin using a json patch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateDigitalTwin(digitalTwinId: string, jsonPatch:
        Record<string, unknown>[], options?: DigitalTwinsUpdateOptionalParams):
        Promise<DigitalTwinsUpdateHeaders>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: jsonPatch
          type: Record&lt;string, unknown&gt;[]
          description: >-
            An update specification described by JSON Patch. Updates to property
            values

            and $model elements may happen in the same request. Operations are
            limited to add, replace and

            remove.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsUpdateOptionalParams" />
          description: |-
            Extended operation options including
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsUpdateHeaders" />&gt;
  - name: >-
      updateRelationship(string, string, Record<string, unknown>[],
      DigitalTwinsUpdateRelationshipOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.updateRelationship'
    package: '@azure/digital-twins-core'
    summary: >-
      Updates the properties of a relationship on a digital twin using a JSON
      patch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateRelationship(digitalTwinId: string, relationshipId:
        string, jsonPatch: Record<string, unknown>[], options?:
        DigitalTwinsUpdateRelationshipOptionalParams):
        Promise<DigitalTwinsUpdateRelationshipHeaders>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: relationshipId
          type: string
          description: The Id of the relationship to be updated.
        - id: jsonPatch
          type: Record&lt;string, unknown&gt;[]
          description: >-
            The application/json-patch+json operations to be performed on the
            specified digital twin's relationship.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsUpdateRelationshipOptionalParams"
            />
          description: |-
            Extended operation options
              ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsUpdateRelationshipHeaders"
          />&gt;
  - name: upsertDigitalTwin(string, string, DigitalTwinsAddOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.upsertDigitalTwin'
    package: '@azure/digital-twins-core'
    summary: Create or update a digital twin
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsertDigitalTwin(digitalTwinId: string, digitalTwinJson:
        string, options?: DigitalTwinsAddOptionalParams):
        Promise<DigitalTwinsAddResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to create or update.
        - id: digitalTwinJson
          type: string
          description: The application/json digital twin to create.
        - id: options
          type: >-
            <xref uid="@azure/digital-twins-core.DigitalTwinsAddOptionalParams"
            />
          description: |-
            Extended operation options including
             ifNoneMatch: Only perform the operation if the entity does not already exist.
      return:
        description: The created application/json digital twin.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsAddResponse" />&gt;
  - name: upsertEventRoute(string, string, string, OperationOptions)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.upsertEventRoute'
    package: '@azure/digital-twins-core'
    summary: Create or update an event route.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsertEventRoute(eventRouteId: string, endpointId: string,
        filter: string, options?: OperationOptions): Promise<void>
      parameters:
        - id: eventRouteId
          type: string
          description: The Id of the event route to create or update.
        - id: endpointId
          type: string
          description: The id of the endpoint this event route is bound to.
        - id: filter
          type: string
          description: >-
            An expression which describes the events which are routed to the
            endpoint.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The operation options
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      upsertRelationship(string, string, Record<string, unknown>,
      DigitalTwinsAddRelationshipOptionalParams)
    uid: '@azure/digital-twins-core.DigitalTwinsClient.upsertRelationship'
    package: '@azure/digital-twins-core'
    summary: Create or update a relationship on a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsertRelationship(digitalTwinId: string, relationshipId:
        string, relationship: Record<string, unknown>, options?:
        DigitalTwinsAddRelationshipOptionalParams):
        Promise<DigitalTwinsAddRelationshipResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to create.
        - id: relationship
          type: Record&lt;string, unknown&gt;
          description: The application/json relationship to be created.
        - id: options
          type: >-
            <xref
            uid="@azure/digital-twins-core.DigitalTwinsAddRelationshipOptionalParams"
            />
          description: |-
            Extended operation options including
             ifNoneMatch: Only perform the operation if the entity does not already exist.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins-core.DigitalTwinsAddRelationshipResponse"
          />&gt;
