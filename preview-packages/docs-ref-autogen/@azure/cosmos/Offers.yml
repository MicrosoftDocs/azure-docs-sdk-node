### YamlMime:TSType
name: Offers
uid: '@azure/cosmos.Offers'
package: '@azure/cosmos'
summary: >-
  Use to query or read all Offers.


  See [Offer](xref:@azure/cosmos.Offer) to read or replace an existing
  [Offer](xref:@azure/cosmos.Offer) by id.
fullName: Offers
remarks: ''
isDeprecated: false
type: class
properties:
  - name: client
    uid: '@azure/cosmos.Offers.client'
    package: '@azure/cosmos'
    summary: ''
    fullName: client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'client: CosmosClient'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.CosmosClient" />
methods:
  - name: query(SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Offers.query'
    package: '@azure/cosmos'
    summary: >+
      Query all offers.


      **Example**


      Read offer for a specific id.

      ```ts snippet:OffersQuery

      import { CosmosClient, SqlQuerySpec } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const querySpec: SqlQuerySpec = {
        query: `SELECT * FROM root r WHERE r.id = @offer`,
        parameters: [{ name: "@offer", value: "<offer-id>" }],
      };

      const { resources: offer } = await
      client.offers.query(querySpec).fetchAll();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: query<T>(SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Offers.query_1'
    package: '@azure/cosmos'
    summary: Query all offers.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Offers.readAll'
    package: '@azure/cosmos'
    summary: |+
      Read all offers.

      **Example**

      Read all offers to array.
      ```ts snippet:OffersReadAll
      import { CosmosClient } from "@azure/cosmos";

      const endpoint = "https://your-account.documents.azure.com";
      const key = "<database account masterkey>";
      const client = new CosmosClient({ endpoint, key });

      const { resources: offerList } = await client.offers.readAll().fetchAll();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAll(options?: FeedOptions): QueryIterator<OfferDefinition &
        Resource>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.OfferDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
