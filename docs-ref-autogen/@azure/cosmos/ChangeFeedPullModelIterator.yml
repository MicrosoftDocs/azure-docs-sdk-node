### YamlMime:TSType
name: ChangeFeedPullModelIterator
uid: '@azure/cosmos.ChangeFeedPullModelIterator'
package: '@azure/cosmos'
summary: >-
  Use `Items.getChangeFeedIterator()` to return an iterator that can iterate
  over all the changes for a partition key, feed range or an entire container.
fullName: ChangeFeedPullModelIterator<T>
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: hasMoreResults
    uid: '@azure/cosmos.ChangeFeedPullModelIterator.hasMoreResults'
    package: '@azure/cosmos'
    summary: Always returns true, changefeed is an infinite stream.
    fullName: hasMoreResults
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'hasMoreResults: boolean'
      return:
        description: ''
        type: boolean
methods:
  - name: getAsyncIterator()
    uid: '@azure/cosmos.ChangeFeedPullModelIterator.getAsyncIterator'
    package: '@azure/cosmos'
    summary: >+
      Gets an async iterator which will yield change feed results.


      **Example**


      Get changefeed for an entire container from now

      ```ts snippet:ChangeFeedPullModelIteratorIterate

      import { CosmosClient, ChangeFeedStartFrom } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const options = { changeFeedStartFrom: ChangeFeedStartFrom.Now() };

      for await (const results of
      container.items.getChangeFeedIterator(options).getAsyncIterator()) {
        // Process result
        for (const resource of results.result) {
          console.log(resource);
        }
      }

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<(T
        & Resource)[]>>
      return:
        description: ''
        type: >-
          AsyncIterable&lt;<xref uid="@azure/cosmos.ChangeFeedIteratorResponse"
          />&lt;(T & <xref uid="@azure/cosmos.Resource" />)[]&gt;&gt;
  - name: readNext()
    uid: '@azure/cosmos.ChangeFeedPullModelIterator.readNext'
    package: '@azure/cosmos'
    summary: >+
      Returns next set of results for the change feed.


      **Example**


      ```ts snippet:ReadmeSampleChangeFeedPullModelIteratorPartitionKey

      import {
        CosmosClient,
        PartitionKeyDefinitionVersion,
        PartitionKeyKind,
        ChangeFeedStartFrom,
      } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });


      const containerDefinition = {
        id: "Test Database",
        partitionKey: {
          paths: ["/name", "/address/zip"],
          version: PartitionKeyDefinitionVersion.V2,
          kind: PartitionKeyKind.MultiHash,
        },
      };

      const { container } = await
      database.containers.createIfNotExists(containerDefinition);


      const partitionKey = "some-partition-Key-value";

      const options = {
        changeFeedStartFrom: ChangeFeedStartFrom.Beginning(partitionKey),
      };


      const iterator = container.items.getChangeFeedIterator(options);


      while (iterator.hasMoreResults) {
        const response = await iterator.readNext();
        // process this response
      }

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readNext(): Promise<ChangeFeedIteratorResponse<(T &
        Resource)[]>>
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ChangeFeedIteratorResponse"
          />&lt;(T & <xref uid="@azure/cosmos.Resource" />)[]&gt;&gt;
