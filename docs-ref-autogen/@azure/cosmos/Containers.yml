### YamlMime:TSType
name: Containers
uid: '@azure/cosmos.Containers'
package: '@azure/cosmos'
summary: >-
  Operations for creating new containers, and reading/querying all containers


  See [Container](xref:@azure/cosmos.Container) for reading, replacing, or
  deleting an existing container; use `.container(id)`.


  Note: all these operations make calls against a fixed budget.

  You should design your system such that these calls scale sublinearly with
  your application.

  For instance, do not call `containers.readAll()` before every single
  `item.read()` call, to ensure the container exists;

  do this once on application start up.
fullName: Containers
remarks: ''
isDeprecated: false
type: class
properties:
  - name: database
    uid: '@azure/cosmos.Containers.database'
    package: '@azure/cosmos'
    summary: ''
    fullName: database
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'database: Database'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Database" />
methods:
  - name: create(ContainerRequest, RequestOptions)
    uid: '@azure/cosmos.Containers.create'
    package: '@azure/cosmos'
    summary: >+
      Creates a container.


      A container is a named logical container for items.


      A database may contain zero or more named containers and each container
      consists of

      zero or more JSON items.


      Being schema-free, the items in a container do not need to share the same
      structure or fields.



      Since containers are application resources, they can be authorized using
      either the

      master key or resource keys.


      **Example**


      ```ts snippet:CosmosClientDatabaseCreateContainer

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const container = client.database("<database id>").containers.create({
        id: "<name here>",
      });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(body: ContainerRequest, options?: RequestOptions):
        Promise<ContainerResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ContainerRequest" />
          description: Represents the body of the container.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
  - name: createIfNotExists(ContainerRequest, RequestOptions)
    uid: '@azure/cosmos.Containers.createIfNotExists'
    package: '@azure/cosmos'
    summary: >+
      Checks if a Container exists, and, if it doesn't, creates it.

      This will make a read operation based on the id in the `body`, then if it
      is not found, a create operation.

      You should confirm that the output matches the body you passed in for
      non-default properties (i.e. indexing policy/etc.)


      A container is a named logical container for items.


      A database may contain zero or more named containers and each container
      consists of

      zero or more JSON items.


      Being schema-free, the items in a container do not need to share the same
      structure or fields.



      Since containers are application resources, they can be authorized using
      either the

      master key or resource keys.


      **Example**


      ```ts snippet:ReadmeSampleCreateContainer

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });


      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(body: ContainerRequest, options?:
        RequestOptions): Promise<ContainerResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ContainerRequest" />
          description: Represents the body of the container.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
  - name: query(SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Containers.query'
    package: '@azure/cosmos'
    summary: |+
      Queries all containers.

      **Example**

      Read all containers to array.
      ```ts snippet:ContainersQueryAllContainers
      import { CosmosClient, SqlQuerySpec } from "@azure/cosmos";

      const endpoint = "https://your-account.documents.azure.com";
      const key = "<database account masterkey>";
      const client = new CosmosClient({ endpoint, key });

      const querySpec: SqlQuerySpec = {
        query: `SELECT * FROM root r WHERE r.id = @container`,
        parameters: [{ name: "@container", value: "Todo" }],
      };
      const { resources: containerList } = await client
        .database("<db id>")
        .containers.query(querySpec)
        .fetchAll();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<any>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: >-
          [QueryIterator](xref:@azure/cosmos.QueryIterator) Allows you to return
          specific containers in an array or iterate over them one at a time.
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;any&gt;
  - name: query<T>(SqlQuerySpec, FeedOptions)
    uid: '@azure/cosmos.Containers.query_1'
    package: '@azure/cosmos'
    summary: |+
      Queries all containers.

      **Example**

      Read all containers to array.
      ```ts snippet:ContainersQueryAllContainers
      import { CosmosClient, SqlQuerySpec } from "@azure/cosmos";

      const endpoint = "https://your-account.documents.azure.com";
      const key = "<database account masterkey>";
      const client = new CosmosClient({ endpoint, key });

      const querySpec: SqlQuerySpec = {
        query: `SELECT * FROM root r WHERE r.id = @container`,
        parameters: [{ name: "@container", value: "Todo" }],
      };
      const { resources: containerList } = await client
        .database("<db id>")
        .containers.query(querySpec)
        .fetchAll();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function query<T>(query: SqlQuerySpec, options?: FeedOptions):
        QueryIterator<T>
      parameters:
        - id: query
          type: <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: >-
            Query configuration for the operation. See
            [SqlQuerySpec](xref:@azure/cosmos.SqlQuerySpec) for more info on how
            to configure a query.
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: >-
          [QueryIterator](xref:@azure/cosmos.QueryIterator) Allows you to return
          specific containers in an array or iterate over them one at a time.
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;T&gt;
  - name: readAll(FeedOptions)
    uid: '@azure/cosmos.Containers.readAll'
    package: '@azure/cosmos'
    summary: |+
      Read all containers.

      **Example**

      Read all containers to array.
      ```ts snippet:ContainersReadAllContainers
      import { CosmosClient } from "@azure/cosmos";

      const endpoint = "https://your-account.documents.azure.com";
      const key = "<database account masterkey>";
      const client = new CosmosClient({ endpoint, key });

      const { resources: containerList } = await client
        .database("<db id>")
        .containers.readAll()
        .fetchAll();
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readAll(options?: FeedOptions):
        QueryIterator<ContainerDefinition & Resource>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: >-
            Use to set options like response page size, continuation tokens,
            etc.
      return:
        description: >-
          [QueryIterator](xref:@azure/cosmos.QueryIterator) Allows you to return
          all containers in an array or iterate over them one at a time.
        type: >-
          <xref uid="@azure/cosmos.QueryIterator" />&lt;<xref
          uid="@azure/cosmos.ContainerDefinition" /> & <xref
          uid="@azure/cosmos.Resource" />&gt;
