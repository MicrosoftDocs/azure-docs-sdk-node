### YamlMime:TSPackage
uid: '@azure/communication-react'
name: '@azure/communication-react'
summary: ''
type: package
classes:
  - '@azure/communication-react.CallError'
  - '@azure/communication-react.ChatError'
interfaces:
  - '@azure/communication-react.AcceptedTransfer'
  - '@azure/communication-react.ActiveErrorMessage'
  - '@azure/communication-react.ActiveNotification'
  - '@azure/communication-react.AdapterError'
  - '@azure/communication-react.AdapterNotification'
  - '@azure/communication-react.AdapterState'
  - '@azure/communication-react.AttachmentMetadata'
  - '@azure/communication-react.BaseCompositeProps'
  - '@azure/communication-react.BaseCustomStyles'
  - '@azure/communication-react.BreakoutRoomsState'
  - '@azure/communication-react.CallAdapter'
  - '@azure/communication-react.CallAdapterCallManagement'
  - '@azure/communication-react.CallAdapterCallOperations'
  - '@azure/communication-react.CallAdapterDeviceManagement'
  - '@azure/communication-react.CallAdapterSubscribers'
  - '@azure/communication-react.CallAgentProviderProps'
  - '@azure/communication-react.CallAgentState'
  - '@azure/communication-react.CallAndChatLocator'
  - '@azure/communication-react.CallClientProviderProps'
  - '@azure/communication-react.CallClientState'
  - '@azure/communication-react.CallCompositeLoaderProps'
  - '@azure/communication-react.CallCompositeProps'
  - '@azure/communication-react.CallCompositeStrings'
  - '@azure/communication-react.CallFeatureStreamState'
  - '@azure/communication-react.CallInfoState'
  - '@azure/communication-react.CallNotification'
  - '@azure/communication-react.CallProviderProps'
  - '@azure/communication-react.CallState'
  - '@azure/communication-react.CallSurveyImprovementSuggestions'
  - '@azure/communication-react.CallWithChatAdapter'
  - '@azure/communication-react.CallWithChatAdapterManagement'
  - '@azure/communication-react.CallWithChatAdapterState'
  - '@azure/communication-react.CallWithChatAdapterSubscriptions'
  - '@azure/communication-react.CallWithChatAdapterUiState'
  - '@azure/communication-react.CallWithChatClientState'
  - '@azure/communication-react.CallWithChatCompositeLoaderProps'
  - '@azure/communication-react.CallWithChatCompositeProps'
  - '@azure/communication-react.CallWithChatCompositeStrings'
  - '@azure/communication-react.CallWithChatControlOptions'
  - '@azure/communication-react.CallingHandlers'
  - '@azure/communication-react.CallingTheme'
  - '@azure/communication-react.CameraButtonContextualMenuStyles'
  - '@azure/communication-react.CameraButtonProps'
  - '@azure/communication-react.CameraButtonStrings'
  - '@azure/communication-react.CameraButtonStyles'
  - '@azure/communication-react.CapabilitiesFeatureState'
  - '@azure/communication-react.CapabilityChangedNotificationStrings'
  - '@azure/communication-react.CaptionLanguageStrings'
  - '@azure/communication-react.CaptionsBannerProps'
  - '@azure/communication-react.CaptionsBannerStrings'
  - '@azure/communication-react.CaptionsCallFeatureState'
  - '@azure/communication-react.CaptionsInfo'
  - '@azure/communication-react.CaptionsSettingsModalProps'
  - '@azure/communication-react.CaptionsSettingsModalStrings'
  - '@azure/communication-react.ChatAdapterSubscribers'
  - '@azure/communication-react.ChatAdapterThreadManagement'
  - '@azure/communication-react.ChatCompositeLoaderProps'
  - '@azure/communication-react.ChatCompositeProps'
  - '@azure/communication-react.ChatCompositeStrings'
  - '@azure/communication-react.ChatMessage'
  - '@azure/communication-react.CommonCallAdapter'
  - '@azure/communication-react.CommonCallingHandlers'
  - '@azure/communication-react.ComponentLocale'
  - '@azure/communication-react.ComponentStrings'
  - '@azure/communication-react.CompositeLocale'
  - '@azure/communication-react.CompositeStrings'
  - '@azure/communication-react.ConferencePhoneInfo'
  - '@azure/communication-react.ContentSystemMessage'
  - '@azure/communication-react.ControlBarButtonProps'
  - '@azure/communication-react.ControlBarButtonStrings'
  - '@azure/communication-react.ControlBarProps'
  - '@azure/communication-react.CreateVideoStreamViewResult'
  - '@azure/communication-react.CustomCallControlButtonCallbackArgs'
  - '@azure/communication-react.CustomCallControlButtonProps'
  - '@azure/communication-react.CustomCallControlButtonStrings'
  - '@azure/communication-react.CustomMessage'
  - '@azure/communication-react.DevicesButtonContextualMenuStyles'
  - '@azure/communication-react.DevicesButtonProps'
  - '@azure/communication-react.DevicesButtonStrings'
  - '@azure/communication-react.DevicesButtonStyles'
  - '@azure/communication-react.DiagnosticsCallFeatureState'
  - '@azure/communication-react.DialpadProps'
  - '@azure/communication-react.DialpadStrings'
  - '@azure/communication-react.DialpadStyles'
  - '@azure/communication-react.Disposable'
  - '@azure/communication-react.DtmfDialPadOptions'
  - '@azure/communication-react.EndCallButtonProps'
  - '@azure/communication-react.EndCallButtonStrings'
  - '@azure/communication-react.ErrorBarProps'
  - '@azure/communication-react.ErrorBarStrings'
  - '@azure/communication-react.FluentThemeProviderProps'
  - '@azure/communication-react.GridLayoutProps'
  - '@azure/communication-react.GridLayoutStyles'
  - '@azure/communication-react.HoldButtonProps'
  - '@azure/communication-react.HoldButtonStrings'
  - '@azure/communication-react.HorizontalGalleryStyles'
  - '@azure/communication-react.ImageOverlayProps'
  - '@azure/communication-react.ImageOverlayStrings'
  - '@azure/communication-react.IncomingCallNotificationProps'
  - '@azure/communication-react.IncomingCallNotificationStrings'
  - '@azure/communication-react.IncomingCallNotificationStyles'
  - '@azure/communication-react.IncomingCallStackCall'
  - '@azure/communication-react.IncomingCallStackProps'
  - '@azure/communication-react.IncomingCallState'
  - '@azure/communication-react.InlineImage'
  - '@azure/communication-react.InlineImageOptions'
  - '@azure/communication-react.JoinCallOptions'
  - '@azure/communication-react.JumpToNewMessageButtonProps'
  - '@azure/communication-react.LocalVideoCameraCycleButtonProps'
  - '@azure/communication-react.LocalVideoStreamState'
  - '@azure/communication-react.LocalVideoStreamVideoEffectsState'
  - '@azure/communication-react.LocalVideoTileOptions'
  - '@azure/communication-react.MediaAccessState'
  - '@azure/communication-react.MediaDiagnosticsState'
  - '@azure/communication-react.MeetingConferencePhoneInfoModalStrings'
  - '@azure/communication-react.MessageCommon'
  - '@azure/communication-react.MessageStatusIndicatorProps'
  - '@azure/communication-react.MessageStatusIndicatorStrings'
  - '@azure/communication-react.MessageThreadStrings'
  - '@azure/communication-react.MessageThreadStyles'
  - '@azure/communication-react.MicrophoneButtonContextualMenuStyles'
  - '@azure/communication-react.MicrophoneButtonProps'
  - '@azure/communication-react.MicrophoneButtonStrings'
  - '@azure/communication-react.MicrophoneButtonStyles'
  - '@azure/communication-react.NetworkDiagnosticsState'
  - '@azure/communication-react.NotificationOptions'
  - '@azure/communication-react.NotificationProps'
  - '@azure/communication-react.NotificationStackProps'
  - '@azure/communication-react.NotificationStackStrings'
  - '@azure/communication-react.NotificationStrings'
  - '@azure/communication-react.NotificationStyles'
  - '@azure/communication-react.OptimalVideoCountFeatureState'
  - '@azure/communication-react.OptionsDevice'
  - '@azure/communication-react.OutboundCallCompositeLoaderProps'
  - '@azure/communication-react.PPTLiveCallFeatureState'
  - '@azure/communication-react.ParticipantAddedSystemMessage'
  - '@azure/communication-react.ParticipantItemProps'
  - '@azure/communication-react.ParticipantItemStrings'
  - '@azure/communication-react.ParticipantItemStyles'
  - '@azure/communication-react.ParticipantListItemStyles'
  - '@azure/communication-react.ParticipantListStyles'
  - '@azure/communication-react.ParticipantRemovedSystemMessage'
  - '@azure/communication-react.ParticipantsButtonContextualMenuStyles'
  - '@azure/communication-react.ParticipantsButtonProps'
  - '@azure/communication-react.ParticipantsButtonStrings'
  - '@azure/communication-react.ParticipantsButtonStyles'
  - '@azure/communication-react.RaiseHandButtonProps'
  - '@azure/communication-react.RaiseHandButtonStrings'
  - '@azure/communication-react.RaiseHandCallFeature'
  - '@azure/communication-react.ReactionButtonProps'
  - '@azure/communication-react.ReactionButtonStrings'
  - '@azure/communication-react.ReactionResources'
  - '@azure/communication-react.RealTimeTextCallFeatureState'
  - '@azure/communication-react.RealTimeTextInfo'
  - '@azure/communication-react.RealTimeTextModalProps'
  - '@azure/communication-react.RealTimeTextModalStrings'
  - '@azure/communication-react.RealTimeTextProps'
  - '@azure/communication-react.RealTimeTextStrings'
  - '@azure/communication-react.RecordingCallFeature'
  - '@azure/communication-react.RemoteParticipantState'
  - '@azure/communication-react.RemoteVideoStreamState'
  - '@azure/communication-react.RemoteVideoTileMenuOptions'
  - '@azure/communication-react.ScreenShareButtonProps'
  - '@azure/communication-react.ScreenShareButtonStrings'
  - '@azure/communication-react.SendBoxProps'
  - '@azure/communication-react.SendBoxStrings'
  - '@azure/communication-react.SendBoxStylesProps'
  - '@azure/communication-react.SpokenLanguageStrings'
  - '@azure/communication-react.SpotlightCallFeatureState'
  - '@azure/communication-react.SpotlightPromptStrings'
  - '@azure/communication-react.SpotlightState'
  - '@azure/communication-react.StartCaptionsAdapterOptions'
  - '@azure/communication-react.StartCaptionsButtonProps'
  - '@azure/communication-react.StartCaptionsButtonStrings'
  - '@azure/communication-react.StartRealTimeTextButtonProps'
  - '@azure/communication-react.StartRealTimeTextButtonStrings'
  - '@azure/communication-react.StatefulCallClient'
  - '@azure/communication-react.StatefulChatClient'
  - '@azure/communication-react.StatefulDeviceManager'
  - '@azure/communication-react.StopCaptionsAdapterOptions'
  - '@azure/communication-react.StreamMediaProps'
  - '@azure/communication-react.SurveyIssues'
  - '@azure/communication-react.SurveyIssuesHeadingStrings'
  - '@azure/communication-react.SystemMessageCommon'
  - '@azure/communication-react.TeamsCallAdapter'
  - '@azure/communication-react.TeamsCallingHandlers'
  - '@azure/communication-react.TeamsIncomingCallState'
  - '@azure/communication-react.TogetherModeCallFeatureState'
  - '@azure/communication-react.TogetherModeSeatingPositionState'
  - '@azure/communication-react.TogetherModeStreamOptions'
  - '@azure/communication-react.TogetherModeStreamViewResult'
  - '@azure/communication-react.TogetherModeStreamsState'
  - '@azure/communication-react.TopicUpdatedSystemMessage'
  - '@azure/communication-react.TranscriptionCallFeature'
  - '@azure/communication-react.TransferFeature'
  - '@azure/communication-react.TypingIndicatorProps'
  - '@azure/communication-react.TypingIndicatorStrings'
  - '@azure/communication-react.TypingIndicatorStylesProps'
  - '@azure/communication-react.VerticalGalleryControlBarStyles'
  - '@azure/communication-react.VerticalGalleryStrings'
  - '@azure/communication-react.VerticalGalleryStyles'
  - '@azure/communication-react.VideoBackgroundBlurEffect'
  - '@azure/communication-react.VideoBackgroundImage'
  - '@azure/communication-react.VideoBackgroundNoEffect'
  - '@azure/communication-react.VideoBackgroundReplacementEffect'
  - '@azure/communication-react.VideoGalleryLocalParticipant'
  - '@azure/communication-react.VideoGalleryProps'
  - '@azure/communication-react.VideoGalleryRemoteParticipant'
  - '@azure/communication-react.VideoGalleryStream'
  - '@azure/communication-react.VideoGalleryStrings'
  - '@azure/communication-react.VideoGalleryStyles'
  - '@azure/communication-react.VideoGalleryTogetherModeSeatingInfo'
  - '@azure/communication-react.VideoGalleryTogetherModeStreams'
  - '@azure/communication-react.VideoStreamOptions'
  - '@azure/communication-react.VideoStreamRendererViewState'
  - '@azure/communication-react.VideoTileContextualMenuProps'
  - '@azure/communication-react.VideoTileDrawerMenuProps'
  - '@azure/communication-react.VideoTileProps'
  - '@azure/communication-react.VideoTileStrings'
  - '@azure/communication-react.VideoTileStylesProps'
  - '@azure/communication-react.VideoTilesOptions'
typeAliases:
  - '@azure/communication-react.AdapterErrors'
  - '@azure/communication-react.AdapterNotifications'
  - '@azure/communication-react.AreEqual'
  - '@azure/communication-react.AreParamEqual'
  - '@azure/communication-react.AreTypeEqual'
  - '@azure/communication-react.AvatarPersonaData'
  - '@azure/communication-react.AvatarPersonaDataCallback'
  - '@azure/communication-react.AzureCommunicationCallAdapterArgs'
  - '@azure/communication-react.AzureCommunicationCallAdapterOptions'
  - '@azure/communication-react.AzureCommunicationCallWithChatAdapterArgs'
  - >-
    @azure/communication-react.AzureCommunicationCallWithChatAdapterFromClientArgs
  - '@azure/communication-react.AzureCommunicationChatAdapterArgs'
  - '@azure/communication-react.AzureCommunicationOutboundCallAdapterArgs'
  - '@azure/communication-react.CallAdapterCallEndedEvent'
  - '@azure/communication-react.CallAdapterClientState'
  - '@azure/communication-react.CallAdapterLocator'
  - '@azure/communication-react.CallAdapterState'
  - '@azure/communication-react.CallAdapterUiState'
  - '@azure/communication-react.CallCompositeIcons'
  - '@azure/communication-react.CallCompositeOptions'
  - '@azure/communication-react.CallCompositePage'
  - '@azure/communication-react.CallControlDisplayType'
  - '@azure/communication-react.CallControlOptions'
  - '@azure/communication-react.CallEndedListener'
  - '@azure/communication-react.CallErrorBarSelector'
  - '@azure/communication-react.CallErrorTarget'
  - '@azure/communication-react.CallErrors'
  - '@azure/communication-react.CallFeatureStreamName'
  - '@azure/communication-react.CallIdChangedListener'
  - '@azure/communication-react.CallNotifications'
  - '@azure/communication-react.CallParticipantListParticipant'
  - '@azure/communication-react.CallWithChatCompositeIcons'
  - '@azure/communication-react.CallWithChatCompositeOptions'
  - '@azure/communication-react.CallWithChatEvent'
  - '@azure/communication-react.CallingBaseSelectorProps'
  - '@azure/communication-react.CallingHandlersOptions'
  - '@azure/communication-react.CallingReturnProps'
  - '@azure/communication-react.CallingSounds'
  - '@azure/communication-react.CameraButtonSelector'
  - '@azure/communication-react.CancelEditCallback'
  - '@azure/communication-react.CapabilitiesChangedListener'
  - '@azure/communication-react.CaptionSettingsSelector'
  - '@azure/communication-react.CaptionsBannerSelector'
  - '@azure/communication-react.CaptionsInformation'
  - '@azure/communication-react.CaptionsOptions'
  - '@azure/communication-react.CaptionsReceivedListener'
  - '@azure/communication-react.ChatAdapter'
  - '@azure/communication-react.ChatAdapterOptions'
  - '@azure/communication-react.ChatAdapterState'
  - '@azure/communication-react.ChatAdapterUiState'
  - '@azure/communication-react.ChatAttachmentType'
  - '@azure/communication-react.ChatBaseSelectorProps'
  - '@azure/communication-react.ChatClientProviderProps'
  - '@azure/communication-react.ChatClientState'
  - '@azure/communication-react.ChatCompositeClientState'
  - '@azure/communication-react.ChatCompositeIcons'
  - '@azure/communication-react.ChatCompositeOptions'
  - '@azure/communication-react.ChatErrorBarSelector'
  - '@azure/communication-react.ChatErrorTarget'
  - '@azure/communication-react.ChatErrors'
  - '@azure/communication-react.ChatHandlers'
  - '@azure/communication-react.ChatInitializedListener'
  - '@azure/communication-react.ChatMessageWithStatus'
  - '@azure/communication-react.ChatParticipantListSelector'
  - '@azure/communication-react.ChatProfile'
  - '@azure/communication-react.ChatReturnProps'
  - '@azure/communication-react.ChatThreadClientProviderProps'
  - '@azure/communication-react.ChatThreadClientState'
  - '@azure/communication-react.ChatThreadProperties'
  - '@azure/communication-react.ClientState'
  - '@azure/communication-react.Common'
  - '@azure/communication-react.CommonCallAdapterOptions'
  - '@azure/communication-react.CommonCallControlOptions'
  - '@azure/communication-react.CommonProperties'
  - '@azure/communication-react.CommunicationParticipant'
  - '@azure/communication-react.ComponentIcons'
  - '@azure/communication-react.ComponentProps'
  - '@azure/communication-react.ComponentSlotStyle'
  - '@azure/communication-react.CompositeIcons'
  - '@azure/communication-react.ControlBarButtonStyles'
  - '@azure/communication-react.ControlBarLayout'
  - '@azure/communication-react.CreateDefaultCallingHandlers'
  - '@azure/communication-react.CreateViewResult'
  - '@azure/communication-react.CustomAvatarOptions'
  - '@azure/communication-react.CustomCallControlButtonCallback'
  - '@azure/communication-react.CustomCallControlButtonPlacement'
  - '@azure/communication-react.DeclarativeCallAgent'
  - '@azure/communication-react.DeclarativeTeamsCallAgent'
  - '@azure/communication-react.DeepNoiseSuppressionEffectDependency'
  - '@azure/communication-react.DeviceManagerState'
  - '@azure/communication-react.DevicesButtonSelector'
  - '@azure/communication-react.DiagnosticChangedEventListner'
  - '@azure/communication-react.DialpadMode'
  - '@azure/communication-react.DisplayNameChangedListener'
  - '@azure/communication-react.DtmfTone'
  - '@azure/communication-react.EmptySelector'
  - '@azure/communication-react.ErrorType'
  - '@azure/communication-react.GetCallingSelector'
  - '@azure/communication-react.GetChatSelector'
  - '@azure/communication-react.HoldButtonSelector'
  - '@azure/communication-react.IncomingCallManagement'
  - '@azure/communication-react.IncomingCallStackSelector'
  - '@azure/communication-react.IsCaptionLanguageChangedListener'
  - '@azure/communication-react.IsCaptionsActiveChangedListener'
  - '@azure/communication-react.IsLocalScreenSharingActiveChangedListener'
  - '@azure/communication-react.IsMutedChangedListener'
  - '@azure/communication-react.IsSpeakingChangedListener'
  - '@azure/communication-react.IsSpokenLanguageChangedListener'
  - '@azure/communication-react.LoadingState'
  - '@azure/communication-react.LocalScreenShareView'
  - '@azure/communication-react.LocalVideoTileSize'
  - '@azure/communication-react.LocalizationProviderProps'
  - '@azure/communication-react.LongPressTrigger'
  - '@azure/communication-react.MediaAccess'
  - '@azure/communication-react.MediaDiagnosticChangedEvent'
  - '@azure/communication-react.Message'
  - '@azure/communication-react.MessageAttachedStatus'
  - '@azure/communication-react.MessageContentType'
  - '@azure/communication-react.MessageDeletedListener'
  - '@azure/communication-react.MessageEditedListener'
  - '@azure/communication-react.MessageProps'
  - '@azure/communication-react.MessageReadListener'
  - '@azure/communication-react.MessageReceivedListener'
  - '@azure/communication-react.MessageRenderer'
  - '@azure/communication-react.MessageSentListener'
  - '@azure/communication-react.MessageStatus'
  - '@azure/communication-react.MessageThreadProps'
  - '@azure/communication-react.MessageThreadSelector'
  - '@azure/communication-react.MicrophoneButtonSelector'
  - '@azure/communication-react.NetworkDiagnosticChangedEvent'
  - '@azure/communication-react.NotificationStackSelector'
  - '@azure/communication-react.NotificationTarget'
  - '@azure/communication-react.NotificationType'
  - '@azure/communication-react.OnFetchChatProfileCallback'
  - '@azure/communication-react.OnFetchProfileCallback'
  - '@azure/communication-react.OnRenderAvatarCallback'
  - '@azure/communication-react.OverflowGalleryPosition'
  - '@azure/communication-react.ParticipantListParticipant'
  - '@azure/communication-react.ParticipantListProps'
  - '@azure/communication-react.ParticipantListSelector'
  - '@azure/communication-react.ParticipantMenuItemsCallback'
  - '@azure/communication-react.ParticipantState'
  - '@azure/communication-react.ParticipantsAddedListener'
  - '@azure/communication-react.ParticipantsButtonSelector'
  - '@azure/communication-react.ParticipantsJoinedListener'
  - '@azure/communication-react.ParticipantsLeftListener'
  - '@azure/communication-react.ParticipantsRemovedListener'
  - '@azure/communication-react.Profile'
  - '@azure/communication-react.RaiseHandButtonSelector'
  - '@azure/communication-react.RaisedHand'
  - '@azure/communication-react.RaisedHandState'
  - '@azure/communication-react.Reaction'
  - '@azure/communication-react.ReactionButtonReaction'
  - '@azure/communication-react.ReactionSprite'
  - '@azure/communication-react.ReactionState'
  - '@azure/communication-react.ReadReceiptsBySenderId'
  - '@azure/communication-react.RealTimeTextInformation'
  - '@azure/communication-react.RealTimeTextReceivedListener'
  - '@azure/communication-react.ResourceDetails'
  - '@azure/communication-react.ResourceFetchResult'
  - '@azure/communication-react.ScreenShareButtonSelector'
  - '@azure/communication-react.Selector'
  - '@azure/communication-react.SendBoxSelector'
  - '@azure/communication-react.SoundEffect'
  - '@azure/communication-react.Spotlight'
  - '@azure/communication-react.SpotlightChangedListener'
  - '@azure/communication-react.StartCallIdentifier'
  - '@azure/communication-react.StartCaptionsButtonSelector'
  - '@azure/communication-react.StatefulCallClientArgs'
  - '@azure/communication-react.StatefulCallClientOptions'
  - '@azure/communication-react.StatefulChatClientArgs'
  - '@azure/communication-react.StatefulChatClientOptions'
  - '@azure/communication-react.SupportedCaptionLanguage'
  - '@azure/communication-react.SupportedSpokenLanguage'
  - '@azure/communication-react.SystemMessage'
  - '@azure/communication-react.TeamsAdapterOptions'
  - '@azure/communication-react.TeamsCallAdapterArgs'
  - '@azure/communication-react.TeamsCallAdapterArgsCommon'
  - '@azure/communication-react.TeamsIncomingCallManagement'
  - '@azure/communication-react.TogetherModeParticipantSeatingState'
  - '@azure/communication-react.TopicChangedListener'
  - '@azure/communication-react.TransferAcceptedListener'
  - '@azure/communication-react.TypingIndicatorSelector'
  - '@azure/communication-react.UpdateMessageCallback'
  - '@azure/communication-react.VideoBackgroundEffect'
  - '@azure/communication-react.VideoBackgroundEffectsDependency'
  - '@azure/communication-react.VideoGalleryLayout'
  - '@azure/communication-react.VideoGalleryParticipant'
  - '@azure/communication-react.VideoGallerySelector'
  - '@azure/communication-react.VideoGalleryTogetherModeParticipantPosition'
  - '@azure/communication-react.ViewScalingMode'
functions:
  - name: CallAgentProvider(CallAgentProviderProps)
    uid: '@azure/communication-react.CallAgentProvider'
    package: '@azure/communication-react'
    summary: >-
      A <xref:React.Context> that stores a
      <xref:%40azure%2Fcommunication-calling%23CallAgent>.


      Calling components from this package must be wrapped with a
      [CallAgentProvider](xref:@azure/communication-react.CallAgentProvider).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function CallAgentProvider(props: CallAgentProviderProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.CallAgentProviderProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: CallClientProvider(CallClientProviderProps)
    uid: '@azure/communication-react.CallClientProvider'
    package: '@azure/communication-react'
    summary: >-
      A <xref:React.Context> that stores a
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).


      Calling components from this package must be wrapped with a
      [CallClientProvider](xref:@azure/communication-react.CallClientProvider).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function CallClientProvider(props: CallClientProviderProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.CallClientProviderProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: CallComposite(CallCompositeProps)
    uid: '@azure/communication-react.CallComposite'
    package: '@azure/communication-react'
    summary: A customizable UI composite for calling experience.
    remarks: |-
      Call composite min width/height are as follow:
      - mobile: 17.5rem x 21rem (280px x 336px, with default rem at 16px)
      - desktop: 30rem x 22rem (480px x 352px, with default rem at 16px)
    isDeprecated: false
    syntax:
      content: 'function CallComposite(props: CallCompositeProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.CallCompositeProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: CallProvider(CallProviderProps)
    uid: '@azure/communication-react.CallProvider'
    package: '@azure/communication-react'
    summary: >-
      A <xref:React.Context> that stores a
      <xref:%40azure%2Fcommunication-calling%23Call>.


      Calling components from this package must be wrapped with a
      [CallProvider](xref:@azure/communication-react.CallProvider).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function CallProvider(props: CallProviderProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.CallProviderProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: CallWithChatComposite(CallWithChatCompositeProps)
    uid: '@azure/communication-react.CallWithChatComposite'
    package: '@azure/communication-react'
    summary: >-
      CallWithChatComposite brings together key components to provide a full
      call with chat experience out of the box.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function CallWithChatComposite(props: CallWithChatCompositeProps):
        Element
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.CallWithChatCompositeProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: CameraButton(CameraButtonProps)
    uid: '@azure/communication-react.CameraButton'
    package: '@azure/communication-react'
    summary: |-
      A button to turn camera on / off.

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function CameraButton(props: CameraButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.CameraButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: CaptionsBanner(CaptionsBannerProps)
    uid: '@azure/communication-react.CaptionsBanner'
    package: '@azure/communication-react'
    summary: >-
      A component for displaying a CaptionsBanner with user icon, displayName
      and captions text.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function CaptionsBanner(props: CaptionsBannerProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.CaptionsBannerProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: CaptionsSettingsModal(CaptionsSettingsModalProps)
    uid: '@azure/communication-react.CaptionsSettingsModal'
    package: '@azure/communication-react'
    summary: a component for setting spoken languages
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function CaptionsSettingsModal(props: CaptionsSettingsModalProps):
        Element
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.CaptionsSettingsModalProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ChatClientProvider(ChatClientProviderProps)
    uid: '@azure/communication-react.ChatClientProvider'
    package: '@azure/communication-react'
    summary: >-
      A <xref:React.Context> that stores a
      [StatefulChatClient](xref:@azure/communication-react.StatefulChatClient).


      Chat components from this package must be wrapped with a
      [ChatClientProvider](xref:@azure/communication-react.ChatClientProvider).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ChatClientProvider(props: ChatClientProviderProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ChatClientProviderProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ChatComposite(ChatCompositeProps)
    uid: '@azure/communication-react.ChatComposite'
    package: '@azure/communication-react'
    summary: A customizable UI composite for the chat experience.
    remarks: >-
      Chat composite min width and height are respectively 17.5rem and 20rem
      (280px and 320px, with default rem at 16px)
    isDeprecated: false
    syntax:
      content: 'function ChatComposite(props: ChatCompositeProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ChatCompositeProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ChatThreadClientProvider(ChatThreadClientProviderProps)
    uid: '@azure/communication-react.ChatThreadClientProvider'
    package: '@azure/communication-react'
    summary: >-
      A <xref:React.Context> that stores a
      <xref:%40azure%2Fcommunication-chat%23ChatThreadClient>.


      Chat components from this package must be wrapped with a
      [ChatThreadClientProvider](xref:@azure/communication-react.ChatThreadClientProvider).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function ChatThreadClientProvider(props: ChatThreadClientProviderProps):
        Element
      parameters:
        - id: props
          type: >-
            <xref uid="@azure/communication-react.ChatThreadClientProviderProps"
            />
          description: ''
      return:
        description: ''
        type: Element
  - name: ControlBar(ControlBarProps)
    uid: '@azure/communication-react.ControlBar'
    package: '@azure/communication-react'
    summary: >-
      A container for various buttons for call controls.


      Use with various call control buttons in this library, e.g.,
      [CameraButton](xref:@azure/communication-react.CameraButton), or your own
      instances of

      [ControlBarButton](xref:@azure/communication-react.ControlBarButton)
      directly.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ControlBar(props: ControlBarProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ControlBarProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ControlBarButton(ControlBarButtonProps)
    uid: '@azure/communication-react.ControlBarButton'
    package: '@azure/communication-react'
    summary: >-
      Default button styled for the
      [ControlBar](xref:@azure/communication-react.ControlBar).


      Use this component create custom buttons that are styled the same as other
      buttons provided by the UI Library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ControlBarButton(props: ControlBarButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ControlBarButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: DevicesButton(DevicesButtonProps)
    uid: '@azure/communication-react.DevicesButton'
    package: '@azure/communication-react'
    summary: |-
      A button to open a menu that controls device options.

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function DevicesButton(props: DevicesButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.DevicesButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: Dialpad(DialpadProps)
    uid: '@azure/communication-react.Dialpad'
    package: '@azure/communication-react'
    summary: >-
      A component to allow users to enter phone number through clicking on
      dialpad/using keyboard

      It will return empty component for stable builds
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function Dialpad(props: DialpadProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.DialpadProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: EndCallButton(EndCallButtonProps)
    uid: '@azure/communication-react.EndCallButton'
    package: '@azure/communication-react'
    summary: |-
      A button to end an ongoing call.

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function EndCallButton(props: EndCallButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.EndCallButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ErrorBar(ErrorBarProps)
    uid: '@azure/communication-react.ErrorBar'
    package: '@azure/communication-react'
    summary: >-
      A component to show error messages on the UI.

      All strings that can be shown are accepted as the
      [strings](xref:@azure/communication-react.ErrorBarProps.strings) so that
      they can be localized.

      Active errors are selected by
      [activeErrorMessages](xref:@azure/communication-react.ErrorBarProps.activeErrorMessages).


      This component internally tracks dismissed by the user.
        * Errors that have an associated timestamp: The error is shown on the UI again if it occurs after being dismissed.
        * Errors that do not have a timestamp: The error is dismissed until it disappears from the props.
              If the error recurs, it is shown in the UI.

      Uses <xref:%40fluentui%2Freact%23MessageBar> UI element.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ErrorBar(props: ErrorBarProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ErrorBarProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: FluentThemeProvider(FluentThemeProviderProps)
    uid: '@azure/communication-react.FluentThemeProvider'
    package: '@azure/communication-react'
    summary: Provider to apply a Fluent theme across this library's react components.
    remarks: >-
      Components in this library are composed primarily from [Fluent
      UI](https://developer.microsoft.com/fluentui#/controls/web),

      controls, mixing v8 and v9 controls.

      This provider handles applying any theme provided to the underlying Fluent
      UI controls. *
    isDeprecated: false
    syntax:
      content: 'function FluentThemeProvider(props: FluentThemeProviderProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.FluentThemeProviderProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: GridLayout(GridLayoutProps)
    uid: '@azure/communication-react.GridLayout'
    package: '@azure/communication-react'
    summary: A component to lay out audio / video participants tiles in a call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function GridLayout(props: GridLayoutProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.GridLayoutProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: HoldButton(HoldButtonProps)
    uid: '@azure/communication-react.HoldButton'
    package: '@azure/communication-react'
    summary: |-
      a button to hold or resume a ongoing call.

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function HoldButton(props: HoldButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.HoldButtonProps" />
          description: properties for the hold button.
      return:
        description: ''
        type: Element
  - name: ImageOverlay(ImageOverlayProps)
    uid: '@azure/communication-react.ImageOverlay'
    package: '@azure/communication-react'
    summary: Component to render a fullscreen modal for a selected image.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ImageOverlay(props: ImageOverlayProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ImageOverlayProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: IncomingCallNotification(IncomingCallNotificationProps)
    uid: '@azure/communication-react.IncomingCallNotification'
    package: '@azure/communication-react'
    summary: >-
      A Notification component that is to be used to represent incoming calls to
      the end user.

      Allows the user to accept or reject the incoming call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function IncomingCallNotification(props: IncomingCallNotificationProps):
        Element
      parameters:
        - id: props
          type: >-
            <xref uid="@azure/communication-react.IncomingCallNotificationProps"
            />
          description: ''
      return:
        description: ''
        type: Element
  - name: IncomingCallStack(IncomingCallStackProps)
    uid: '@azure/communication-react.IncomingCallStack'
    package: '@azure/communication-react'
    summary: Wrapper to manage multiple incoming calls
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function IncomingCallStack(props: IncomingCallStackProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.IncomingCallStackProps" />
          description: <xref:IncomingCallManagerProps>
      return:
        description: ''
        type: Element
  - name: LocalizationProvider(LocalizationProviderProps)
    uid: '@azure/communication-react.LocalizationProvider'
    package: '@azure/communication-react'
    summary: Provider to provide localized strings for this library's react components.
    remarks: >-
      Components will be provided localized strings in English (US) by default
      if this

      provider is not used.
    isDeprecated: false
    syntax:
      content: 'function LocalizationProvider(props: LocalizationProviderProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.LocalizationProviderProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: MessageStatusIndicator(MessageStatusIndicatorProps)
    uid: '@azure/communication-react.MessageStatusIndicator'
    package: '@azure/communication-react'
    summary: |-
      Component to display the status of a sent message.

      Adds an icon and tooltip corresponding to the message status.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function MessageStatusIndicator(props: MessageStatusIndicatorProps):
        Element
      parameters:
        - id: props
          type: >-
            <xref uid="@azure/communication-react.MessageStatusIndicatorProps"
            />
          description: ''
      return:
        description: ''
        type: Element
  - name: MessageThread(MessageThreadProps)
    uid: '@azure/communication-react.MessageThread'
    package: '@azure/communication-react'
    summary: >-
      `MessageThread` allows you to easily create a component for rendering chat
      messages, handling scrolling behavior of new/old messages and customizing
      icons & controls inside the chat thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function MessageThread(props: MessageThreadProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.MessageThreadProps" />
          description: >-
            of type MessageThreadProps


            Users will need to provide at least chat messages and userId to
            render the `MessageThread` component.

            Users can also customize `MessageThread` by passing in their own
            Avatar, `MessageStatusIndicator` icon, `JumpToNewMessageButton`,
            `LoadPreviousMessagesButton` and the behavior of these controls.


            `MessageThread` internally uses the `Chat` component from
            `@fluentui-contrib/chat`. You can checkout the details about these
            components
            [here](https://microsoft.github.io/fluentui-contrib/react-chat/).
      return:
        description: ''
        type: Element
  - name: MicrophoneButton(MicrophoneButtonProps)
    uid: '@azure/communication-react.MicrophoneButton'
    package: '@azure/communication-react'
    summary: |-
      A button to turn microphone on / off.

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function MicrophoneButton(props: MicrophoneButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.MicrophoneButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: Notification(NotificationProps)
    uid: '@azure/communication-react.Notification'
    package: '@azure/communication-react'
    summary: A component to show notification messages on the UI.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function Notification(props: NotificationProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.NotificationProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: NotificationStack(NotificationStackProps)
    uid: '@azure/communication-react.NotificationStack'
    package: '@azure/communication-react'
    summary: >-
      A component to show notifications on the UI.

      All strings that can be shown are accepted as the
      [strings](xref:@azure/communication-react.NotificationStackProps.strings)
      so that they can be localized.

      Active notifications are selected by
      [activeNotifications](xref:@azure/communication-react.NotificationStackProps.activeNotifications).


      This component internally tracks dismissed by the user.
        * Notifications that have an associated timestamp: The notification is shown on the UI again if it occurs after being dismissed.
        * Notifications that do not have a timestamp: The notification is dismissed until it disappears from the props.
              If the notification recurs, it is shown in the UI.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function NotificationStack(props: NotificationStackProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.NotificationStackProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ParticipantItem(ParticipantItemProps)
    uid: '@azure/communication-react.ParticipantItem'
    package: '@azure/communication-react'
    summary: >-
      Component to render a calling or chat participant.


      Displays the participant's avatar, displayName and status as well as
      optional icons and context menu.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ParticipantItem(props: ParticipantItemProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ParticipantItemProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ParticipantList(ParticipantListProps)
    uid: '@azure/communication-react.ParticipantList'
    package: '@azure/communication-react'
    summary: >-
      Component to render all calling or chat participants.


      By default, each participant is rendered with
      [ParticipantItem](xref:@azure/communication-react.ParticipantItem). See
      <xref:ParticipantListProps.onRenderParticipant> to override.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ParticipantList(props: ParticipantListProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ParticipantListProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ParticipantsButton(ParticipantsButtonProps)
    uid: '@azure/communication-react.ParticipantsButton'
    package: '@azure/communication-react'
    summary: >-
      A button to show a menu with calling or chat participants.


      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar).


      This button contains dropdown menu items defined through its property
      `menuProps`. By default, it can display the number of remote participants
      with the full list

      as sub-menu and an option to mute all participants, as well as a
      copy-to-clipboard button to copy the call invitation URL.

      This `menuProps` can be fully redefined and its property is of type
      [IContextualMenuProps](https://developer.microsoft.com/fluentui#/controls/web/contextualmenu#IContextualMenuProps).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ParticipantsButton(props: ParticipantsButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ParticipantsButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: RaiseHandButton(RaiseHandButtonProps)
    uid: '@azure/communication-react.RaiseHandButton'
    package: '@azure/communication-react'
    summary: |-
      A button to start / stop screen sharing.

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function RaiseHandButton(props: RaiseHandButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.RaiseHandButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ReactionButton(ReactionButtonProps)
    uid: '@azure/communication-react.ReactionButton'
    package: '@azure/communication-react'
    summary: |-
      A button to send reactions.

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ReactionButton(props: ReactionButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ReactionButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: RealTimeText(RealTimeTextProps)
    uid: '@azure/communication-react.RealTimeText'
    package: '@azure/communication-react'
    summary: A component for displaying a single line of RealTimeText
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function RealTimeText(props: RealTimeTextProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.RealTimeTextProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: RealTimeTextModal(RealTimeTextModalProps)
    uid: '@azure/communication-react.RealTimeTextModal'
    package: '@azure/communication-react'
    summary: a component for realTimeText modal
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function RealTimeTextModal(props: RealTimeTextModalProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.RealTimeTextModalProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: ScreenShareButton(ScreenShareButtonProps)
    uid: '@azure/communication-react.ScreenShareButton'
    package: '@azure/communication-react'
    summary: |-
      A button to start / stop screen sharing.

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ScreenShareButton(props: ScreenShareButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.ScreenShareButtonProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: SendBox(SendBoxProps)
    uid: '@azure/communication-react.SendBox'
    package: '@azure/communication-react'
    summary: |-
      Component for typing and sending messages.

      Supports sending typing notification when user starts entering text.
      Supports an optional message below the text input field.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function SendBox(props: SendBoxProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.SendBoxProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: StartCaptionsButton(StartCaptionsButtonProps)
    uid: '@azure/communication-react.StartCaptionsButton'
    package: '@azure/communication-react'
    summary: |-
      a button to start or stop captions

      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function StartCaptionsButton(props: StartCaptionsButtonProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.StartCaptionsButtonProps" />
          description: properties for the start captions button.
      return:
        description: ''
        type: Element
  - name: StartRealTimeTextButton(StartRealTimeTextButtonProps)
    uid: '@azure/communication-react.StartRealTimeTextButton'
    package: '@azure/communication-react'
    summary: >-
      a button to start RealTimeText

      based on accessibility requirement, real time text cannot be turned off
      once it is on


      Can be used with [ControlBar](xref:@azure/communication-react.ControlBar)
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function StartRealTimeTextButton(props: StartRealTimeTextButtonProps):
        Element
      parameters:
        - id: props
          type: >-
            <xref uid="@azure/communication-react.StartRealTimeTextButtonProps"
            />
          description: properties for the start RealTimeText button.
      return:
        description: ''
        type: Element
  - name: StreamMedia(StreamMediaProps)
    uid: '@azure/communication-react.StreamMedia'
    package: '@azure/communication-react'
    summary: >-
      Utility component to convert an HTMLElement with a video stream into a JSX
      element.


      Use to convert an HTMLElement returned by headless calling API into a
      component that can be rendered as a
      [VideoTile](xref:@azure/communication-react.VideoTile).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function StreamMedia(props: StreamMediaProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.StreamMediaProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: TypingIndicator(TypingIndicatorProps)
    uid: '@azure/communication-react.TypingIndicator'
    package: '@azure/communication-react'
    summary: >-
      Component to notify local user when one or more participants in the chat
      thread are typing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function TypingIndicator(props: TypingIndicatorProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.TypingIndicatorProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: VideoGallery(VideoGalleryProps)
    uid: '@azure/communication-react.VideoGallery'
    package: '@azure/communication-react'
    summary: >-
      VideoGallery represents a layout of video tiles for a specific call.

      It displays a [VideoTile](xref:@azure/communication-react.VideoTile) for
      the local user as well as for each remote participant who has joined the
      call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function VideoGallery(props: VideoGalleryProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.VideoGalleryProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: VideoTile(VideoTileProps)
    uid: '@azure/communication-react.VideoTile'
    package: '@azure/communication-react'
    summary: >-
      A component to render the video stream for a single call participant.


      Use with [GridLayout](xref:@azure/communication-react.GridLayout) in a
      [VideoGallery](xref:@azure/communication-react.VideoGallery).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function VideoTile(props: VideoTileProps): Element'
      parameters:
        - id: props
          type: <xref uid="@azure/communication-react.VideoTileProps" />
          description: ''
      return:
        description: ''
        type: Element
  - name: createAzureCommunicationCallAdapter(AzureCommunicationCallAdapterArgs)
    uid: '@azure/communication-react.createAzureCommunicationCallAdapter'
    package: '@azure/communication-react'
    summary: >-
      Create a [CallAdapter](xref:@azure/communication-react.CallAdapter) backed
      by Azure Communication Services.


      This is the default implementation of
      [CallAdapter](xref:@azure/communication-react.CallAdapter) provided by
      this library.


      Note: `displayName` can be a maximum of 256 characters.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAzureCommunicationCallAdapter(args:
        AzureCommunicationCallAdapterArgs): Promise<CallAdapter>
      parameters:
        - id: args
          type: >-
            <xref
            uid="@azure/communication-react.AzureCommunicationCallAdapterArgs"
            />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/communication-react.CallAdapter" />&gt;
  - name: >-
      createAzureCommunicationCallAdapter(AzureCommunicationOutboundCallAdapterArgs)
    uid: '@azure/communication-react.createAzureCommunicationCallAdapter_1'
    package: '@azure/communication-react'
    summary: >-
      Create a [CallAdapter](xref:@azure/communication-react.CallAdapter) backed
      by Azure Communication Services.


      This is the default implementation of
      [CallAdapter](xref:@azure/communication-react.CallAdapter) provided by
      this library.


      Note: `displayName` can be a maximum of 256 characters.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAzureCommunicationCallAdapter(args:
        AzureCommunicationOutboundCallAdapterArgs): Promise<CallAdapter>
      parameters:
        - id: args
          type: >-
            <xref
            uid="@azure/communication-react.AzureCommunicationOutboundCallAdapterArgs"
            />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/communication-react.CallAdapter" />&gt;
  - name: >-
      createAzureCommunicationCallAdapterFromClient(StatefulCallClient,
      CallAgent, CommunicationIdentifier[], CommonCallAdapterOptions)
    uid: '@azure/communication-react.createAzureCommunicationCallAdapterFromClient'
    package: '@azure/communication-react'
    summary: >-
      Create a [CallAdapter](xref:@azure/communication-react.CallAdapter) using
      the provided
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).


      Useful if you want to keep a reference to
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).

      Consider using
      [createAzureCommunicationCallAdapter](xref:@azure/communication-react.createAzureCommunicationCallAdapter_1)
      for a simpler API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAzureCommunicationCallAdapterFromClient(callClient:
        StatefulCallClient, callAgent: CallAgent, targetCallees:
        CommunicationIdentifier[], options?: CommonCallAdapterOptions):
        Promise<CallAdapter>
      parameters:
        - id: callClient
          type: <xref uid="@azure/communication-react.StatefulCallClient" />
          description: ''
        - id: callAgent
          type: <xref uid="@azure/communication-calling.CallAgent" />
          description: ''
        - id: targetCallees
          type: <xref uid="@azure/communication-common.CommunicationIdentifier" />[]
          description: ''
        - id: options
          type: <xref uid="@azure/communication-react.CommonCallAdapterOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/communication-react.CallAdapter" />&gt;
  - name: >-
      createAzureCommunicationCallAdapterFromClient(StatefulCallClient,
      CallAgent, CallAdapterLocator, CommonCallAdapterOptions)
    uid: '@azure/communication-react.createAzureCommunicationCallAdapterFromClient_1'
    package: '@azure/communication-react'
    summary: >-
      Create a [CallAdapter](xref:@azure/communication-react.CallAdapter) using
      the provided
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).


      Useful if you want to keep a reference to
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).

      Consider using
      [createAzureCommunicationCallAdapter](xref:@azure/communication-react.createAzureCommunicationCallAdapter_1)
      for a simpler API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAzureCommunicationCallAdapterFromClient(callClient:
        StatefulCallClient, callAgent: CallAgent, locator: CallAdapterLocator,
        options?: CommonCallAdapterOptions): Promise<CallAdapter>
      parameters:
        - id: callClient
          type: <xref uid="@azure/communication-react.StatefulCallClient" />
          description: ''
        - id: callAgent
          type: <xref uid="@azure/communication-calling.CallAgent" />
          description: ''
        - id: locator
          type: <xref uid="@azure/communication-react.CallAdapterLocator" />
          description: ''
        - id: options
          type: <xref uid="@azure/communication-react.CommonCallAdapterOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/communication-react.CallAdapter" />&gt;
  - name: >-
      createAzureCommunicationCallWithChatAdapter(AzureCommunicationCallWithChatAdapterArgs)
    uid: '@azure/communication-react.createAzureCommunicationCallWithChatAdapter'
    package: '@azure/communication-react'
    summary: >-
      Create a CallWithChatAdapter backed by Azure Communication services

      to plug into the
      [CallWithChatComposite](xref:@azure/communication-react.CallWithChatComposite).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAzureCommunicationCallWithChatAdapter(__namedParameters:
        AzureCommunicationCallWithChatAdapterArgs): Promise<CallWithChatAdapter>
      parameters:
        - id: __namedParameters
          type: >-
            <xref
            uid="@azure/communication-react.AzureCommunicationCallWithChatAdapterArgs"
            />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/communication-react.CallWithChatAdapter"
          />&gt;
  - name: >-
      createAzureCommunicationCallWithChatAdapterFromClients(AzureCommunicationCallWithChatAdapterFromClientArgs)
    uid: >-
      @azure/communication-react.createAzureCommunicationCallWithChatAdapterFromClients
    package: '@azure/communication-react'
    summary: >-
      Create a
      [CallWithChatAdapter](xref:@azure/communication-react.CallWithChatAdapter)
      using the provided
      [StatefulChatClient](xref:@azure/communication-react.StatefulChatClient)
      and
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).


      Useful if you want to keep a reference to
      [StatefulChatClient](xref:@azure/communication-react.StatefulChatClient)
      and
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).

      Please note that chatThreadClient has to be created by StatefulChatClient
      via chatClient.getChatThreadClient(chatThreadId) API.

      Consider using
      [createAzureCommunicationCallWithChatAdapter](xref:@azure/communication-react.createAzureCommunicationCallWithChatAdapter)
      for a simpler API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        createAzureCommunicationCallWithChatAdapterFromClients(__namedParameters:
        AzureCommunicationCallWithChatAdapterFromClientArgs):
        Promise<CallWithChatAdapter>
      parameters:
        - id: __namedParameters
          type: >-
            <xref
            uid="@azure/communication-react.AzureCommunicationCallWithChatAdapterFromClientArgs"
            />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/communication-react.CallWithChatAdapter"
          />&gt;
  - name: createAzureCommunicationChatAdapter(AzureCommunicationChatAdapterArgs)
    uid: '@azure/communication-react.createAzureCommunicationChatAdapter'
    package: '@azure/communication-react'
    summary: >-
      Create a [ChatAdapter](xref:@azure/communication-react.ChatAdapter) backed
      by Azure Communication Services.


      This is the default implementation of
      [ChatAdapter](xref:@azure/communication-react.ChatAdapter) provided by
      this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAzureCommunicationChatAdapter(__namedParameters:
        AzureCommunicationChatAdapterArgs): Promise<ChatAdapter>
      parameters:
        - id: __namedParameters
          type: >-
            <xref
            uid="@azure/communication-react.AzureCommunicationChatAdapterArgs"
            />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/communication-react.ChatAdapter" />&gt;
  - name: >-
      createAzureCommunicationChatAdapterFromClient(StatefulChatClient,
      ChatThreadClient, ChatAdapterOptions)
    uid: '@azure/communication-react.createAzureCommunicationChatAdapterFromClient'
    package: '@azure/communication-react'
    summary: >-
      Create a [ChatAdapter](xref:@azure/communication-react.ChatAdapter) using
      the provided
      [StatefulChatClient](xref:@azure/communication-react.StatefulChatClient).


      Useful if you want to keep a reference to
      [StatefulChatClient](xref:@azure/communication-react.StatefulChatClient).

      Consider using
      [createAzureCommunicationChatAdapter](xref:@azure/communication-react.createAzureCommunicationChatAdapter)
      for a simpler API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAzureCommunicationChatAdapterFromClient(chatClient:
        StatefulChatClient, chatThreadClient: ChatThreadClient,
        chatAdapterOptions?: ChatAdapterOptions): Promise<ChatAdapter>
      parameters:
        - id: chatClient
          type: <xref uid="@azure/communication-react.StatefulChatClient" />
          description: ''
        - id: chatThreadClient
          type: <xref uid="@azure/communication-chat.ChatThreadClient" />
          description: ''
        - id: chatAdapterOptions
          type: <xref uid="@azure/communication-react.ChatAdapterOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/communication-react.ChatAdapter" />&gt;
  - name: >-
      createDefaultCallingHandlers(StatefulCallClient, undefined | CallAgent,
      undefined | StatefulDeviceManager, undefined | Call,
      CallingHandlersOptions)
    uid: '@azure/communication-react.createDefaultCallingHandlers'
    package: '@azure/communication-react'
    summary: >-
      Create the default implementation of
      [CallingHandlers](xref:@azure/communication-react.CallingHandlers) for
      teams call.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDefaultCallingHandlers(callClient: StatefulCallClient,
        callAgent: undefined | CallAgent, deviceManager: undefined |
        StatefulDeviceManager, call: undefined | Call, options?:
        CallingHandlersOptions): CallingHandlers
      parameters:
        - id: callClient
          type: <xref uid="@azure/communication-react.StatefulCallClient" />
          description: ''
        - id: callAgent
          type: undefined | <xref uid="@azure/communication-calling.CallAgent" />
          description: ''
        - id: deviceManager
          type: >-
            undefined | <xref
            uid="@azure/communication-react.StatefulDeviceManager" />
          description: ''
        - id: call
          type: undefined | <xref uid="@azure/communication-calling.Call" />
          description: ''
        - id: options
          type: <xref uid="@azure/communication-react.CallingHandlersOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/communication-react.CallingHandlers" />
  - name: createDefaultChatHandlers(StatefulChatClient, ChatThreadClient)
    uid: '@azure/communication-react.createDefaultChatHandlers'
    package: '@azure/communication-react'
    summary: >-
      Create the default implementation of
      [ChatHandlers](xref:@azure/communication-react.ChatHandlers).


      Useful when implementing a custom component that utilizes the providers

      exported from this library.


      Returned object is memoized to avoid rerenders when used as props for
      React Components.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDefaultChatHandlers(chatClient: StatefulChatClient,
        chatThreadClient: ChatThreadClient): ChatHandlers
      parameters:
        - id: chatClient
          type: <xref uid="@azure/communication-react.StatefulChatClient" />
          description: ''
        - id: chatThreadClient
          type: <xref uid="@azure/communication-chat.ChatThreadClient" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/communication-react.ChatHandlers" />
  - name: >-
      createDefaultTeamsCallingHandlers(StatefulCallClient, TeamsCallAgent,
      StatefulDeviceManager, TeamsCall, {
      onResolveDeepNoiseSuppressionDependency?: () =>
      Promise<DeepNoiseSuppressionEffectDependency>,
      onResolveVideoBackgroundEffectsDependency?: () =>
      Promise<VideoBackgroundEffectsDependency> })
    uid: '@azure/communication-react.createDefaultTeamsCallingHandlers'
    package: '@azure/communication-react'
    summary: >-
      Create the default implementation of
      [TeamsCallingHandlers](xref:@azure/communication-react.TeamsCallingHandlers)
      for teams call.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDefaultTeamsCallingHandlers(callClient:
        StatefulCallClient, callAgent?: TeamsCallAgent, deviceManager?:
        StatefulDeviceManager, call?: TeamsCall, options?: {
        onResolveDeepNoiseSuppressionDependency?: () =>
        Promise<DeepNoiseSuppressionEffectDependency>,
        onResolveVideoBackgroundEffectsDependency?: () =>
        Promise<VideoBackgroundEffectsDependency> }): TeamsCallingHandlers
      parameters:
        - id: callClient
          type: <xref uid="@azure/communication-react.StatefulCallClient" />
          description: ''
        - id: callAgent
          type: <xref uid="@azure/communication-calling.TeamsCallAgent" />
          description: ''
        - id: deviceManager
          type: <xref uid="@azure/communication-react.StatefulDeviceManager" />
          description: ''
        - id: call
          type: <xref uid="@azure/communication-calling.TeamsCall" />
          description: ''
        - id: options
          type: >-
            { onResolveDeepNoiseSuppressionDependency?: () =&gt;
            Promise&lt;DeepNoiseSuppressionEffectDependency&gt;,
            onResolveVideoBackgroundEffectsDependency?: () =&gt;
            Promise&lt;VideoBackgroundEffectsDependency&gt; }
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/communication-react.TeamsCallingHandlers" />
  - name: >-
      createStatefulCallClient(StatefulCallClientArgs,
      StatefulCallClientOptions)
    uid: '@azure/communication-react.createStatefulCallClient'
    package: '@azure/communication-react'
    summary: >-
      Creates a StatefulCallClient
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient)
      by proxying CallClient

      <xref:%40azure%2Fcommunication-calling%23CallClient> with ProxyCallClient
      <xref:ProxyCallClient> which then allows access

      to state in a declarative way.


      It is important to use the
      <xref:%40azure%2Fcommunication-calling%23DeviceManager> and

      <xref:%40azure%2Fcommunication-calling%23CallAgent> and
      <xref:%40azure%2Fcommunication-calling%23Call> (and etc.) that are

      obtained from the StatefulCallClient in order for their state changes to
      be proxied properly.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createStatefulCallClient(args: StatefulCallClientArgs,
        options?: StatefulCallClientOptions): StatefulCallClient
      parameters:
        - id: args
          type: <xref uid="@azure/communication-react.StatefulCallClientArgs" />
          description: >-
            [StatefulCallClientArgs](xref:@azure/communication-react.StatefulCallClientArgs)
        - id: options
          type: <xref uid="@azure/communication-react.StatefulCallClientOptions" />
          description: >-
            [StatefulCallClientOptions](xref:@azure/communication-react.StatefulCallClientOptions)
      return:
        description: ''
        type: <xref uid="@azure/communication-react.StatefulCallClient" />
  - name: >-
      createStatefulChatClient(StatefulChatClientArgs,
      StatefulChatClientOptions)
    uid: '@azure/communication-react.createStatefulChatClient'
    package: '@azure/communication-react'
    summary: >-
      Creates a stateful ChatClient
      [StatefulChatClient](xref:@azure/communication-react.StatefulChatClient)
      by proxying ChatClient

      <xref:%40azure%2Fcommunication-chat%23ChatClient> with ProxyChatClient
      <xref:ProxyChatClient> which then allows access

      to state in a declarative way.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createStatefulChatClient(args: StatefulChatClientArgs,
        options?: StatefulChatClientOptions): StatefulChatClient
      parameters:
        - id: args
          type: <xref uid="@azure/communication-react.StatefulChatClientArgs" />
          description: ''
        - id: options
          type: <xref uid="@azure/communication-react.StatefulChatClientOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/communication-react.StatefulChatClient" />
  - name: createTeamsCallAdapter(TeamsCallAdapterArgs)
    uid: '@azure/communication-react.createTeamsCallAdapter'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createTeamsCallAdapter(args: TeamsCallAdapterArgs):
        Promise<TeamsCallAdapter>
      parameters:
        - id: args
          type: <xref uid="@azure/communication-react.TeamsCallAdapterArgs" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/communication-react.TeamsCallAdapter"
          />&gt;
  - name: >-
      createTeamsCallAdapterFromClient(StatefulCallClient, TeamsCallAgent,
      CallAdapterLocator, CommonCallAdapterOptions)
    uid: '@azure/communication-react.createTeamsCallAdapterFromClient'
    package: '@azure/communication-react'
    summary: >-
      Create a
      [TeamsCallAdapter](xref:@azure/communication-react.TeamsCallAdapter) using
      the provided
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).


      Useful if you want to keep a reference to
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient).

      Consider using
      [createAzureCommunicationCallAdapter](xref:@azure/communication-react.createAzureCommunicationCallAdapter_1)
      for a simpler API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createTeamsCallAdapterFromClient(callClient:
        StatefulCallClient, callAgent: TeamsCallAgent, locator:
        CallAdapterLocator, options?: CommonCallAdapterOptions):
        Promise<TeamsCallAdapter>
      parameters:
        - id: callClient
          type: <xref uid="@azure/communication-react.StatefulCallClient" />
          description: ''
        - id: callAgent
          type: <xref uid="@azure/communication-calling.TeamsCallAgent" />
          description: ''
        - id: locator
          type: <xref uid="@azure/communication-react.CallAdapterLocator" />
          description: ''
        - id: options
          type: <xref uid="@azure/communication-react.CommonCallAdapterOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/communication-react.TeamsCallAdapter"
          />&gt;
  - name: fromFlatCommunicationIdentifier(string)
    uid: '@azure/communication-react.fromFlatCommunicationIdentifier'
    package: '@azure/communication-react'
    summary: >-
      Reverse operation of
      [toFlatCommunicationIdentifier](xref:@azure/communication-react.toFlatCommunicationIdentifier).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function fromFlatCommunicationIdentifier(id: string):
        CommunicationIdentifier
      parameters:
        - id: id
          type: string
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/communication-common.CommunicationIdentifier" />
  - name: getCallingSelector<Component>(Component)
    uid: '@azure/communication-react.getCallingSelector'
    package: '@azure/communication-react'
    summary: |-
      Get the selector for a specified component.

      Useful when implementing a custom component that utilizes the providers
      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCallingSelector<Component>(component: Component):
        GetCallingSelector<Component>
      parameters:
        - id: component
          type: Component
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/communication-react.GetCallingSelector"
          />&lt;Component&gt;
  - name: getChatSelector<Component>(Component)
    uid: '@azure/communication-react.getChatSelector'
    package: '@azure/communication-react'
    summary: |-
      Get the selector for a specified component.

      Useful when implementing a custom component that utilizes the providers
      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChatSelector<Component>(component: Component):
        GetChatSelector<Component>
      parameters:
        - id: component
          type: Component
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/communication-react.GetChatSelector"
          />&lt;Component&gt;
  - name: loadCallComposite(CallCompositeLoaderProps, HTMLElement)
    uid: '@azure/communication-react.loadCallComposite'
    package: '@azure/communication-react'
    summary: >-
      Loader function for the CallComposite that you can use in your
      application. This

      function will load the CallComposite into the provided HTML element. The
      best use case for this

      is in a Node ui framework that is not React based.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loadCallComposite(loaderArgs: CallCompositeLoaderProps,
        htmlElement: HTMLElement): Promise<undefined | CallAdapter>
      parameters:
        - id: loaderArgs
          type: <xref uid="@azure/communication-react.CallCompositeLoaderProps" />
          description: ''
        - id: htmlElement
          type: HTMLElement
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;undefined | <xref
          uid="@azure/communication-react.CallAdapter" />&gt;
  - name: loadCallWithChatComposite(CallWithChatCompositeLoaderProps, HTMLElement)
    uid: '@azure/communication-react.loadCallWithChatComposite'
    package: '@azure/communication-react'
    summary: >-
      Props for the CallWithChatComposite that you can use in your application.
      This

      function will load the CallWithChatComposite into the provided HTML
      element.

      The best use case for this is in a Node UI framework that is not React
      based.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loadCallWithChatComposite(loaderArgs:
        CallWithChatCompositeLoaderProps, htmlElement: HTMLElement):
        Promise<undefined | CallWithChatAdapter>
      parameters:
        - id: loaderArgs
          type: >-
            <xref
            uid="@azure/communication-react.CallWithChatCompositeLoaderProps" />
          description: ''
        - id: htmlElement
          type: HTMLElement
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;undefined | <xref
          uid="@azure/communication-react.CallWithChatAdapter" />&gt;
  - name: loadChatComposite(ChatCompositeLoaderProps, HTMLElement)
    uid: '@azure/communication-react.loadChatComposite'
    package: '@azure/communication-react'
    summary: >-
      Loader function for the ChatComposite that you can use in your
      application. This

      function will load the ChatComposite into the provided HTML element.

      The best use case for this is in a Node UI framework that is not React
      based.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loadChatComposite(loaderArgs: ChatCompositeLoaderProps,
        htmlElement: HTMLElement): Promise<undefined | ChatAdapter>
      parameters:
        - id: loaderArgs
          type: <xref uid="@azure/communication-react.ChatCompositeLoaderProps" />
          description: ''
        - id: htmlElement
          type: HTMLElement
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;undefined | <xref
          uid="@azure/communication-react.ChatAdapter" />&gt;
  - name: loadOutboundCallComposite(OutboundCallCompositeLoaderProps, HTMLElement)
    uid: '@azure/communication-react.loadOutboundCallComposite'
    package: '@azure/communication-react'
    summary: >-
      Loader function for the OutboundCallComposite that you can use in your
      application. This

      function will load the CallComposite into the provided HTML element to
      make outbound calls.

      The best use case for this is in a Node UI framework that is not React
      based.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loadOutboundCallComposite(loaderArgs:
        OutboundCallCompositeLoaderProps, htmlElement: HTMLElement):
        Promise<undefined | CallAdapter>
      parameters:
        - id: loaderArgs
          type: >-
            <xref
            uid="@azure/communication-react.OutboundCallCompositeLoaderProps" />
          description: ''
        - id: htmlElement
          type: HTMLElement
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;undefined | <xref
          uid="@azure/communication-react.CallAdapter" />&gt;
  - name: onResolveDeepNoiseSuppressionDependency()
    uid: '@azure/communication-react.onResolveDeepNoiseSuppressionDependency'
    package: '@azure/communication-react'
    summary: Dependency resolution for video background effects using lazy loading.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onResolveDeepNoiseSuppressionDependency():
        Promise<DeepNoiseSuppressionEffectDependency>
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/communication-react.DeepNoiseSuppressionEffectDependency"
          />&gt;
  - name: onResolveDeepNoiseSuppressionDependencyLazy()
    uid: '@azure/communication-react.onResolveDeepNoiseSuppressionDependencyLazy'
    package: '@azure/communication-react'
    summary: Dependency resolution for video background effects using lazy loading.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onResolveDeepNoiseSuppressionDependencyLazy():
        Promise<DeepNoiseSuppressionEffectDependency>
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/communication-react.DeepNoiseSuppressionEffectDependency"
          />&gt;
  - name: onResolveVideoEffectDependency()
    uid: '@azure/communication-react.onResolveVideoEffectDependency'
    package: '@azure/communication-react'
    summary: Dependency resolution for video background effects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onResolveVideoEffectDependency():
        Promise<VideoBackgroundEffectsDependency>
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/communication-react.VideoBackgroundEffectsDependency"
          />&gt;
  - name: onResolveVideoEffectDependencyLazy()
    uid: '@azure/communication-react.onResolveVideoEffectDependencyLazy'
    package: '@azure/communication-react'
    summary: Dependency resolution for video background effects using lazy loading.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onResolveVideoEffectDependencyLazy():
        Promise<VideoBackgroundEffectsDependency>
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/communication-react.VideoBackgroundEffectsDependency"
          />&gt;
  - name: toFlatCommunicationIdentifier(CommunicationIdentifier)
    uid: '@azure/communication-react.toFlatCommunicationIdentifier'
    package: '@azure/communication-react'
    summary: >-
      A string representation of a
      <xref:%40azure%2Fcommunication-common%23CommunicationIdentifier>.


      This string representation of CommunicationIdentifier is guaranteed to be
      stable for

      a unique Communication user. Thus,

      - it can be used to persist a user's identity in external databases.

      - it can be used as keys into a Map to store data for the user.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function toFlatCommunicationIdentifier(identifier:
        CommunicationIdentifier): string
      parameters:
        - id: identifier
          type: <xref uid="@azure/communication-common.CommunicationIdentifier" />
          description: ''
      return:
        description: ''
        type: string
  - name: >-
      useAzureCommunicationCallAdapter(Partial<AzureCommunicationCallAdapterArgs
      | AzureCommunicationOutboundCallAdapterArgs>, (adapter: CallAdapter) =>
      Promise<CallAdapter>, (adapter: CallAdapter) => Promise<void>)
    uid: '@azure/communication-react.useAzureCommunicationCallAdapter'
    package: '@azure/communication-react'
    summary: >-
      A custom React hook to simplify the creation of
      [CallAdapter](xref:@azure/communication-react.CallAdapter).


      Similar to
      [createAzureCommunicationCallAdapter](xref:@azure/communication-react.createAzureCommunicationCallAdapter_1),
      but takes care of asynchronous

      creation of the adapter internally.


      Allows arguments to be undefined so that you can respect the rule-of-hooks
      and pass in arguments

      as they are created. The adapter is only created when all arguments are
      defined.


      Note that you must memoize the arguments to avoid recreating adapter on
      each render.

      See storybook for typical usage examples.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function useAzureCommunicationCallAdapter(args:
        Partial<AzureCommunicationCallAdapterArgs |
        AzureCommunicationOutboundCallAdapterArgs>, afterCreate?: (adapter:
        CallAdapter) => Promise<CallAdapter>, beforeDispose?: (adapter:
        CallAdapter) => Promise<void>): undefined | CallAdapter
      parameters:
        - id: args
          type: >-
            Partial&lt;<xref
            uid="@azure/communication-react.AzureCommunicationCallAdapterArgs"
            /> | <xref
            uid="@azure/communication-react.AzureCommunicationOutboundCallAdapterArgs"
            />&gt;
          description: ''
        - id: afterCreate
          type: '(adapter: CallAdapter) =&gt; Promise&lt;CallAdapter&gt;'
          description: ''
        - id: beforeDispose
          type: '(adapter: CallAdapter) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-react.CallAdapter" />
  - name: >-
      useAzureCommunicationCallWithChatAdapter(Partial<AzureCommunicationCallWithChatAdapterArgs>,
      (adapter: CallWithChatAdapter) => Promise<CallWithChatAdapter>, (adapter:
      CallWithChatAdapter) => Promise<void>)
    uid: '@azure/communication-react.useAzureCommunicationCallWithChatAdapter'
    package: '@azure/communication-react'
    summary: >-
      A custom React hook to simplify the creation of
      [CallWithChatAdapter](xref:@azure/communication-react.CallWithChatAdapter).


      Similar to
      [createAzureCommunicationCallWithChatAdapter](xref:@azure/communication-react.createAzureCommunicationCallWithChatAdapter),
      but takes care of asynchronous

      creation of the adapter internally.


      Allows arguments to be undefined so that you can respect the rule-of-hooks
      and pass in arguments

      as they are created. The adapter is only created when all arguments are
      defined.


      Note that you must memoize the arguments to avoid recreating adapter on
      each render.

      See storybook for typical usage examples.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function useAzureCommunicationCallWithChatAdapter(args:
        Partial<AzureCommunicationCallWithChatAdapterArgs>, afterCreate?:
        (adapter: CallWithChatAdapter) => Promise<CallWithChatAdapter>,
        beforeDispose?: (adapter: CallWithChatAdapter) => Promise<void>):
        undefined | CallWithChatAdapter
      parameters:
        - id: args
          type: >-
            Partial&lt;<xref
            uid="@azure/communication-react.AzureCommunicationCallWithChatAdapterArgs"
            />&gt;
          description: ''
        - id: afterCreate
          type: >-
            (adapter: CallWithChatAdapter) =&gt;
            Promise&lt;CallWithChatAdapter&gt;
          description: ''
        - id: beforeDispose
          type: '(adapter: CallWithChatAdapter) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: >-
          undefined | <xref uid="@azure/communication-react.CallWithChatAdapter"
          />
  - name: >-
      useAzureCommunicationChatAdapter(Partial<AzureCommunicationChatAdapterArgs>,
      (adapter: ChatAdapter) => Promise<ChatAdapter>, (adapter: ChatAdapter) =>
      Promise<void>)
    uid: '@azure/communication-react.useAzureCommunicationChatAdapter'
    package: '@azure/communication-react'
    summary: >-
      A custom React hook to simplify the creation of
      [ChatAdapter](xref:@azure/communication-react.ChatAdapter).


      Similar to
      [createAzureCommunicationChatAdapter](xref:@azure/communication-react.createAzureCommunicationChatAdapter),
      but takes care of asynchronous

      creation of the adapter internally.


      Allows arguments to be undefined so that you can respect the rule-of-hooks
      and pass in arguments

      as they are created. The adapter is only created when all arguments are
      defined.


      Note that you must memoize the arguments to avoid recreating adapter on
      each render.

      See storybook for typical usage examples.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function useAzureCommunicationChatAdapter(args:
        Partial<AzureCommunicationChatAdapterArgs>, afterCreate?: (adapter:
        ChatAdapter) => Promise<ChatAdapter>, beforeDispose?: (adapter:
        ChatAdapter) => Promise<void>): undefined | ChatAdapter
      parameters:
        - id: args
          type: >-
            Partial&lt;<xref
            uid="@azure/communication-react.AzureCommunicationChatAdapterArgs"
            />&gt;
          description: ''
        - id: afterCreate
          type: '(adapter: ChatAdapter) =&gt; Promise&lt;ChatAdapter&gt;'
          description: ''
        - id: beforeDispose
          type: '(adapter: ChatAdapter) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-react.ChatAdapter" />
  - name: useCall()
    uid: '@azure/communication-react.useCall'
    package: '@azure/communication-react'
    summary: >-
      Hook to obtain <xref:%40azure%2Fcommunication-calling%23Call> from the
      provider.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.


      you must have previously used the CallProvider with a Call object to use
      this hook
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useCall(): undefined | Call'
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.Call" />
  - name: useCallAgent()
    uid: '@azure/communication-react.useCallAgent'
    package: '@azure/communication-react'
    summary: >-
      Hook to obtain <xref:%40azure%2Fcommunication-calling%23CallAgent> from
      the provider.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useCallAgent(): undefined | CallAgent'
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.CallAgent" />
  - name: useCallClient()
    uid: '@azure/communication-react.useCallClient'
    package: '@azure/communication-react'
    summary: >-
      Hook to obtain
      [StatefulCallClient](xref:@azure/communication-react.StatefulCallClient)
      from the provider.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useCallClient(): StatefulCallClient'
      return:
        description: ''
        type: <xref uid="@azure/communication-react.StatefulCallClient" />
  - name: useChatClient()
    uid: '@azure/communication-react.useChatClient'
    package: '@azure/communication-react'
    summary: >-
      Hook to obtain
      [StatefulChatClient](xref:@azure/communication-react.StatefulChatClient)
      from the provider.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useChatClient(): StatefulChatClient'
      return:
        description: ''
        type: <xref uid="@azure/communication-react.StatefulChatClient" />
  - name: useChatThreadClient()
    uid: '@azure/communication-react.useChatThreadClient'
    package: '@azure/communication-react'
    summary: >-
      Hook to obtain <xref:%40azure%2Fcommunication-chat%23ChatThreadClient>
      from the provider.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useChatThreadClient(): ChatThreadClient'
      return:
        description: ''
        type: <xref uid="@azure/communication-chat.ChatThreadClient" />
  - name: useDeviceManager()
    uid: '@azure/communication-react.useDeviceManager'
    package: '@azure/communication-react'
    summary: >-
      Hook to obtain
      [StatefulDeviceManager](xref:@azure/communication-react.StatefulDeviceManager)
      from the provider.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useDeviceManager(): undefined | StatefulDeviceManager'
      return:
        description: ''
        type: >-
          undefined | <xref
          uid="@azure/communication-react.StatefulDeviceManager" />
  - name: usePropsFor<Component>(Component, "chat" | "calling")
    uid: '@azure/communication-react.usePropsFor'
    package: '@azure/communication-react'
    summary: >+
      Primary hook to get all hooks necessary for a React Component from this
      library.


      To call this hook, the component requires to be wrapped under these
      providers:


      1. For chat components:
      [ChatClientProvider](xref:@azure/communication-react.ChatClientProvider)
      and
      [ChatThreadClientProvider](xref:@azure/communication-react.ChatThreadClientProvider).


      2. For calling components:
      [CallClientProvider](xref:@azure/communication-react.CallClientProvider),
      [CallAgentProvider](xref:@azure/communication-react.CallAgentProvider) and
      [CallAgentProvider](xref:@azure/communication-react.CallAgentProvider).


      Most straightforward usage of a components looks like:


      **Example**


      ```
          import { ParticipantList, usePropsFor } from '@azure/communication-react';

          const App = (): JSX.Element => {
              // ... code to setup Providers ...

              return <ParticipantList {...usePropsFor(ParticipantList)}/>
          }
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function usePropsFor<Component>(component: Component, type?: "chat" |
        "calling"): ComponentProps<Component>
      parameters:
        - id: component
          type: Component
          description: ''
        - id: type
          type: '"chat" | "calling"'
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/communication-react.ComponentProps"
          />&lt;Component&gt;
  - name: >-
      useSelector<ParamT>(ParamT, (ParamT extends Selector ?
      Parameters<ParamT>[1] : undefined), "chat" | "calling")
    uid: '@azure/communication-react.useSelector'
    package: '@azure/communication-react'
    summary: |-
      Hook to obtain a selector for a specified component.

      Useful when implementing a custom component that utilizes the providers
      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function useSelector<ParamT>(selector: ParamT, selectorProps?: (ParamT
        extends Selector ? Parameters<ParamT>[1] : undefined), type?: "chat" |
        "calling"): (ParamT extends Selector ? ReturnType<ParamT> : undefined)
      parameters:
        - id: selector
          type: ParamT
          description: ''
        - id: selectorProps
          type: '(ParamT extends Selector ? Parameters&lt;ParamT&gt;[1] : undefined)'
          description: ''
        - id: type
          type: '"chat" | "calling"'
          description: ''
      return:
        description: ''
        type: '(ParamT extends Selector ? ReturnType&lt;ParamT&gt; : undefined)'
  - name: useTeamsCall()
    uid: '@azure/communication-react.useTeamsCall'
    package: '@azure/communication-react'
    summary: >-
      Hook to obtain <xref:%40azure%2Fcommunication-calling%23TeamsCall> from
      the provider.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.


      you must have previously used the CallProvider with a TeamsCall object to
      use this hook
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useTeamsCall(): undefined | TeamsCall'
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.TeamsCall" />
  - name: >-
      useTeamsCallAdapter(Partial<TeamsCallAdapterArgs>, (adapter:
      TeamsCallAdapter) => Promise<TeamsCallAdapter>, (adapter:
      TeamsCallAdapter) => Promise<void>)
    uid: '@azure/communication-react.useTeamsCallAdapter'
    package: '@azure/communication-react'
    summary: >-
      A custom React hook to simplify the creation of
      [TeamsCallAdapter](xref:@azure/communication-react.TeamsCallAdapter).


      Similar to <xref:createTeamsAzureCommunicationCallAdapter>, but takes care
      of asynchronous

      creation of the adapter internally.


      Allows arguments to be undefined so that you can respect the rule-of-hooks
      and pass in arguments

      as they are created. The adapter is only created when all arguments are
      defined.


      Note that you must memoize the arguments to avoid recreating adapter on
      each render.

      See storybook for typical usage examples.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function useTeamsCallAdapter(args: Partial<TeamsCallAdapterArgs>,
        afterCreate?: (adapter: TeamsCallAdapter) => Promise<TeamsCallAdapter>,
        beforeDispose?: (adapter: TeamsCallAdapter) => Promise<void>): undefined
        | TeamsCallAdapter
      parameters:
        - id: args
          type: >-
            Partial&lt;<xref
            uid="@azure/communication-react.TeamsCallAdapterArgs" />&gt;
          description: ''
        - id: afterCreate
          type: '(adapter: TeamsCallAdapter) =&gt; Promise&lt;TeamsCallAdapter&gt;'
          description: ''
        - id: beforeDispose
          type: '(adapter: TeamsCallAdapter) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-react.TeamsCallAdapter" />
  - name: useTeamsCallAgent()
    uid: '@azure/communication-react.useTeamsCallAgent'
    package: '@azure/communication-react'
    summary: >-
      Hook to obtain <xref:%40azure%2Fcommunication-calling%23TeamsCallAgent>
      from the provider.


      Useful when implementing a custom component that utilizes the providers

      exported from this library.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useTeamsCallAgent(): undefined | TeamsCallAgent'
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.TeamsCallAgent" />
  - name: useTheme()
    uid: '@azure/communication-react.useTheme'
    package: '@azure/communication-react'
    summary: React hook to access theme
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useTheme(): Theme'
      return:
        description: ''
        type: Theme
