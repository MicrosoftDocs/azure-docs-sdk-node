### YamlMime:TSType
name: Trigger
uid: '@azure/cosmos.Trigger'
package: '@azure/cosmos'
summary: >-
  Operations to read, replace, or delete a
  [Trigger](xref:@azure/cosmos.Trigger).


  Use `container.triggers` to create, upsert, query, or read all.
fullName: Trigger
remarks: ''
isDeprecated: false
type: class
properties:
  - name: container
    uid: '@azure/cosmos.Trigger.container'
    package: '@azure/cosmos'
    summary: ''
    fullName: container
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'container: Container'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container" />
  - name: id
    uid: '@azure/cosmos.Trigger.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/cosmos.Trigger.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
methods:
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Trigger.delete'
    package: '@azure/cosmos'
    summary: >+
      Delete the given [Trigger](xref:@azure/cosmos.Trigger).


      **Example**


      ```ts snippet:TriggerDelete

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      await container.scripts.trigger("<trigger-id>").delete();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<TriggerResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.TriggerResponse" />&gt;
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Trigger.read'
    package: '@azure/cosmos'
    summary: >+
      Read the [TriggerDefinition](xref:@azure/cosmos.TriggerDefinition) for the
      given [Trigger](xref:@azure/cosmos.Trigger).


      **Example**


      ```ts snippet:TriggerRead

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const { resource: trigger } = await
      container.scripts.trigger("<trigger-id>").read();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<TriggerResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.TriggerResponse" />&gt;
  - name: replace(TriggerDefinition, RequestOptions)
    uid: '@azure/cosmos.Trigger.replace'
    package: '@azure/cosmos'
    summary: >+
      Replace the given [Trigger](xref:@azure/cosmos.Trigger) with the specified
      [TriggerDefinition](xref:@azure/cosmos.TriggerDefinition).


      **Example**


      ```ts snippet:TriggerReplace

      import { CosmosClient, TriggerDefinition, TriggerType, TriggerOperation }
      from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const triggerDefinition: TriggerDefinition = {
        id: "sample trigger",
        body: "serverScript() { var x = 10; }",
        triggerType: TriggerType.Pre,
        triggerOperation: TriggerOperation.All,
      };


      const { resource: trigger } = await
      container.scripts.triggers.create(triggerDefinition);


      trigger.body = "function () { const x = 20; console.log(x); }";

      const { resource: replacedTrigger } = await
      container.scripts.trigger(trigger.id).replace(trigger);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replace(body: TriggerDefinition, options?: RequestOptions):
        Promise<TriggerResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.TriggerDefinition" />
          description: >-
            The specified
            [TriggerDefinition](xref:@azure/cosmos.TriggerDefinition) to replace
            the existing definition with.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.TriggerResponse" />&gt;
