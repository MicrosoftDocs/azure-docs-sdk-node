### YamlMime:TSType
name: BatchJobManagerTaskOutput
uid: '@azure-rest/batch.BatchJobManagerTaskOutput'
package: '@azure-rest/batch'
summary: >-
  Specifies details of a Job Manager Task.

  The Job Manager Task is automatically started when the Job is created. The

  Batch service tries to schedule the Job Manager Task before any other Tasks in

  the Job. When shrinking a Pool, the Batch service tries to preserve Nodes
  where

  Job Manager Tasks are running for as long as possible (that is, Compute Nodes

  running 'normal' Tasks are removed before Compute Nodes running Job Manager

  Tasks). When a Job Manager Task fails and needs to be restarted, the system

  tries to schedule it at the highest priority. If there are no idle Compute

  Nodes available, the system may terminate one of the running Tasks in the Pool

  and return it to the queue in order to make room for the Job Manager Task to

  restart. Note that a Job Manager Task in one Job does not have priority over

  Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For

  example, if a Job Manager in a priority 0 Job needs to be restarted, it will

  not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery

  operation is triggered on a Node. Examples of recovery operations include (but

  are not limited to) when an unhealthy Node is rebooted or a Compute Node

  disappeared due to host failure. Retries due to recovery operations are

  independent of and are not counted against the maxTaskRetryCount. Even if the

  maxTaskRetryCount is 0, an internal retry due to a recovery operation may

  occur. Because of this, all Tasks should be idempotent. This means Tasks need

  to tolerate being interrupted and restarted without causing any corruption or

  duplicate data. The best practice for long running Tasks is to use some form
  of

  checkpointing.
fullName: BatchJobManagerTaskOutput
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: allowLowPriorityNode
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.allowLowPriorityNode'
    package: '@azure-rest/batch'
    summary: >-
      Whether the Job Manager Task may run on a Spot/Low-priority Compute Node.
      The default value is true.
    fullName: allowLowPriorityNode
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'allowLowPriorityNode?: boolean'
      return:
        description: ''
        type: boolean
  - name: applicationPackageReferences
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.applicationPackageReferences'
    package: '@azure-rest/batch'
    summary: >-
      A list of Application Packages that the Batch service will deploy to the

      Compute Node before running the command line.Application Packages are

      downloaded and deployed to a shared directory, not the Task working

      directory. Therefore, if a referenced Application Package is already

      on the Compute Node, and is up to date, then it is not re-downloaded;

      the existing copy on the Compute Node is used. If a referenced Application

      Package cannot be installed, for example because the package has been
      deleted

      or because download failed, the Task fails.
    fullName: applicationPackageReferences
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'applicationPackageReferences?: BatchApplicationPackageReferenceOutput[]'
      return:
        description: ''
        type: >-
          <xref uid="@azure-rest/batch.BatchApplicationPackageReferenceOutput"
          />[]
  - name: authenticationTokenSettings
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.authenticationTokenSettings'
    package: '@azure-rest/batch'
    summary: >-
      The settings for an authentication token that the Task can use to perform
      Batch service operations. If this property is set, the Batch service
      provides the Task with an authentication token which can be used to
      authenticate Batch service operations without requiring an Account access
      key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN
      environment variable. The operations that the Task can carry out using the
      token depend on the settings. For example, a Task can request Job
      permissions in order to add other Tasks to the Job, or check the status of
      the Job or of other Tasks under the Job.
    fullName: authenticationTokenSettings
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'authenticationTokenSettings?: AuthenticationTokenSettingsOutput'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.AuthenticationTokenSettingsOutput" />
  - name: commandLine
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.commandLine'
    package: '@azure-rest/batch'
    summary: >-
      The command line of the Job Manager Task. The command line does not run
      under a shell, and therefore cannot take advantage of shell features such
      as environment variable expansion. If you want to take advantage of such
      features, you should invoke the shell in the command line, for example
      using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If
      the command line refers to file paths, it should use a relative path
      (relative to the Task working directory), or use the Batch provided
      environment variable
      (https://learn.microsoft.com/azure/batch/batch-compute-node-environment-variables).
    fullName: commandLine
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'commandLine: string'
      return:
        description: ''
        type: string
  - name: constraints
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.constraints'
    package: '@azure-rest/batch'
    summary: Constraints that apply to the Job Manager Task.
    fullName: constraints
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'constraints?: BatchTaskConstraintsOutput'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchTaskConstraintsOutput" />
  - name: containerSettings
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.containerSettings'
    package: '@azure-rest/batch'
    summary: >-
      The settings for the container under which the Job Manager Task runs. If
      the Pool that will run this Task has containerConfiguration set, this must
      be set as well. If the Pool that will run this Task doesn't have
      containerConfiguration set, this must not be set. When this is specified,
      all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of
      Azure Batch directories on the node) are mapped into the container, all
      Task environment variables are mapped into the container, and the Task
      command line is executed in the container. Files produced in the container
      outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk,
      meaning that Batch file APIs will not be able to access those files.
    fullName: containerSettings
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'containerSettings?: BatchTaskContainerSettingsOutput'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.BatchTaskContainerSettingsOutput" />
  - name: displayName
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.displayName'
    package: '@azure-rest/batch'
    summary: >-
      The display name of the Job Manager Task. It need not be unique and can
      contain any Unicode characters up to a maximum length of 1024.
    fullName: displayName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'displayName?: string'
      return:
        description: ''
        type: string
  - name: environmentSettings
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.environmentSettings'
    package: '@azure-rest/batch'
    summary: A list of environment variable settings for the Job Manager Task.
    fullName: environmentSettings
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'environmentSettings?: EnvironmentSettingOutput[]'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.EnvironmentSettingOutput" />[]
  - name: id
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.id'
    package: '@azure-rest/batch'
    summary: >-
      A string that uniquely identifies the Job Manager Task within the Job. The
      ID can contain any combination of alphanumeric characters including
      hyphens and underscores and cannot contain more than 64 characters.
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: killJobOnCompletion
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.killJobOnCompletion'
    package: '@azure-rest/batch'
    summary: >-
      Whether completion of the Job Manager Task signifies completion of the
      entire Job. If true, when the Job Manager Task completes, the Batch
      service marks the Job as complete. If any Tasks are still running at this
      time (other than Job Release), those Tasks are terminated. If false, the
      completion of the Job Manager Task does not affect the Job status. In this
      case, you should either use the onAllTasksComplete attribute to terminate
      the Job, or have a client or user terminate the Job explicitly. An example
      of this is if the Job Manager creates a set of Tasks but then takes no
      further role in their execution. The default value is true. If you are
      using the onAllTasksComplete and onTaskFailure attributes to control Job
      lifetime, and using the Job Manager Task only to create the Tasks for the
      Job (not to monitor progress), then it is important to set
      killJobOnCompletion to false.
    fullName: killJobOnCompletion
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'killJobOnCompletion?: boolean'
      return:
        description: ''
        type: boolean
  - name: outputFiles
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.outputFiles'
    package: '@azure-rest/batch'
    summary: >-
      A list of files that the Batch service will upload from the Compute Node
      after running the command line. For multi-instance Tasks, the files will
      only be uploaded from the Compute Node on which the primary Task is
      executed.
    fullName: outputFiles
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'outputFiles?: OutputFileOutput[]'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.OutputFileOutput" />[]
  - name: requiredSlots
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.requiredSlots'
    package: '@azure-rest/batch'
    summary: >-
      The number of scheduling slots that the Task requires to run. The default
      is 1. A Task can only be scheduled to run on a compute node if the node
      has enough free scheduling slots available. For multi-instance Tasks, this
      property is not supported and must not be specified.
    fullName: requiredSlots
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'requiredSlots?: number'
      return:
        description: ''
        type: number
  - name: resourceFiles
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.resourceFiles'
    package: '@azure-rest/batch'
    summary: >-
      A list of files that the Batch service will download to the Compute Node
      before running the command line. Files listed under this element are
      located in the Task's working directory. There is a maximum size for the
      list of resource files.  When the max size is exceeded, the request will
      fail and the response error code will be RequestEntityTooLarge. If this
      occurs, the collection of ResourceFiles must be reduced in size. This can
      be achieved using .zip files, Application Packages, or Docker Containers.
    fullName: resourceFiles
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'resourceFiles?: ResourceFileOutput[]'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.ResourceFileOutput" />[]
  - name: runExclusive
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.runExclusive'
    package: '@azure-rest/batch'
    summary: >-
      Whether the Job Manager Task requires exclusive use of the Compute Node
      where it runs. If true, no other Tasks will run on the same Node for as
      long as the Job Manager is running. If false, other Tasks can run
      simultaneously with the Job Manager on a Compute Node. The Job Manager
      Task counts normally against the Compute Node's concurrent Task limit, so
      this is only relevant if the Compute Node allows multiple concurrent
      Tasks. The default value is true.
    fullName: runExclusive
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'runExclusive?: boolean'
      return:
        description: ''
        type: boolean
  - name: userIdentity
    uid: '@azure-rest/batch.BatchJobManagerTaskOutput.userIdentity'
    package: '@azure-rest/batch'
    summary: >-
      The user identity under which the Job Manager Task runs. If omitted, the
      Task runs as a non-administrative user unique to the Task.
    fullName: userIdentity
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'userIdentity?: UserIdentityOutput'
      return:
        description: ''
        type: <xref uid="@azure-rest/batch.UserIdentityOutput" />
