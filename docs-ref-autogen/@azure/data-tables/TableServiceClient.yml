### YamlMime:TSType
name: TableServiceClient
uid: '@azure/data-tables.TableServiceClient'
package: '@azure/data-tables'
summary: >-
  A TableServiceClient represents a Client to the Azure Tables service allowing
  you

  to perform operations on the tables and the entities.
fullName: TableServiceClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: TableServiceClient(string, NamedKeyCredential, TableServiceClientOptions)
    uid: '@azure/data-tables.TableServiceClient.constructor'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableServiceClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TableServiceClient(url: string, credential: NamedKeyCredential,
        options?: TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as "https://myaccount.table.core.windows.net".
        - id: credential
          type: <xref uid="@azure/data-tables.NamedKeyCredential" />
          description: >-
            NamedKeyCredential | SASCredential used to authenticate requests.
            Only Supported for Node
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: >-
            Options to configure the HTTP pipeline.


            ### Example using an account name/key:


            ```ts snippet:ReadmeSampleCreateClient_NamedKeyCredential

            import { AzureNamedKeyCredential, TableServiceClient } from
            "@azure/data-tables";


            const account = "<account>";

            const accountKey = "<accountkey>";


            const credential = new AzureNamedKeyCredential(account, accountKey);

            const serviceClient = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              credential,
            );

            ```
  - name: TableServiceClient(string, SASCredential, TableServiceClientOptions)
    uid: '@azure/data-tables.TableServiceClient.constructor_1'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableServiceClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TableServiceClient(url: string, credential: SASCredential, options?:
        TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as "https://myaccount.table.core.windows.net".
        - id: credential
          type: <xref uid="@azure/core-auth.SASCredential" />
          description: SASCredential used to authenticate requests
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: >-
            Options to configure the HTTP pipeline.


            ### Example using a SAS Token.


            ```ts snippet:ReadmeSampleCreateClient_SASToken

            import { TableServiceClient, AzureSASCredential } from
            "@azure/data-tables";


            const account = "<account name>";

            const sas = "<service Shared Access Signature Token>";


            const serviceClientWithSAS = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              new AzureSASCredential(sas),
            );

            ```
  - name: TableServiceClient(string, TableServiceClientOptions)
    uid: '@azure/data-tables.TableServiceClient.constructor_3'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableServiceClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new TableServiceClient(url: string, options?: TableServiceClientOptions)'
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as
                         "https://myaccount.table.core.windows.net". You can append a SAS,
                         such as "https://myaccount.table.core.windows.net?sasString".
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: |-
            Options to configure the HTTP pipeline.
            Example appending a SAS token:

            ```ts snippet:ReadmeSampleCreateClient_SASTokenURL
            import { TableServiceClient } from "@azure/data-tables";

            const account = "<account name>";
            const sasToken = "<SAS token>";
            const tableName = "<tableName>";

            const serviceClientWithSASURL = new TableServiceClient(
              `https://${account}.table.core.windows.net?${sasToken}`,
            );
            ```
  - name: TableServiceClient(string, TokenCredential, TableServiceClientOptions)
    uid: '@azure/data-tables.TableServiceClient.constructor_2'
    package: '@azure/data-tables'
    summary: Creates a new instance of the TableServiceClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TableServiceClient(url: string, credential: TokenCredential,
        options?: TableServiceClientOptions)
      parameters:
        - id: url
          type: string
          description: >-
            The URL of the service account that is the target of the desired
            operation., such as "https://myaccount.table.core.windows.net".
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: Azure Active Directory credential used to authenticate requests
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: |-
            Options to configure the HTTP pipeline.

            ### Example using an Azure Active Directory credential:

            ```ts snippet:ReadmeSampleCreateClient_TokenCredential
            import { DefaultAzureCredential } from "@azure/identity";
            import { TableServiceClient } from "@azure/data-tables";

            const credential = new DefaultAzureCredential();
            const account = "<account name>";

            const clientWithAAD = new TableServiceClient(
              `https://${account}.table.core.windows.net`,
              credential,
            );
            ```
properties:
  - name: pipeline
    uid: '@azure/data-tables.TableServiceClient.pipeline'
    package: '@azure/data-tables'
    summary: >-
      Represents a pipeline for making a HTTP request to a URL.

      Pipelines can have multiple policies to manage manipulating each request
      before and after it is made to the server.
    fullName: pipeline
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'pipeline: Pipeline'
      return:
        description: ''
        type: <xref uid="@azure/core-rest-pipeline.Pipeline" />
  - name: url
    uid: '@azure/data-tables.TableServiceClient.url'
    package: '@azure/data-tables'
    summary: Table Account URL
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
methods:
  - name: createTable(string, OperationOptions)
    uid: '@azure/data-tables.TableServiceClient.createTable'
    package: '@azure/data-tables'
    summary: Creates a new table under the given account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createTable(name: string, options?: OperationOptions):
        Promise<void>
      parameters:
        - id: name
          type: string
          description: The name of the table.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: deleteTable(string, OperationOptions)
    uid: '@azure/data-tables.TableServiceClient.deleteTable'
    package: '@azure/data-tables'
    summary: Operation permanently deletes the specified table.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteTable(name: string, options?: OperationOptions):
        Promise<void>
      parameters:
        - id: name
          type: string
          description: The name of the table.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: fromConnectionString(string, TableServiceClientOptions)
    uid: '@azure/data-tables.TableServiceClient.fromConnectionString'
    package: '@azure/data-tables'
    summary: Creates an instance of TableServiceClient from connection string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string, options?:
        TableServiceClientOptions): TableServiceClient
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                      [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                      Account connection string example -
                                      `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                      SAS connection string example -
                                      `BlobEndpoint=https://myaccount.table.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: options
          type: <xref uid="@azure/data-tables.TableServiceClientOptions" />
          description: Options to configure the HTTP pipeline.
      return:
        description: A new TableServiceClient from the given connection string.
        type: <xref uid="@azure/data-tables.TableServiceClient" />
  - name: getProperties(OperationOptions)
    uid: '@azure/data-tables.TableServiceClient.getProperties'
    package: '@azure/data-tables'
    summary: >-
      Gets the properties of an account's Table service, including properties
      for Analytics and CORS

      (Cross-Origin Resource Sharing) rules.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: OperationOptions):
        Promise<ServiceGetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/data-tables.GetPropertiesResponse" />&gt;
  - name: getStatistics(OperationOptions)
    uid: '@azure/data-tables.TableServiceClient.getStatistics'
    package: '@azure/data-tables'
    summary: >-
      Retrieves statistics related to replication for the Table service. It is
      only available on the

      secondary location endpoint when read-access geo-redundant replication is
      enabled for the account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStatistics(options?: OperationOptions):
        Promise<ServiceGetStatisticsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/data-tables.GetStatisticsResponse" />&gt;
  - name: listTables(ListTableItemsOptions)
    uid: '@azure/data-tables.TableServiceClient.listTables'
    package: '@azure/data-tables'
    summary: Queries tables under the given account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listTables(options?: ListTableItemsOptions):
        PagedAsyncIterableIterator<TableItem, TableItemResultPage, PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/data-tables.ListTableItemsOptions" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/data-tables.TableItem" />, <xref
          uid="@azure/data-tables.TableItemResultPage" />, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: setProperties(TableServiceProperties, ServiceSetPropertiesOptionalParams)
    uid: '@azure/data-tables.TableServiceClient.setProperties'
    package: '@azure/data-tables'
    summary: >-
      Sets properties for an account's Table service endpoint, including
      properties for Analytics and CORS

      (Cross-Origin Resource Sharing) rules.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties: TableServiceProperties, options?:
        ServiceSetPropertiesOptionalParams):
        Promise<ServiceSetPropertiesHeaders>
      parameters:
        - id: properties
          type: <xref uid="@azure/data-tables.ServiceProperties" />
          description: The Table Service properties.
        - id: options
          type: <xref uid="@azure/data-tables.SetPropertiesOptions" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/data-tables.ServiceSetPropertiesHeaders"
          />&gt;
