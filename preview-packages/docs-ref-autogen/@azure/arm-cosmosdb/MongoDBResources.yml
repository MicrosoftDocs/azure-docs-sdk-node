### YamlMime:TSType
name: MongoDBResources
uid: '@azure/arm-cosmosdb.MongoDBResources'
package: '@azure/arm-cosmosdb'
summary: Interface representing a MongoDBResources.
fullName: MongoDBResources
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: >-
      beginCreateUpdateMongoDBCollection(string, string, string, string,
      MongoDBCollectionCreateUpdateParameters,
      MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBCollection'
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB MongoDB Collection
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateMongoDBCollection(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        createUpdateMongoDBCollectionParameters:
        MongoDBCollectionCreateUpdateParameters, options?:
        MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams):
        Promise<SimplePollerLike<OperationState<MongoDBCollectionGetResults>,
        MongoDBCollectionGetResults>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: createUpdateMongoDBCollectionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBCollectionCreateUpdateParameters" />
          description: |-
            The parameters to provide for the current MongoDB
                                                           Collection.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoDBCollectionGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.MongoDBCollectionGetResults" />&gt;&gt;
  - name: >-
      beginCreateUpdateMongoDBCollectionAndWait(string, string, string, string,
      MongoDBCollectionCreateUpdateParameters,
      MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBCollectionAndWait
    package: '@azure/arm-cosmosdb'
    summary: Create or update an Azure Cosmos DB MongoDB Collection
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateMongoDBCollectionAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, createUpdateMongoDBCollectionParameters:
        MongoDBCollectionCreateUpdateParameters, options?:
        MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams):
        Promise<MongoDBCollectionGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: createUpdateMongoDBCollectionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBCollectionCreateUpdateParameters" />
          description: |-
            The parameters to provide for the current MongoDB
                                                           Collection.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-cosmosdb.MongoDBCollectionGetResults"
          />&gt;
  - name: >-
      beginCreateUpdateMongoDBDatabase(string, string, string,
      MongoDBDatabaseCreateUpdateParameters,
      MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Create or updates Azure Cosmos DB MongoDB database
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateMongoDBDatabase(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateMongoDBDatabaseParameters:
        MongoDBDatabaseCreateUpdateParameters, options?:
        MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams):
        Promise<SimplePollerLike<OperationState<MongoDBDatabaseGetResults>,
        MongoDBDatabaseGetResults>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: createUpdateMongoDBDatabaseParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBDatabaseCreateUpdateParameters" />
          description: |-
            The parameters to provide for the current MongoDB
                                                         database.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoDBDatabaseGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.MongoDBDatabaseGetResults" />&gt;&gt;
  - name: >-
      beginCreateUpdateMongoDBDatabaseAndWait(string, string, string,
      MongoDBDatabaseCreateUpdateParameters,
      MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBDatabaseAndWait
    package: '@azure/arm-cosmosdb'
    summary: Create or updates Azure Cosmos DB MongoDB database
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateMongoDBDatabaseAndWait(resourceGroupName:
        string, accountName: string, databaseName: string,
        createUpdateMongoDBDatabaseParameters:
        MongoDBDatabaseCreateUpdateParameters, options?:
        MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams):
        Promise<MongoDBDatabaseGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: createUpdateMongoDBDatabaseParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBDatabaseCreateUpdateParameters" />
          description: |-
            The parameters to provide for the current MongoDB
                                                         database.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-cosmosdb.MongoDBDatabaseGetResults"
          />&gt;
  - name: >-
      beginCreateUpdateMongoRoleDefinition(string, string, string,
      MongoRoleDefinitionCreateUpdateParameters,
      MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoRoleDefinition'
    package: '@azure/arm-cosmosdb'
    summary: Creates or updates an Azure Cosmos DB Mongo Role Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateMongoRoleDefinition(mongoRoleDefinitionId:
        string, resourceGroupName: string, accountName: string,
        createUpdateMongoRoleDefinitionParameters:
        MongoRoleDefinitionCreateUpdateParameters, options?:
        MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams):
        Promise<SimplePollerLike<OperationState<MongoRoleDefinitionGetResults>,
        MongoRoleDefinitionGetResults>>
      parameters:
        - id: mongoRoleDefinitionId
          type: string
          description: The ID for the Role Definition {dbName.roleName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: createUpdateMongoRoleDefinitionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoRoleDefinitionCreateUpdateParameters"
            />
          description: |-
            The properties required to create or update a Role
                                                             Definition.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoRoleDefinitionGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.MongoRoleDefinitionGetResults" />&gt;&gt;
  - name: >-
      beginCreateUpdateMongoRoleDefinitionAndWait(string, string, string,
      MongoRoleDefinitionCreateUpdateParameters,
      MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoRoleDefinitionAndWait
    package: '@azure/arm-cosmosdb'
    summary: Creates or updates an Azure Cosmos DB Mongo Role Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginCreateUpdateMongoRoleDefinitionAndWait(mongoRoleDefinitionId:
        string, resourceGroupName: string, accountName: string,
        createUpdateMongoRoleDefinitionParameters:
        MongoRoleDefinitionCreateUpdateParameters, options?:
        MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams):
        Promise<MongoRoleDefinitionGetResults>
      parameters:
        - id: mongoRoleDefinitionId
          type: string
          description: The ID for the Role Definition {dbName.roleName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: createUpdateMongoRoleDefinitionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoRoleDefinitionCreateUpdateParameters"
            />
          description: |-
            The properties required to create or update a Role
                                                             Definition.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.MongoRoleDefinitionGetResults" />&gt;
  - name: >-
      beginCreateUpdateMongoUserDefinition(string, string, string,
      MongoUserDefinitionCreateUpdateParameters,
      MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoUserDefinition'
    package: '@azure/arm-cosmosdb'
    summary: Creates or updates an Azure Cosmos DB Mongo User Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateUpdateMongoUserDefinition(mongoUserDefinitionId:
        string, resourceGroupName: string, accountName: string,
        createUpdateMongoUserDefinitionParameters:
        MongoUserDefinitionCreateUpdateParameters, options?:
        MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams):
        Promise<SimplePollerLike<OperationState<MongoUserDefinitionGetResults>,
        MongoUserDefinitionGetResults>>
      parameters:
        - id: mongoUserDefinitionId
          type: string
          description: The ID for the User Definition {dbName.userName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: createUpdateMongoUserDefinitionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoUserDefinitionCreateUpdateParameters"
            />
          description: |-
            The properties required to create or update a User
                                                             Definition.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoUserDefinitionGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.MongoUserDefinitionGetResults" />&gt;&gt;
  - name: >-
      beginCreateUpdateMongoUserDefinitionAndWait(string, string, string,
      MongoUserDefinitionCreateUpdateParameters,
      MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoUserDefinitionAndWait
    package: '@azure/arm-cosmosdb'
    summary: Creates or updates an Azure Cosmos DB Mongo User Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginCreateUpdateMongoUserDefinitionAndWait(mongoUserDefinitionId:
        string, resourceGroupName: string, accountName: string,
        createUpdateMongoUserDefinitionParameters:
        MongoUserDefinitionCreateUpdateParameters, options?:
        MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams):
        Promise<MongoUserDefinitionGetResults>
      parameters:
        - id: mongoUserDefinitionId
          type: string
          description: The ID for the User Definition {dbName.userName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: createUpdateMongoUserDefinitionParameters
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoUserDefinitionCreateUpdateParameters"
            />
          description: |-
            The properties required to create or update a User
                                                             Definition.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.MongoUserDefinitionGetResults" />&gt;
  - name: >-
      beginDeleteMongoDBCollection(string, string, string, string,
      MongoDBResourcesDeleteMongoDBCollectionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBCollection'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB MongoDB Collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMongoDBCollection(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options?: MongoDBResourcesDeleteMongoDBCollectionOptionalParams):
        Promise<SimplePollerLike<OperationState<MongoDBResourcesDeleteMongoDBCollectionHeaders>,
        MongoDBResourcesDeleteMongoDBCollectionHeaders>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBCollectionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBCollectionHeaders"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBCollectionHeaders"
          />&gt;&gt;
  - name: >-
      beginDeleteMongoDBCollectionAndWait(string, string, string, string,
      MongoDBResourcesDeleteMongoDBCollectionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBCollectionAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB MongoDB Collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMongoDBCollectionAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options?: MongoDBResourcesDeleteMongoDBCollectionOptionalParams):
        Promise<MongoDBResourcesDeleteMongoDBCollectionHeaders>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBCollectionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBCollectionHeaders"
          />&gt;
  - name: >-
      beginDeleteMongoDBDatabase(string, string, string,
      MongoDBResourcesDeleteMongoDBDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBDatabase'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB MongoDB database.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMongoDBDatabase(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        MongoDBResourcesDeleteMongoDBDatabaseOptionalParams):
        Promise<SimplePollerLike<OperationState<MongoDBResourcesDeleteMongoDBDatabaseHeaders>,
        MongoDBResourcesDeleteMongoDBDatabaseHeaders>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBDatabaseOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBDatabaseHeaders"
          />&gt;, <xref
          uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBDatabaseHeaders"
          />&gt;&gt;
  - name: >-
      beginDeleteMongoDBDatabaseAndWait(string, string, string,
      MongoDBResourcesDeleteMongoDBDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBDatabaseAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB MongoDB database.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMongoDBDatabaseAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        MongoDBResourcesDeleteMongoDBDatabaseOptionalParams):
        Promise<MongoDBResourcesDeleteMongoDBDatabaseHeaders>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBDatabaseOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoDBDatabaseHeaders"
          />&gt;
  - name: >-
      beginDeleteMongoRoleDefinition(string, string, string,
      MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoRoleDefinition'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB Mongo Role Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMongoRoleDefinition(mongoRoleDefinitionId: string,
        resourceGroupName: string, accountName: string, options?:
        MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams):
        Promise<SimplePollerLike<OperationState<void>, void>>
      parameters:
        - id: mongoRoleDefinitionId
          type: string
          description: The ID for the Role Definition {dbName.roleName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;void&gt;, void&gt;&gt;
  - name: >-
      beginDeleteMongoRoleDefinitionAndWait(string, string, string,
      MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoRoleDefinitionAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB Mongo Role Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMongoRoleDefinitionAndWait(mongoRoleDefinitionId:
        string, resourceGroupName: string, accountName: string, options?:
        MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams): Promise<void>
      parameters:
        - id: mongoRoleDefinitionId
          type: string
          description: The ID for the Role Definition {dbName.roleName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      beginDeleteMongoUserDefinition(string, string, string,
      MongoDBResourcesDeleteMongoUserDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoUserDefinition'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB Mongo User Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMongoUserDefinition(mongoUserDefinitionId: string,
        resourceGroupName: string, accountName: string, options?:
        MongoDBResourcesDeleteMongoUserDefinitionOptionalParams):
        Promise<SimplePollerLike<OperationState<void>, void>>
      parameters:
        - id: mongoUserDefinitionId
          type: string
          description: The ID for the User Definition {dbName.userName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoUserDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;void&gt;, void&gt;&gt;
  - name: >-
      beginDeleteMongoUserDefinitionAndWait(string, string, string,
      MongoDBResourcesDeleteMongoUserDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoUserDefinitionAndWait'
    package: '@azure/arm-cosmosdb'
    summary: Deletes an existing Azure Cosmos DB Mongo User Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteMongoUserDefinitionAndWait(mongoUserDefinitionId:
        string, resourceGroupName: string, accountName: string, options?:
        MongoDBResourcesDeleteMongoUserDefinitionOptionalParams): Promise<void>
      parameters:
        - id: mongoUserDefinitionId
          type: string
          description: The ID for the User Definition {dbName.userName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesDeleteMongoUserDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      beginMigrateMongoDBCollectionToAutoscale(string, string, string, string,
      MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBCollectionToAutoscale
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
      autoscale
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateMongoDBCollectionToAutoscale(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, options?:
        MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams):
        Promise<SimplePollerLike<OperationState<ThroughputSettingsGetResults>,
        ThroughputSettingsGetResults>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;&gt;
  - name: >-
      beginMigrateMongoDBCollectionToAutoscaleAndWait(string, string, string,
      string, MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBCollectionToAutoscaleAndWait
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
      autoscale
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginMigrateMongoDBCollectionToAutoscaleAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, options?:
        MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams):
        Promise<ThroughputSettingsGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
  - name: >-
      beginMigrateMongoDBCollectionToManualThroughput(string, string, string,
      string,
      MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBCollectionToManualThroughput
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
      throughput
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginMigrateMongoDBCollectionToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, options?:
        MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams):
        Promise<SimplePollerLike<OperationState<ThroughputSettingsGetResults>,
        ThroughputSettingsGetResults>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;&gt;
  - name: >-
      beginMigrateMongoDBCollectionToManualThroughputAndWait(string, string,
      string, string,
      MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBCollectionToManualThroughputAndWait
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
      throughput
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginMigrateMongoDBCollectionToManualThroughputAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, options?:
        MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams):
        Promise<ThroughputSettingsGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
  - name: >-
      beginMigrateMongoDBDatabaseToAutoscale(string, string, string,
      MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBDatabaseToAutoscale
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB MongoDB database from manual throughput to
      autoscale
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginMigrateMongoDBDatabaseToAutoscale(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams):
        Promise<SimplePollerLike<OperationState<ThroughputSettingsGetResults>,
        ThroughputSettingsGetResults>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;&gt;
  - name: >-
      beginMigrateMongoDBDatabaseToAutoscaleAndWait(string, string, string,
      MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBDatabaseToAutoscaleAndWait
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB MongoDB database from manual throughput to
      autoscale
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginMigrateMongoDBDatabaseToAutoscaleAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams):
        Promise<ThroughputSettingsGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
  - name: >-
      beginMigrateMongoDBDatabaseToManualThroughput(string, string, string,
      MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBDatabaseToManualThroughput
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
      throughput
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginMigrateMongoDBDatabaseToManualThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams):
        Promise<SimplePollerLike<OperationState<ThroughputSettingsGetResults>,
        ThroughputSettingsGetResults>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;&gt;
  - name: >-
      beginMigrateMongoDBDatabaseToManualThroughputAndWait(string, string,
      string,
      MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBDatabaseToManualThroughputAndWait
    package: '@azure/arm-cosmosdb'
    summary: >-
      Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
      throughput
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginMigrateMongoDBDatabaseToManualThroughputAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams):
        Promise<ThroughputSettingsGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
  - name: >-
      beginRetrieveContinuousBackupInformation(string, string, string, string,
      ContinuousBackupRestoreLocation,
      MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginRetrieveContinuousBackupInformation
    package: '@azure/arm-cosmosdb'
    summary: Retrieves continuous backup information for a Mongodb collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginRetrieveContinuousBackupInformation(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, location: ContinuousBackupRestoreLocation, options?:
        MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams):
        Promise<SimplePollerLike<OperationState<BackupInformation>,
        BackupInformation>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: location
          type: <xref uid="@azure/arm-cosmosdb.ContinuousBackupRestoreLocation" />
          description: The name of the continuous backup restore location.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.BackupInformation" />&gt;, <xref
          uid="@azure/arm-cosmosdb.BackupInformation" />&gt;&gt;
  - name: >-
      beginRetrieveContinuousBackupInformationAndWait(string, string, string,
      string, ContinuousBackupRestoreLocation,
      MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginRetrieveContinuousBackupInformationAndWait
    package: '@azure/arm-cosmosdb'
    summary: Retrieves continuous backup information for a Mongodb collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginRetrieveContinuousBackupInformationAndWait(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, location: ContinuousBackupRestoreLocation, options?:
        MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams):
        Promise<BackupInformation>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: location
          type: <xref uid="@azure/arm-cosmosdb.ContinuousBackupRestoreLocation" />
          description: The name of the continuous backup restore location.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-cosmosdb.BackupInformation" />&gt;
  - name: >-
      beginUpdateMongoDBCollectionThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters,
      MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBCollectionThroughput
    package: '@azure/arm-cosmosdb'
    summary: Update the RUs per second of an Azure Cosmos DB MongoDB collection
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateMongoDBCollectionThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?:
        MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams):
        Promise<SimplePollerLike<OperationState<ThroughputSettingsGetResults>,
        ThroughputSettingsGetResults>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The RUs per second of the parameters to provide for the current
                                              MongoDB collection.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;&gt;
  - name: >-
      beginUpdateMongoDBCollectionThroughputAndWait(string, string, string,
      string, ThroughputSettingsUpdateParameters,
      MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBCollectionThroughputAndWait
    package: '@azure/arm-cosmosdb'
    summary: Update the RUs per second of an Azure Cosmos DB MongoDB collection
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        beginUpdateMongoDBCollectionThroughputAndWait(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?:
        MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams):
        Promise<ThroughputSettingsGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The RUs per second of the parameters to provide for the current
                                              MongoDB collection.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
  - name: >-
      beginUpdateMongoDBDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters,
      MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of the an Azure Cosmos DB MongoDB database
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?:
        MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams):
        Promise<SimplePollerLike<OperationState<ThroughputSettingsGetResults>,
        ThroughputSettingsGetResults>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The RUs per second of the parameters to provide for the current
                                              MongoDB database.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;, <xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;&gt;
  - name: >-
      beginUpdateMongoDBDatabaseThroughputAndWait(string, string, string,
      ThroughputSettingsUpdateParameters,
      MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams)
    uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBDatabaseThroughputAndWait
    package: '@azure/arm-cosmosdb'
    summary: Update RUs per second of the an Azure Cosmos DB MongoDB database
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateMongoDBDatabaseThroughputAndWait(resourceGroupName:
        string, accountName: string, databaseName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?:
        MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams):
        Promise<ThroughputSettingsGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type: >-
            <xref uid="@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters"
            />
          description: |-
            The RUs per second of the parameters to provide for the current
                                              MongoDB database.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
  - name: >-
      getMongoDBCollection(string, string, string, string,
      MongoDBResourcesGetMongoDBCollectionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the MongoDB collection under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, options?:
        MongoDBResourcesGetMongoDBCollectionOptionalParams):
        Promise<MongoDBCollectionGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesGetMongoDBCollectionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-cosmosdb.MongoDBCollectionGetResults"
          />&gt;
  - name: >-
      getMongoDBCollectionThroughput(string, string, string, string,
      MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the RUs per second of the MongoDB collection under an existing Azure
      Cosmos DB database account

      with the provided name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options?: MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams):
        Promise<ThroughputSettingsGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: collectionName
          type: string
          description: Cosmos DB collection name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
  - name: >-
      getMongoDBDatabase(string, string, string,
      MongoDBResourcesGetMongoDBDatabaseOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the MongoDB databases under an existing Azure Cosmos DB database
      account with the provided

      name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?:
        MongoDBResourcesGetMongoDBDatabaseOptionalParams):
        Promise<MongoDBDatabaseGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesGetMongoDBDatabaseOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-cosmosdb.MongoDBDatabaseGetResults"
          />&gt;
  - name: >-
      getMongoDBDatabaseThroughput(string, string, string,
      MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Gets the RUs per second of the MongoDB database under an existing Azure
      Cosmos DB database account

      with the provided name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams):
        Promise<ThroughputSettingsGetResults>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.ThroughputSettingsGetResults" />&gt;
  - name: >-
      getMongoRoleDefinition(string, string, string,
      MongoDBResourcesGetMongoRoleDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoRoleDefinition'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Retrieves the properties of an existing Azure Cosmos DB Mongo Role
      Definition with the given Id.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMongoRoleDefinition(mongoRoleDefinitionId: string,
        resourceGroupName: string, accountName: string, options?:
        MongoDBResourcesGetMongoRoleDefinitionOptionalParams):
        Promise<MongoRoleDefinitionGetResults>
      parameters:
        - id: mongoRoleDefinitionId
          type: string
          description: The ID for the Role Definition {dbName.roleName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesGetMongoRoleDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.MongoRoleDefinitionGetResults" />&gt;
  - name: >-
      getMongoUserDefinition(string, string, string,
      MongoDBResourcesGetMongoUserDefinitionOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoUserDefinition'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Retrieves the properties of an existing Azure Cosmos DB Mongo User
      Definition with the given Id.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMongoUserDefinition(mongoUserDefinitionId: string,
        resourceGroupName: string, accountName: string, options?:
        MongoDBResourcesGetMongoUserDefinitionOptionalParams):
        Promise<MongoUserDefinitionGetResults>
      parameters:
        - id: mongoUserDefinitionId
          type: string
          description: The ID for the User Definition {dbName.userName}.
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesGetMongoUserDefinitionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-cosmosdb.MongoUserDefinitionGetResults" />&gt;
  - name: >-
      listMongoDBCollections(string, string, string,
      MongoDBResourcesListMongoDBCollectionsOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the MongoDB collection under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listMongoDBCollections(resourceGroupName: string, accountName:
        string, databaseName: string, options?:
        MongoDBResourcesListMongoDBCollectionsOptionalParams):
        PagedAsyncIterableIterator<MongoDBCollectionGetResults,
        MongoDBCollectionGetResults[], PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: databaseName
          type: string
          description: Cosmos DB database name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesListMongoDBCollectionsOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoDBCollectionGetResults" />, <xref
          uid="@azure/arm-cosmosdb.MongoDBCollectionGetResults" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listMongoDBDatabases(string, string,
      MongoDBResourcesListMongoDBDatabasesOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases'
    package: '@azure/arm-cosmosdb'
    summary: >-
      Lists the MongoDB databases under an existing Azure Cosmos DB database
      account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listMongoDBDatabases(resourceGroupName: string, accountName:
        string, options?: MongoDBResourcesListMongoDBDatabasesOptionalParams):
        PagedAsyncIterableIterator<MongoDBDatabaseGetResults,
        MongoDBDatabaseGetResults[], PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesListMongoDBDatabasesOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoDBDatabaseGetResults" />, <xref
          uid="@azure/arm-cosmosdb.MongoDBDatabaseGetResults" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listMongoRoleDefinitions(string, string,
      MongoDBResourcesListMongoRoleDefinitionsOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoRoleDefinitions'
    package: '@azure/arm-cosmosdb'
    summary: Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listMongoRoleDefinitions(resourceGroupName: string,
        accountName: string, options?:
        MongoDBResourcesListMongoRoleDefinitionsOptionalParams):
        PagedAsyncIterableIterator<MongoRoleDefinitionGetResults,
        MongoRoleDefinitionGetResults[], PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesListMongoRoleDefinitionsOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoRoleDefinitionGetResults" />, <xref
          uid="@azure/arm-cosmosdb.MongoRoleDefinitionGetResults" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listMongoUserDefinitions(string, string,
      MongoDBResourcesListMongoUserDefinitionsOptionalParams)
    uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoUserDefinitions'
    package: '@azure/arm-cosmosdb'
    summary: Retrieves the list of all Azure Cosmos DB Mongo User Definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listMongoUserDefinitions(resourceGroupName: string,
        accountName: string, options?:
        MongoDBResourcesListMongoUserDefinitionsOptionalParams):
        PagedAsyncIterableIterator<MongoUserDefinitionGetResults,
        MongoUserDefinitionGetResults[], PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type: string
          description: Cosmos DB database account name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-cosmosdb.MongoDBResourcesListMongoUserDefinitionsOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-cosmosdb.MongoUserDefinitionGetResults" />, <xref
          uid="@azure/arm-cosmosdb.MongoUserDefinitionGetResults" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
