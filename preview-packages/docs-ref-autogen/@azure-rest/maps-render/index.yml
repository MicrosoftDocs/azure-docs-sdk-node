### YamlMime:TSPackage
uid: '@azure-rest/maps-render'
name: '@azure-rest/maps-render'
summary: ''
type: package
interfaces:
  - '@azure-rest/maps-render.CircularPath'
  - '@azure-rest/maps-render.CircularPathOptions'
  - '@azure-rest/maps-render.CopyrightCaptionOutput'
  - '@azure-rest/maps-render.CopyrightOutput'
  - '@azure-rest/maps-render.ErrorAdditionalInfoOutput'
  - '@azure-rest/maps-render.ErrorDetailOutput'
  - '@azure-rest/maps-render.ErrorResponseOutput'
  - '@azure-rest/maps-render.GetCopyrightCaption'
  - '@azure-rest/maps-render.GetCopyrightForTile'
  - '@azure-rest/maps-render.GetCopyrightForWorld'
  - '@azure-rest/maps-render.GetCopyrightFromBoundingBox'
  - '@azure-rest/maps-render.GetMapAttribution'
  - '@azure-rest/maps-render.GetMapStateTile'
  - '@azure-rest/maps-render.GetMapStaticImage'
  - '@azure-rest/maps-render.GetMapTile'
  - '@azure-rest/maps-render.GetMapTileset'
  - '@azure-rest/maps-render.MapAttributionOutput'
  - '@azure-rest/maps-render.MapTilesetOutput'
  - '@azure-rest/maps-render.MapsRenderClientOptions'
  - '@azure-rest/maps-render.Pin'
  - '@azure-rest/maps-render.PinOptions'
  - '@azure-rest/maps-render.PinSet'
  - '@azure-rest/maps-render.PolygonalPath'
  - '@azure-rest/maps-render.PolygonalPathOptions'
  - '@azure-rest/maps-render.RegionCopyrightsCountryOutput'
  - '@azure-rest/maps-render.RegionCopyrightsOutput'
  - '@azure-rest/maps-render.RenderGetCopyrightCaption200Response'
  - '@azure-rest/maps-render.RenderGetCopyrightCaptionDefaultResponse'
  - '@azure-rest/maps-render.RenderGetCopyrightForTile200Response'
  - '@azure-rest/maps-render.RenderGetCopyrightForTileDefaultResponse'
  - '@azure-rest/maps-render.RenderGetCopyrightForTileQueryParam'
  - '@azure-rest/maps-render.RenderGetCopyrightForTileQueryParamProperties'
  - '@azure-rest/maps-render.RenderGetCopyrightForWorld200Response'
  - '@azure-rest/maps-render.RenderGetCopyrightForWorldDefaultResponse'
  - '@azure-rest/maps-render.RenderGetCopyrightForWorldQueryParam'
  - '@azure-rest/maps-render.RenderGetCopyrightForWorldQueryParamProperties'
  - '@azure-rest/maps-render.RenderGetCopyrightFromBoundingBox200Response'
  - '@azure-rest/maps-render.RenderGetCopyrightFromBoundingBoxDefaultResponse'
  - '@azure-rest/maps-render.RenderGetCopyrightFromBoundingBoxQueryParam'
  - >-
    @azure-rest/maps-render.RenderGetCopyrightFromBoundingBoxQueryParamProperties
  - '@azure-rest/maps-render.RenderGetMapAttribution200Response'
  - '@azure-rest/maps-render.RenderGetMapAttributionDefaultResponse'
  - '@azure-rest/maps-render.RenderGetMapAttributionQueryParam'
  - '@azure-rest/maps-render.RenderGetMapAttributionQueryParamProperties'
  - '@azure-rest/maps-render.RenderGetMapStateTile200Headers'
  - '@azure-rest/maps-render.RenderGetMapStateTile200Response'
  - '@azure-rest/maps-render.RenderGetMapStateTileDefaultResponse'
  - '@azure-rest/maps-render.RenderGetMapStateTileQueryParam'
  - '@azure-rest/maps-render.RenderGetMapStateTileQueryParamProperties'
  - '@azure-rest/maps-render.RenderGetMapStaticImage200Headers'
  - '@azure-rest/maps-render.RenderGetMapStaticImage200Response'
  - '@azure-rest/maps-render.RenderGetMapStaticImageDefaultResponse'
  - '@azure-rest/maps-render.RenderGetMapStaticImageQueryParam'
  - '@azure-rest/maps-render.RenderGetMapStaticImageQueryParamProperties'
  - '@azure-rest/maps-render.RenderGetMapTile200Headers'
  - '@azure-rest/maps-render.RenderGetMapTile200Response'
  - '@azure-rest/maps-render.RenderGetMapTileDefaultResponse'
  - '@azure-rest/maps-render.RenderGetMapTileQueryParam'
  - '@azure-rest/maps-render.RenderGetMapTileQueryParamProperties'
  - '@azure-rest/maps-render.RenderGetMapTileset200Response'
  - '@azure-rest/maps-render.RenderGetMapTilesetDefaultResponse'
  - '@azure-rest/maps-render.RenderGetMapTilesetQueryParam'
  - '@azure-rest/maps-render.RenderGetMapTilesetQueryParamProperties'
  - '@azure-rest/maps-render.Routes'
typeAliases:
  - '@azure-rest/maps-render.MapsRenderClient'
  - '@azure-rest/maps-render.RenderGetCopyrightCaptionParameters'
  - '@azure-rest/maps-render.RenderGetCopyrightForTileParameters'
  - '@azure-rest/maps-render.RenderGetCopyrightForWorldParameters'
  - '@azure-rest/maps-render.RenderGetCopyrightFromBoundingBoxParameters'
  - '@azure-rest/maps-render.RenderGetMapAttributionParameters'
  - '@azure-rest/maps-render.RenderGetMapStateTileParameters'
  - '@azure-rest/maps-render.RenderGetMapStaticImageParameters'
  - '@azure-rest/maps-render.RenderGetMapTileParameters'
  - '@azure-rest/maps-render.RenderGetMapTilesetParameters'
functions:
  - name: createPathQuery((PolygonalPath | CircularPath)[])
    uid: '@azure-rest/maps-render.createPathQuery'
    package: '@azure-rest/maps-render'
    summary: >+
      Create a path query string for _get map static image_ request.


      **Example**


      ```ts snippet:ReadmeSampleCreatePathQuery

      import { DefaultAzureCredential } from "@azure/identity";

      import MapsRender, { CircularPath, PolygonalPath, createPathQuery } from
      "@azure-rest/maps-render";

      import { createWriteStream } from "node:fs";


      const credential = new DefaultAzureCredential();

      const client = MapsRender(credential, "<maps-account-client-id>");


      const circularPath: CircularPath = {
        center: [52.4559, 13.228],
        radiusInMeters: 10000,
        options: {
          lineColor: "000000",
          lineOpacity: 0.9,
          lineWidthInPixels: 2,
        },
      };


      const linearPath: PolygonalPath = {
        coordinates: [
          [52.577, 13.35],
          [52.6, 13.2988],
          [52.32, 13.2988],
        ],
        options: {
          lineColor: "000000",
          lineOpacity: 0.9,
          lineWidthInPixels: 2,
        },
      };


      const polygonPath: PolygonalPath = {
        coordinates: [
          [52.577, 13.35],
          [52.6, 13.2988],
          [52.32, 13.2988],
          [52.577, 13.35],
        ],
        options: {
          lineColor: "000000",
          lineOpacity: 0.9,
          lineWidthInPixels: 2,
          fillColor: "FFFFFF",
          fillOpacity: 0.8,
        },
      };


      const path = createPathQuery([circularPath, linearPath, polygonPath]);

      // Send the request

      const response = await client
        .path("/map/static")
        .get({
          queryParameters: {
            bbox: [13.228, 52.4559, 13.5794, 52.629],
            path,
          },
        })
        .asNodeStream();

      // Handle the error.

      if (!response.body) {
        throw Error("No response body");
      }


      response.body.pipe(createWriteStream("path.png"));

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createPathQuery(paths: (PolygonalPath | CircularPath)[]):
        string
      parameters:
        - id: paths
          type: >-
            (<xref uid="@azure-rest/maps-render.PolygonalPath" /> | <xref
            uid="@azure-rest/maps-render.CircularPath" />)[]
          description: >-
            A collection of
            [PolygonalPath](xref:@azure-rest/maps-render.PolygonalPath) and
            [CircularPath](xref:@azure-rest/maps-render.CircularPath) that you
            want to draw on the image.
      return:
        description: ''
        type: string
  - name: createPinsQuery(PinSet[])
    uid: '@azure-rest/maps-render.createPinsQuery'
    package: '@azure-rest/maps-render'
    summary: >+
      Create a pin query string for _get map static image_


      **Example**


      ```ts snippet:ReadmeSampleCreatePinsQuery

      import { DefaultAzureCredential } from "@azure/identity";

      import MapsRender, { PinSet, createPinsQuery } from
      "@azure-rest/maps-render";

      import { createWriteStream } from "node:fs";


      const credential = new DefaultAzureCredential();

      const client = MapsRender(credential, "<maps-account-client-id>");


      const pins: PinSet[] = [
        {
          pins: [
            { coordinate: [52.577, 13.35], label: "Label start" },
            { coordinate: [52.6, 13.2988], label: "Label end" },
          ],
          pinImage: "default",
          options: {
            scale: 0.9,
            pinColor: "FF0000",
            labelColor: "0000FF",
            labelSizeInPixels: 18,
          },
        },
      ];


      const path = createPinsQuery(pins);


      const response = await client
        .path("/map/static")
        .get({
          queryParameters: {
            bbox: [13.228, 52.4559, 13.5794, 52.62],
            zoom: 10,
            path,
          },
          skipUrlEncoding: true,
        })
        .asNodeStream();

      // Handle the error.

      if (!response.body) {
        throw Error("No response body");
      }


      response.body.pipe(createWriteStream("pin.png"));

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createPinsQuery(pinSets: PinSet[]): string'
      parameters:
        - id: pinSets
          type: <xref uid="@azure-rest/maps-render.PinSet" />[]
          description: ''
      return:
        description: '- The composed query string.'
        type: string
  - name: default(AzureKeyCredential, ClientOptions)
    uid: '@azure-rest/maps-render.default'
    package: '@azure-rest/maps-render'
    summary: |+
      Creates an instance of MapsRenderClient from a subscription key.

      **Example**

      ```ts snippet:ReadmeSampleCreateClient_SubscriptionKey
      import { AzureKeyCredential } from "@azure/core-auth";
      import MapsRender from "@azure-rest/maps-render";

      const credential = new AzureKeyCredential("<subscription-key>");
      const client = MapsRender(credential);
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function default(credential: AzureKeyCredential, options?:
        ClientOptions): MapsRenderClient
      parameters:
        - id: credential
          type: <xref uid="@azure/core-auth.AzureKeyCredential" />
          description: >-
            An AzureKeyCredential instance used to authenticate requests to the
            service
        - id: options
          type: <xref uid="@azure-rest/core-client.ClientOptions" />
          description: Options used to configure the Render Client
      return:
        description: ''
        type: <xref uid="@azure-rest/maps-render.MapsRenderClient" />
  - name: default(TokenCredential, string, ClientOptions)
    uid: '@azure-rest/maps-render.default_1'
    package: '@azure-rest/maps-render'
    summary: >+
      Creates an instance of MapsRender from an Azure Identity
      `TokenCredential`.


      **Example**


      ```ts snippet:ReadmeSampleCreateClient_TokenCredential

      import { DefaultAzureCredential } from "@azure/identity";

      import MapsRender from "@azure-rest/maps-render";


      const credential = new DefaultAzureCredential();

      const client = MapsRender(credential, "<maps-account-client-id>");

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function default(credential: TokenCredential, mapsAccountClientId:
        string, options?: ClientOptions): MapsRenderClient
      parameters:
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: >-
            An TokenCredential instance used to authenticate requests to the
            service
        - id: mapsAccountClientId
          type: string
          description: The Azure Maps client id of a specific map resource
        - id: options
          type: <xref uid="@azure-rest/core-client.ClientOptions" />
          description: Options used to configure the Render Client
      return:
        description: ''
        type: <xref uid="@azure-rest/maps-render.MapsRenderClient" />
  - name: default(AzureSASCredential, ClientOptions)
    uid: '@azure-rest/maps-render.default_2'
    package: '@azure-rest/maps-render'
    summary: >+
      Creates an instance of MapsRender from an Azure Identity
      `AzureSASCredential`.


      **Example**


      ```ts snippet:ReadmeSampleCreateClient_SASToken

      import { AzureSASCredential } from "@azure/core-auth";

      import MapsRender from "@azure-rest/maps-render";


      const credential = new AzureSASCredential("<SAS Token>");

      const client = MapsRender(credential);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function default(credential: AzureSASCredential, options?:
        ClientOptions): MapsRenderClient
      parameters:
        - id: credential
          type: <xref uid="@azure/core-auth.AzureSASCredential" />
          description: >-
            An AzureSASCredential instance used to authenticate requests to the
            service
        - id: options
          type: <xref uid="@azure-rest/core-client.ClientOptions" />
          description: Options used to configure the Render Client
      return:
        description: ''
        type: <xref uid="@azure-rest/maps-render.MapsRenderClient" />
  - name: >-
      isUnexpected(RenderGetMapTile200Response |
      RenderGetMapTileDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response: RenderGetMapTile200Response |
        RenderGetMapTileDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref uid="@azure-rest/maps-render.RenderGetMapTile200Response" /> |
            <xref uid="@azure-rest/maps-render.RenderGetMapTileDefaultResponse"
            />
          description: ''
      return:
        description: ''
        type: response
  - name: >-
      isUnexpected(RenderGetMapTileset200Response |
      RenderGetMapTilesetDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected_1'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response: RenderGetMapTileset200Response |
        RenderGetMapTilesetDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref uid="@azure-rest/maps-render.RenderGetMapTileset200Response"
            /> | <xref
            uid="@azure-rest/maps-render.RenderGetMapTilesetDefaultResponse" />
          description: ''
      return:
        description: ''
        type: response
  - name: >-
      isUnexpected(RenderGetMapAttribution200Response |
      RenderGetMapAttributionDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected_2'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response: RenderGetMapAttribution200Response |
        RenderGetMapAttributionDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref
            uid="@azure-rest/maps-render.RenderGetMapAttribution200Response" />
            | <xref
            uid="@azure-rest/maps-render.RenderGetMapAttributionDefaultResponse"
            />
          description: ''
      return:
        description: ''
        type: response
  - name: >-
      isUnexpected(RenderGetMapStateTile200Response |
      RenderGetMapStateTileDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected_3'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response: RenderGetMapStateTile200Response |
        RenderGetMapStateTileDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref uid="@azure-rest/maps-render.RenderGetMapStateTile200Response"
            /> | <xref
            uid="@azure-rest/maps-render.RenderGetMapStateTileDefaultResponse"
            />
          description: ''
      return:
        description: ''
        type: response
  - name: >-
      isUnexpected(RenderGetCopyrightCaption200Response |
      RenderGetCopyrightCaptionDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected_4'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response: RenderGetCopyrightCaption200Response |
        RenderGetCopyrightCaptionDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref
            uid="@azure-rest/maps-render.RenderGetCopyrightCaption200Response"
            /> | <xref
            uid="@azure-rest/maps-render.RenderGetCopyrightCaptionDefaultResponse"
            />
          description: ''
      return:
        description: ''
        type: response
  - name: >-
      isUnexpected(RenderGetMapStaticImage200Response |
      RenderGetMapStaticImageDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected_5'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response: RenderGetMapStaticImage200Response |
        RenderGetMapStaticImageDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref
            uid="@azure-rest/maps-render.RenderGetMapStaticImage200Response" />
            | <xref
            uid="@azure-rest/maps-render.RenderGetMapStaticImageDefaultResponse"
            />
          description: ''
      return:
        description: ''
        type: response
  - name: >-
      isUnexpected(RenderGetCopyrightFromBoundingBox200Response |
      RenderGetCopyrightFromBoundingBoxDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected_6'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response:
        RenderGetCopyrightFromBoundingBox200Response |
        RenderGetCopyrightFromBoundingBoxDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref
            uid="@azure-rest/maps-render.RenderGetCopyrightFromBoundingBox200Response"
            /> | <xref
            uid="@azure-rest/maps-render.RenderGetCopyrightFromBoundingBoxDefaultResponse"
            />
          description: ''
      return:
        description: ''
        type: response
  - name: >-
      isUnexpected(RenderGetCopyrightForTile200Response |
      RenderGetCopyrightForTileDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected_7'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response: RenderGetCopyrightForTile200Response |
        RenderGetCopyrightForTileDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref
            uid="@azure-rest/maps-render.RenderGetCopyrightForTile200Response"
            /> | <xref
            uid="@azure-rest/maps-render.RenderGetCopyrightForTileDefaultResponse"
            />
          description: ''
      return:
        description: ''
        type: response
  - name: >-
      isUnexpected(RenderGetCopyrightForWorld200Response |
      RenderGetCopyrightForWorldDefaultResponse)
    uid: '@azure-rest/maps-render.isUnexpected_8'
    package: '@azure-rest/maps-render'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function isUnexpected(response: RenderGetCopyrightForWorld200Response |
        RenderGetCopyrightForWorldDefaultResponse): response
      parameters:
        - id: response
          type: >-
            <xref
            uid="@azure-rest/maps-render.RenderGetCopyrightForWorld200Response"
            /> | <xref
            uid="@azure-rest/maps-render.RenderGetCopyrightForWorldDefaultResponse"
            />
          description: ''
      return:
        description: ''
        type: response
  - name: positionToTileXY(LatLon, number, "256" | "512")
    uid: '@azure-rest/maps-render.positionToTileXY'
    package: '@azure-rest/maps-render'
    summary: >+
      Calculates the XY tile coordinates that a coordinate falls into for a
      specific zoom level.

      Reference:
      https://learn.microsoft.com/en-us/azure/azure-maps/zoom-levels-and-tile-grid?tabs=typescript#tile-math-source-code


      **Example**


      ```ts snippet:ReadmeSampleRequestMapTiles

      import { DefaultAzureCredential } from "@azure/identity";

      import MapsRender, { positionToTileXY } from "@azure-rest/maps-render";

      import { createWriteStream } from "node:fs";


      const credential = new DefaultAzureCredential();

      const client = MapsRender(credential, "<maps-account-client-id>");


      const zoom = 6;

      // Use the helper function `positionToTileXY` to get the tile index from
      the coordinate.

      const { x, y } = positionToTileXY([47.61559, -122.33817], 6, "256");

      const response = await client
        .path("/map/tile")
        .get({
          queryParameters: {
            tilesetId: "microsoft.base.road",
            zoom,
            x,
            y,
          },
        })
        .asNodeStream();

      // Handle the error.

      if (!response.body) {
        throw Error("No response body");
      }


      response.body.pipe(createWriteStream("tile.png"));

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function positionToTileXY(position: LatLon, zoom: number, tileSize:
        "256" | "512"): { x: number, y: number }
      parameters:
        - id: position
          type: <xref uid="@azure/maps-common.LatLon" />
          description: Position coordinate in the format [latitude, longitude].
        - id: zoom
          type: number
          description: Zoom level.
        - id: tileSize
          type: '"256" | "512"'
          description: The size of the tiles in the tile pyramid.
      return:
        description: Tile XY coordinates.
        type: '{ x: number, y: number }'
