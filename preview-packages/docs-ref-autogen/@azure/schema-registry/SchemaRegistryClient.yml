### YamlMime:TSType
name: SchemaRegistryClient
uid: '@azure/schema-registry.SchemaRegistryClient'
package: '@azure/schema-registry'
summary: Client for Azure Schema Registry service.
fullName: SchemaRegistryClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: SchemaRegistryClient(string, TokenCredential, SchemaRegistryClientOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.constructor'
    package: '@azure/schema-registry'
    summary: Creates a new client for Azure Schema Registry service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new SchemaRegistryClient(fullyQualifiedNamespace: string, credential:
        TokenCredential, options?: SchemaRegistryClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type: string
          description: |-
            The Schema Registry service qualified namespace URL, for example
                                             https://mynamespace.servicebus.windows.net.
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: Credential to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/schema-registry.SchemaRegistryClientOptions" />
          description: Options to configure API requests to the service.
properties:
  - name: fullyQualifiedNamespace
    uid: '@azure/schema-registry.SchemaRegistryClient.fullyQualifiedNamespace'
    package: '@azure/schema-registry'
    summary: The Schema Registry service fully qualified namespace URL.
    fullName: fullyQualifiedNamespace
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'fullyQualifiedNamespace: string'
      return:
        description: ''
        type: string
methods:
  - name: getSchema(string, GetSchemaOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.getSchema'
    package: '@azure/schema-registry'
    summary: >-
      Gets an existing schema by ID. If the schema was not found, a RestError
      with

      status code 404 will be thrown, which could be caught as follows:


      ```ts snippet:ignore

      ...

      } catch (e) {
       if (typeof e === "object" && e.statusCode === 404) {
         ...;
       }
       throw e;
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSchema(schemaId: string, options?: GetSchemaOptions):
        Promise<Schema>
      parameters:
        - id: schemaId
          type: string
          description: Unique schema ID.
        - id: options
          type: <xref uid="@azure/schema-registry.GetSchemaOptions" />
          description: ''
      return:
        description: Schema with given ID.
        type: Promise&lt;<xref uid="@azure/schema-registry.Schema" />&gt;
  - name: getSchema(string, string, number, GetSchemaOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.getSchema_1'
    package: '@azure/schema-registry'
    summary: >-
      Gets an existing schema by version. If the schema was not found, a
      RestError with

      status code 404 will be thrown, which could be caught as follows:


      ```ts snippet:ignore

      ...

      } catch (e) {
       if (typeof e === "object" && e.statusCode === 404) {
         ...;
       }
       throw e;
      }

      ```
    remarks: >-
      If the client uses an older API version that does not support the format
      of the schema,

      the schema format may return the value in the content type header. Please
      upgrade to the client using

      the latest API version so that it can return the correct schema format.
    isDeprecated: false
    syntax:
      content: >-
        function getSchema(name: string, groupName: string, version: number,
        options?: GetSchemaOptions): Promise<Schema>
      parameters:
        - id: name
          type: string
          description: ''
        - id: groupName
          type: string
          description: ''
        - id: version
          type: number
          description: ''
        - id: options
          type: <xref uid="@azure/schema-registry.GetSchemaOptions" />
          description: ''
      return:
        description: Schema with given ID.
        type: Promise&lt;<xref uid="@azure/schema-registry.Schema" />&gt;
  - name: getSchemaProperties(SchemaDescription, GetSchemaPropertiesOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.getSchemaProperties'
    package: '@azure/schema-registry'
    summary: |-
      Gets the ID of an existing schema with matching name, group, type, and
      definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSchemaProperties(schema: SchemaDescription, options?:
        GetSchemaPropertiesOptions): Promise<SchemaProperties>
      parameters:
        - id: schema
          type: <xref uid="@azure/schema-registry.SchemaDescription" />
          description: Schema to match.
        - id: options
          type: <xref uid="@azure/schema-registry.GetSchemaPropertiesOptions" />
          description: ''
      return:
        description: Matched schema's ID.
        type: Promise&lt;<xref uid="@azure/schema-registry.SchemaProperties" />&gt;
  - name: registerSchema(SchemaDescription, RegisterSchemaOptions)
    uid: '@azure/schema-registry.SchemaRegistryClient.registerSchema'
    package: '@azure/schema-registry'
    summary: >-
      Registers a new schema and returns its ID.


      If schema of specified name does not exist in the specified group, a
      schema

      is created at version 1. If schema of specified name exists already in

      specified group, schema is created at latest version + 1.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function registerSchema(schema: SchemaDescription, options?:
        RegisterSchemaOptions): Promise<SchemaProperties>
      parameters:
        - id: schema
          type: <xref uid="@azure/schema-registry.SchemaDescription" />
          description: Schema to register.
        - id: options
          type: <xref uid="@azure/schema-registry.RegisterSchemaOptions" />
          description: ''
      return:
        description: Registered schema's ID.
        type: Promise&lt;<xref uid="@azure/schema-registry.SchemaProperties" />&gt;
