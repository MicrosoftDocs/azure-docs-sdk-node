### YamlMime:TSType
name: KeyClient
uid: '@azure/keyvault-keys.KeyClient'
package: '@azure/keyvault-keys'
summary: >-
  The KeyClient provides methods to manage
  [KeyVaultKey](xref:@azure/keyvault-keys.KeyVaultKey) in the

  Azure Key Vault. The client supports creating, retrieving, updating,

  deleting, purging, backing up, restoring and listing KeyVaultKeys. The

  client also supports listing
  [DeletedKey](xref:@azure/keyvault-keys.DeletedKey) for a soft-delete enabled
  Azure Key

  Vault.
fullName: KeyClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: KeyClient(string, TokenCredential, KeyClientOptions)
    uid: '@azure/keyvault-keys.KeyClient.constructor'
    package: '@azure/keyvault-keys'
    summary: >-
      Creates an instance of KeyClient.


      Example usage:

      ```ts snippet:ReadmeSampleCreateClient

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      // Build the URL to reach your key vault

      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`; // or
      `https://${vaultName}.managedhsm.azure.net` for managed HSM.


      // Lastly, create our keys client and connect to the service

      const client = new KeyClient(url, credential);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new KeyClient(vaultUrl: string, credential: TokenCredential,
        pipelineOptions?: KeyClientOptions)
      parameters:
        - id: vaultUrl
          type: string
          description: >-
            the URL of the Key Vault. It should have this shape:
            `https://${your-key-vault-name}.vault.azure.net`. You should
            validate that this URL references a valid Key Vault or Managed HSM
            resource. See https://aka.ms/azsdk/blog/vault-uri for details.
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type: <xref uid="@azure/keyvault-keys.KeyClientOptions" />
          description: >-
            Pipeline options used to configure Key Vault API requests. Omit this
            parameter to use the default pipeline configuration.
properties:
  - name: vaultUrl
    uid: '@azure/keyvault-keys.KeyClient.vaultUrl'
    package: '@azure/keyvault-keys'
    summary: The base URL to the vault
    fullName: vaultUrl
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'vaultUrl: string'
      return:
        description: ''
        type: string
methods:
  - name: backupKey(string, BackupKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.backupKey'
    package: '@azure/keyvault-keys'
    summary: >-
      Requests that a backup of the specified key be downloaded to the client.
      All versions of the

      key will be downloaded. This operation requires the keys/backup
      permission.


      Example usage:

      ```ts snippet:ReadmeSampleBackupKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const backupContents = await client.backupKey(keyName);

      ```

      Backs up the specified key.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupKey(name: string, options?: BackupKeyOptions):
        Promise<undefined | Uint8Array>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.BackupKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;undefined | Uint8Array&gt;
  - name: beginDeleteKey(string, BeginDeleteKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.beginDeleteKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The delete operation applies to any key stored in Azure Key Vault.
      Individual versions

      of a key can not be deleted, only all versions of a given key at once.


      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the key is deleted.


      This operation requires the keys/delete permission.


      Example usage:

      ```ts snippet:ReadmeSampleDeleteKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const poller = await client.beginDeleteKey(keyName);

      await poller.pollUntilDone();

      ```

      Deletes a key from a specified key vault.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteKey(name: string, options?: BeginDeleteKeyOptions):
        Promise<PollerLike<PollOperationState<DeletedKey>, DeletedKey>>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.BeginDeleteKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-keys.PollerLike" />&lt;<xref
          uid="@azure/keyvault-keys.PollOperationState" />&lt;<xref
          uid="@azure/keyvault-keys.DeletedKey" />&gt;, <xref
          uid="@azure/keyvault-keys.DeletedKey" />&gt;&gt;
  - name: beginRecoverDeletedKey(string, BeginRecoverDeletedKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.beginRecoverDeletedKey'
    package: '@azure/keyvault-keys'
    summary: >-
      Recovers the deleted key in the specified vault. This operation can only
      be performed on a

      soft-delete enabled vault.


      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the deleted key is recovered.


      This operation requires the keys/recover permission.


      Example usage:

      ```ts snippet:ReadmeSampleRecoverDeletedKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const deletePoller = await client.beginDeleteKey(keyName);

      await deletePoller.pollUntilDone();


      const recoverPoller = await client.beginRecoverDeletedKey(keyName);

      const recoveredKey = await recoverPoller.pollUntilDone();

      ```

      Recovers the deleted key to the latest version.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginRecoverDeletedKey(name: string, options?:
        BeginRecoverDeletedKeyOptions):
        Promise<PollerLike<PollOperationState<DeletedKey>, DeletedKey>>
      parameters:
        - id: name
          type: string
          description: The name of the deleted key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.BeginRecoverDeletedKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-keys.PollerLike" />&lt;<xref
          uid="@azure/keyvault-keys.PollOperationState" />&lt;<xref
          uid="@azure/keyvault-keys.DeletedKey" />&gt;, <xref
          uid="@azure/keyvault-keys.DeletedKey" />&gt;&gt;
  - name: createEcKey(string, CreateEcKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.createEcKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The createEcKey method creates a new elliptic curve key in Azure Key
      Vault. If the named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.


      Example usage:

      ```ts snippet:ReadmeSampleCreateEcKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";

      const result = await client.createEcKey(keyName, { curve: "P-256" });

      console.log("result: ", result);

      ```

      Creates a new key, stores it, then returns key parameters and properties
      to the client.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createEcKey(name: string, options?: CreateEcKeyOptions):
        Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.CreateEcKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: createKey(string, string, CreateKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.createKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The create key operation can be used to create any key type in Azure Key
      Vault. If the named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.


      Example usage:

      ```ts snippet:ReadmeSampleCreateKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";

      const result = await client.createKey(keyName, "RSA");

      console.log("result: ", result);

      ```

      Creates a new key, stores it, then returns key parameters and properties
      to the client.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createKey(name: string, keyType: string, options?:
        CreateKeyOptions): Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: keyType
          type: string
          description: >-
            The type of the key. One of the following: 'EC', 'EC-HSM', 'RSA',
            'RSA-HSM', 'oct'.
        - id: options
          type: <xref uid="@azure/keyvault-keys.CreateKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: createOctKey(string, CreateOctKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.createOctKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The createOctKey method creates a new OCT key in Azure Key Vault. If the
      named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.


      Example usage:

      ```ts snippet:ReadmeSampleCreateOctKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";

      const result = await client.createOctKey("MyKey", { hsm: true });

      console.log("result: ", result);

      ```

      Creates a new key, stores it, then returns key parameters and properties
      to the client.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createOctKey(name: string, options?: CreateOctKeyOptions):
        Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.CreateOctKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: createRsaKey(string, CreateRsaKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.createRsaKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The createRSAKey method creates a new RSA key in Azure Key Vault. If the
      named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.


      Example usage:

      ```ts snippet:ReadmeSampleCreateRsaKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";

      const result = await client.createRsaKey("MyKey", { keySize: 2048 });

      console.log("result: ", result);

      ```

      Creates a new key, stores it, then returns key parameters and properties
      to the client.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createRsaKey(name: string, options?: CreateRsaKeyOptions):
        Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.CreateRsaKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: getCryptographyClient(string, GetCryptographyClientOptions)
    uid: '@azure/keyvault-keys.KeyClient.getCryptographyClient'
    package: '@azure/keyvault-keys'
    summary: >-
      Gets a [CryptographyClient](xref:@azure/keyvault-keys.CryptographyClient)
      for the given key.


      Example usage:

      ```ts snippet:ReadmeSampleGetCryptographyClient

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      // Get a cryptography client for a given key

      const cryptographyClient = client.getCryptographyClient("MyKey");

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCryptographyClient(keyName: string, options?:
        GetCryptographyClientOptions): CryptographyClient
      parameters:
        - id: keyName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/keyvault-keys.GetCryptographyClientOptions" />
          description: ''
      return:
        description: >-
          - A [CryptographyClient](xref:@azure/keyvault-keys.CryptographyClient)
          using the same options, credentials, and http client as this
          [KeyClient](xref:@azure/keyvault-keys.KeyClient)
        type: <xref uid="@azure/keyvault-keys.CryptographyClient" />
  - name: getDeletedKey(string, GetDeletedKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.getDeletedKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The getDeletedKey method returns the specified deleted key along with its
      properties.

      This operation requires the keys/get permission.


      Example usage:

      ```ts snippet:ReadmeSampleGetDeletedKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      await client.getDeletedKey(keyName);

      ```

      Gets the specified deleted key.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedKey(name: string, options?: GetDeletedKeyOptions):
        Promise<DeletedKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.GetDeletedKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.DeletedKey" />&gt;
  - name: getKey(string, GetKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.getKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The getKey method gets a specified key and is applicable to any key stored
      in Azure Key Vault.

      This operation requires the keys/get permission.


      Example usage:

      ```ts snippet:ReadmeSampleGetKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const latestKey = await client.getKey(keyName);

      console.log(`Latest version of the key ${keyName}: `, latestKey);


      const specificKey = await client.getKey(keyName, { version:
      latestKey.properties.version! });

      console.log(`The key ${keyName} at the version
      ${latestKey.properties.version!}: `, specificKey);

      ```

      Get a specified key from a given key vault.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKey(name: string, options?: GetKeyOptions):
        Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.GetKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: getKeyAttestation(string, GetKeyAttestationOptions)
    uid: '@azure/keyvault-keys.KeyClient.getKeyAttestation'
    package: '@azure/keyvault-keys'
    summary: >-
      The getKeyAttestation method gets a specified key and its attestation blob
      and is applicable to any key stored in Azure Key Vault Managed HSM.

      This operation requires the keys/get permission.


      Example usage:

      ```ts snippet:ReadmeSampleGetKeyAttestation

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT MANAGED HSM NAME>";

      const url = `https://${vaultName}.managedhsm.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const latestKey = await client.getKeyAttestation(keyName);

      console.log(`Latest version of the key ${keyName}: `, latestKey);


      const specificKey = await client.getKeyAttestation(keyName, {
        version: latestKey.properties.version!,
      });

      console.log(`The key ${keyName} at the version
      ${latestKey.properties.version!}: `, specificKey);

      ```

      Get a specified key from a given key vault.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyAttestation(name: string, options?:
        GetKeyAttestationOptions): Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.GetKeyAttestationOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: getKeyRotationPolicy(string, GetKeyRotationPolicyOptions)
    uid: '@azure/keyvault-keys.KeyClient.getKeyRotationPolicy'
    package: '@azure/keyvault-keys'
    summary: |-
      Gets the rotation policy of a Key Vault Key.
      By default, all keys have a policy that will notify 30 days before expiry.

      This operation requires the keys/get permission.
      Example usage:
      ```ts snippet:ReadmeSampleGetKeyRotationPolicy
      import { DefaultAzureCredential } from "@azure/identity";
      import { KeyClient } from "@azure/keyvault-keys";

      const credential = new DefaultAzureCredential();

      const vaultName = "<YOUR KEYVAULT NAME>";
      const url = `https://${vaultName}.vault.azure.net`;

      const client = new KeyClient(url, credential);

      const keyName = "MyKeyName";

      const result = await client.getKeyRotationPolicy(keyName);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getKeyRotationPolicy(keyName: string, options?:
        GetKeyRotationPolicyOptions): Promise<KeyRotationPolicy>
      parameters:
        - id: keyName
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.GetKeyRotationPolicyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyRotationPolicy" />&gt;
  - name: getRandomBytes(number, GetRandomBytesOptions)
    uid: '@azure/keyvault-keys.KeyClient.getRandomBytes'
    package: '@azure/keyvault-keys'
    summary: >-
      Gets the requested number of bytes containing random values from a managed
      HSM.

      This operation requires the managedHsm/rng permission.


      Example usage:

      ```ts snippet:ReadmeSampleGetRandomBytes

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const bytes = await client.getRandomBytes(10);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRandomBytes(count: number, options?: GetRandomBytesOptions):
        Promise<Uint8Array>
      parameters:
        - id: count
          type: number
          description: The number of bytes to generate between 1 and 128 inclusive.
        - id: options
          type: <xref uid="@azure/keyvault-keys.GetRandomBytesOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;Uint8Array&gt;
  - name: importKey(string, JsonWebKey, ImportKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.importKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The import key operation may be used to import any key type into an Azure
      Key Vault. If the

      named key already exists, Azure Key Vault creates a new version of the
      key. This operation

      requires the keys/import permission.


      Example usage:

      ```ts snippet:ReadmeSampleImportKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const jsonWebKey = {
        kty: "RSA",
        kid: "test-key-123",
        use: "sig",
        alg: "RS256",
        n: new Uint8Array([112, 34, 56, 98, 123, 244, 200, 99]),
        e: new Uint8Array([1, 0, 1]),
        d: new Uint8Array([45, 67, 89, 23, 144, 200, 76, 233]),
        p: new Uint8Array([34, 89, 100, 77, 204, 56, 29, 77]),
        q: new Uint8Array([78, 99, 201, 45, 188, 34, 67, 90]),
        dp: new Uint8Array([23, 45, 78, 56, 200, 144, 32, 67]),
        dq: new Uint8Array([12, 67, 89, 144, 99, 56, 23, 45]),
        qi: new Uint8Array([78, 90, 45, 201, 34, 67, 120, 55]),
      };


      const result = await client.importKey("MyKey", jsonWebKey);

      ```

      Imports an externally created key, stores it, and returns key parameters
      and properties

      to the client.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function importKey(name: string, key: JsonWebKey, options?:
        ImportKeyOptions): Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: Name for the imported key.
        - id: key
          type: <xref uid="@azure/keyvault-keys.JsonWebKey" />
          description: The JSON web key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.ImportKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: listDeletedKeys(ListDeletedKeysOptions)
    uid: '@azure/keyvault-keys.KeyClient.listDeletedKeys'
    package: '@azure/keyvault-keys'
    summary: >-
      Iterates the deleted keys in the vault.  The full key identifier and
      properties are provided

      in the response. No values are returned for the keys. This operations
      requires the keys/list permission.


      Example usage:

      ```ts snippet:ReadmeSampleListKeys

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      for await (const keyProperties of client.listPropertiesOfKeys()) {
        console.log("Key properties: ", keyProperties);
      }


      for await (const deletedKey of client.listDeletedKeys()) {
        console.log("Deleted: ", deletedKey);
      }


      for await (const versionProperties of
      client.listPropertiesOfKeyVersions(keyName)) {
        console.log("Version properties: ", versionProperties);
      }

      ```

      List all keys in the vault
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listDeletedKeys(options?: ListDeletedKeysOptions):
        PagedAsyncIterableIterator<DeletedKey, DeletedKey[], PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/keyvault-keys.ListDeletedKeysOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/keyvault-keys.PagedAsyncIterableIterator"
          />&lt;<xref uid="@azure/keyvault-keys.DeletedKey" />, <xref
          uid="@azure/keyvault-keys.DeletedKey" />[], <xref
          uid="@azure/keyvault-keys.PageSettings" />&gt;
  - name: listPropertiesOfKeys(ListPropertiesOfKeysOptions)
    uid: '@azure/keyvault-keys.KeyClient.listPropertiesOfKeys'
    package: '@azure/keyvault-keys'
    summary: >-
      Iterates the latest version of all keys in the vault.  The full key
      identifier and properties are provided

      in the response. No values are returned for the keys. This operations
      requires the keys/list permission.


      Example usage:

      ```ts snippet:ReadmeSampleListKeys

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      for await (const keyProperties of client.listPropertiesOfKeys()) {
        console.log("Key properties: ", keyProperties);
      }


      for await (const deletedKey of client.listDeletedKeys()) {
        console.log("Deleted: ", deletedKey);
      }


      for await (const versionProperties of
      client.listPropertiesOfKeyVersions(keyName)) {
        console.log("Version properties: ", versionProperties);
      }

      ```

      List all keys in the vault
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPropertiesOfKeys(options?: ListPropertiesOfKeysOptions):
        PagedAsyncIterableIterator<KeyProperties, KeyProperties[], PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/keyvault-keys.ListPropertiesOfKeysOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/keyvault-keys.PagedAsyncIterableIterator"
          />&lt;<xref uid="@azure/keyvault-keys.KeyProperties" />, <xref
          uid="@azure/keyvault-keys.KeyProperties" />[], <xref
          uid="@azure/keyvault-keys.PageSettings" />&gt;
  - name: listPropertiesOfKeyVersions(string, ListPropertiesOfKeyVersionsOptions)
    uid: '@azure/keyvault-keys.KeyClient.listPropertiesOfKeyVersions'
    package: '@azure/keyvault-keys'
    summary: >-
      Iterates all versions of the given key in the vault. The full key
      identifier, properties, and tags are provided

      in the response. This operation requires the keys/list permission.


      Example usage:

      ```ts snippet:ReadmeSampleListKeys

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      for await (const keyProperties of client.listPropertiesOfKeys()) {
        console.log("Key properties: ", keyProperties);
      }


      for await (const deletedKey of client.listDeletedKeys()) {
        console.log("Deleted: ", deletedKey);
      }


      for await (const versionProperties of
      client.listPropertiesOfKeyVersions(keyName)) {
        console.log("Version properties: ", versionProperties);
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPropertiesOfKeyVersions(name: string, options?:
        ListPropertiesOfKeyVersionsOptions):
        PagedAsyncIterableIterator<KeyProperties, KeyProperties[], PageSettings>
      parameters:
        - id: name
          type: string
          description: Name of the key to fetch versions for
        - id: options
          type: >-
            <xref uid="@azure/keyvault-keys.ListPropertiesOfKeyVersionsOptions"
            />
          description: The optional parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/keyvault-keys.PagedAsyncIterableIterator"
          />&lt;<xref uid="@azure/keyvault-keys.KeyProperties" />, <xref
          uid="@azure/keyvault-keys.KeyProperties" />[], <xref
          uid="@azure/keyvault-keys.PageSettings" />&gt;
  - name: purgeDeletedKey(string, PurgeDeletedKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.purgeDeletedKey'
    package: '@azure/keyvault-keys'
    summary: >-
      The purge deleted key operation removes the key permanently, without the
      possibility of

      recovery. This operation can only be enabled on a soft-delete enabled
      vault. This operation

      requires the keys/purge permission.


      Example usage:

      ```ts snippet:ReadmeSamplePurgeDeletedKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const deletePoller = await client.beginDeleteKey(keyName);

      await deletePoller.pollUntilDone();


      await client.purgeDeletedKey(keyName);

      ```

      Permanently deletes the specified key.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function purgeDeletedKey(name: string, options?:
        PurgeDeletedKeyOptions): Promise<void>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.PurgeDeletedKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: releaseKey(string, string, ReleaseKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.releaseKey'
    package: '@azure/keyvault-keys'
    summary: >-
      Releases a key from a managed HSM.


      The release key operation is applicable to all key types. The operation
      requires the key to be marked exportable and the keys/release permission.


      Example usage:

      ```ts snippet:ReadmeSampleReleaseKey

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const result = await client.releaseKey("myKey", "<attestation-target>");

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function releaseKey(name: string, targetAttestationToken: string,
        options?: ReleaseKeyOptions): Promise<ReleaseKeyResult>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: targetAttestationToken
          type: string
          description: The attestation assertion for the target of the key release.
        - id: options
          type: <xref uid="@azure/keyvault-keys.ReleaseKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.ReleaseKeyResult" />&gt;
  - name: restoreKeyBackup(Uint8Array, RestoreKeyBackupOptions)
    uid: '@azure/keyvault-keys.KeyClient.restoreKeyBackup'
    package: '@azure/keyvault-keys'
    summary: >-
      Restores a backed up key, and all its versions, to a vault. This operation
      requires the

      keys/restore permission.


      Example usage:

      ```ts snippet:ReadmeSampleRestoreKeyBackup

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const backupContents = await client.backupKey(keyName);


      const key = await client.restoreKeyBackup(backupContents);

      ```

      Restores a backed up key to a vault.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreKeyBackup(backup: Uint8Array, options?:
        RestoreKeyBackupOptions): Promise<KeyVaultKey>
      parameters:
        - id: backup
          type: Uint8Array
          description: The backup blob associated with a key bundle.
        - id: options
          type: <xref uid="@azure/keyvault-keys.RestoreKeyBackupOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: rotateKey(string, RotateKeyOptions)
    uid: '@azure/keyvault-keys.KeyClient.rotateKey'
    package: '@azure/keyvault-keys'
    summary: >-
      Rotates the key based on the key policy by generating a new version of the
      key. This operation requires the keys/rotate permission.


      Example usage:

      ```ts snippet:ReadmeSampleKeyRotation

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      // Set the key's automated rotation policy to rotate the key 30 days
      before expiry.

      const policy = await client.updateKeyRotationPolicy(keyName, {
        lifetimeActions: [
          {
            action: "Rotate",
            timeBeforeExpiry: "P30D",
          },
        ],
        // You may also specify the duration after which any newly rotated key will expire.
        // In this case, any new key versions will expire after 90 days.
        expiresIn: "P90D",
      });


      // You can get the current key rotation policy of a given key by calling
      the getKeyRotationPolicy method.

      const currentPolicy = await client.getKeyRotationPolicy(keyName);


      // Finally, you can rotate a key on-demand by creating a new version of
      the given key.

      const rotatedKey = await client.rotateKey(keyName);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rotateKey(name: string, options?: RotateKeyOptions):
        Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key to rotate.
        - id: options
          type: <xref uid="@azure/keyvault-keys.RotateKeyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: updateKeyProperties(string, string, UpdateKeyPropertiesOptions)
    uid: '@azure/keyvault-keys.KeyClient.updateKeyProperties'
    package: '@azure/keyvault-keys'
    summary: >-
      The updateKeyProperties method changes specified properties of an existing
      stored key. Properties that

      are not specified in the request are left unchanged. The value of a key
      itself cannot be

      changed. This operation requires the keys/set permission.


      Example usage:

      ```ts snippet:ReadmeSampleUpdateKeyProperties

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const result = await client.createKey(keyName, "RSA");

      await client.updateKeyProperties(keyName, result.properties.version, {
        enabled: false,
      });

      ```

      Updates the properties associated with a specified key in a given key
      vault.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateKeyProperties(name: string, keyVersion: string, options?:
        UpdateKeyPropertiesOptions): Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: keyVersion
          type: string
          description: The version of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.UpdateKeyPropertiesOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: updateKeyProperties(string, UpdateKeyPropertiesOptions)
    uid: '@azure/keyvault-keys.KeyClient.updateKeyProperties_1'
    package: '@azure/keyvault-keys'
    summary: >-
      The updateKeyProperties method changes specified properties of the latest
      version of an existing stored key. Properties that

      are not specified in the request are left unchanged. The value of a key
      itself cannot be

      changed. This operation requires the keys/set permission.


      Example usage:

      ```ts snippet:ReadmeSampleUpdateKeyProperties

      import { DefaultAzureCredential } from "@azure/identity";

      import { KeyClient } from "@azure/keyvault-keys";


      const credential = new DefaultAzureCredential();


      const vaultName = "<YOUR KEYVAULT NAME>";

      const url = `https://${vaultName}.vault.azure.net`;


      const client = new KeyClient(url, credential);


      const keyName = "MyKeyName";


      const result = await client.createKey(keyName, "RSA");

      await client.updateKeyProperties(keyName, result.properties.version, {
        enabled: false,
      });

      ```

      Updates the properties associated with a specified key in a given key
      vault.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateKeyProperties(name: string, options?:
        UpdateKeyPropertiesOptions): Promise<KeyVaultKey>
      parameters:
        - id: name
          type: string
          description: The name of the key.
        - id: options
          type: <xref uid="@azure/keyvault-keys.UpdateKeyPropertiesOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyVaultKey" />&gt;
  - name: >-
      updateKeyRotationPolicy(string, KeyRotationPolicyProperties,
      UpdateKeyRotationPolicyOptions)
    uid: '@azure/keyvault-keys.KeyClient.updateKeyRotationPolicy'
    package: '@azure/keyvault-keys'
    summary: |-
      Updates the rotation policy of a Key Vault Key.
      This operation requires the keys/update permission.

      Example usage:
      ```ts snippet:ReadmeSampleUpdateKeyRotationPolicy
      import { DefaultAzureCredential } from "@azure/identity";
      import { KeyClient } from "@azure/keyvault-keys";

      const credential = new DefaultAzureCredential();

      const vaultName = "<YOUR KEYVAULT NAME>";
      const url = `https://${vaultName}.vault.azure.net`;

      const client = new KeyClient(url, credential);

      const keyName = "MyKeyName";

      const myPolicy = await client.getKeyRotationPolicy(keyName);

      const setPolicy = await client.updateKeyRotationPolicy(keyName, myPolicy);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateKeyRotationPolicy(keyName: string, policy:
        KeyRotationPolicyProperties, options?: UpdateKeyRotationPolicyOptions):
        Promise<KeyRotationPolicy>
      parameters:
        - id: keyName
          type: string
          description: The name of the key.
        - id: policy
          type: <xref uid="@azure/keyvault-keys.KeyRotationPolicyProperties" />
          description: ''
        - id: options
          type: <xref uid="@azure/keyvault-keys.UpdateKeyRotationPolicyOptions" />
          description: The optional parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/keyvault-keys.KeyRotationPolicy" />&gt;
