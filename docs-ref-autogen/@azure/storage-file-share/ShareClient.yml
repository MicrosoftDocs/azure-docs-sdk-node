### YamlMime:TSType
name: ShareClient
uid: '@azure/storage-file-share.ShareClient'
package: '@azure/storage-file-share'
summary: >-
  A ShareClient represents a URL to the Azure Storage share allowing you to
  manipulate its directories and files.
fullName: ShareClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ShareClient(string, Credential_2 | TokenCredential, ShareClientOptions)
    uid: '@azure/storage-file-share.ShareClient.constructor_1'
    package: '@azure/storage-file-share'
    summary: Creates an instance of ShareClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ShareClient(url: string, credential?: Credential_2 |
        TokenCredential, options?: ShareClientOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file share, such as
                                "https://myaccount.file.core.windows.net/share". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/share?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-file-share.Credential" /> | <xref
            uid="@azure/core-auth.TokenCredential" />
          description: |-
            Such as AnonymousCredential or StorageSharedKeyCredential.
                                             If not specified, AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareClientOptions" />
          description: Optional. Options to configure the HTTP pipeline.
  - name: ShareClient(string, Pipeline, ShareClientConfig)
    uid: '@azure/storage-file-share.ShareClient.constructor_2'
    package: '@azure/storage-file-share'
    summary: Creates an instance of ShareClient.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ShareClient(url: string, pipeline: Pipeline, options?:
        ShareClientConfig)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file share, such as
                                "https://myaccount.file.core.windows.net/share". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/share?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-file-share.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareClientConfig" />
          description: ''
  - name: ShareClient(string, string, ShareClientOptions)
    uid: '@azure/storage-file-share.ShareClient.constructor'
    package: '@azure/storage-file-share'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ShareClient(connectionString: string, name: string, options?:
        ShareClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: name
          type: string
          description: Share name.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareClientOptions" />
          description: Optional. Options to configure the HTTP pipeline.
properties:
  - name: name
    uid: '@azure/storage-file-share.ShareClient.name'
    package: '@azure/storage-file-share'
    summary: The name of the share
    fullName: name
    remarks: ''
    isDeprecated: false
    syntax:
      content: string name
      return:
        description: ''
        type: string
  - name: rootDirectoryClient
    uid: '@azure/storage-file-share.ShareClient.rootDirectoryClient'
    package: '@azure/storage-file-share'
    summary: |-
      Gets the directory client for the root directory of this share.
      Note that the root directory always exists and cannot be deleted.

       A new ShareDirectoryClient object for the root directory.
    fullName: rootDirectoryClient
    remarks: ''
    isDeprecated: false
    syntax:
      content: ShareDirectoryClient rootDirectoryClient
      return:
        description: ''
        type: <xref uid="@azure/storage-file-share.ShareDirectoryClient" />
inheritedProperties:
  - name: accountName
    uid: '@azure/storage-file-share.ShareClient.accountName'
    package: '@azure/storage-file-share'
    summary: ''
    fullName: accountName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.accountName
  - name: url
    uid: '@azure/storage-file-share.ShareClient.url'
    package: '@azure/storage-file-share'
    summary: URL string value.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> StorageClient.url
methods:
  - name: create(ShareCreateOptions)
    uid: '@azure/storage-file-share.ShareClient.create'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new share under the specified account. If the share with

      the same name already exists, the operation fails.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-share
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(options?: ShareCreateOptions):
        Promise<ShareCreateResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareCreateOptions" />
          description: Options to Share Create operation.
      return:
        description: Response data for the Share Create operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.ShareCreateResponse"
          />&gt;
  - name: createDirectory(string, DirectoryCreateOptions)
    uid: '@azure/storage-file-share.ShareClient.createDirectory'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new subdirectory under this share.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-directory
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDirectory(directoryName: string, options?:
        DirectoryCreateOptions): Promise<{ directoryClient:
        ShareDirectoryClient, directoryCreateResponse: DirectoryCreateResponse
        }>
      parameters:
        - id: directoryName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryCreateOptions" />
          description: Options to Directory Create operation.
      return:
        description: >-
          Directory creation response data and the corresponding directory
          client.
        type: >-
          Promise&lt;{ directoryClient: ShareDirectoryClient,
          directoryCreateResponse: DirectoryCreateResponse }&gt;
  - name: createFile(string, number, FileCreateOptions)
    uid: '@azure/storage-file-share.ShareClient.createFile'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new file or replaces a file under the root directory of this
      share.

      Note it only initializes the file with no content.


      See https://learn.microsoft.com/en-us/rest/api/storageservices/create-file
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createFile(fileName: string, size: number, options?:
        FileCreateOptions): Promise<{ fileClient: ShareFileClient,
        fileCreateResponse: FileCreateResponse }>
      parameters:
        - id: fileName
          type: string
          description: ''
        - id: size
          type: number
          description: Specifies the maximum size in bytes for the file, up to 4 TB.
        - id: options
          type: <xref uid="@azure/storage-file-share.FileCreateOptions" />
          description: Options to File Create operation.
      return:
        description: File creation response data and the corresponding file client.
        type: >-
          Promise&lt;{ fileClient: ShareFileClient, fileCreateResponse:
          FileCreateResponse }&gt;
  - name: createIfNotExists(ShareCreateOptions)
    uid: '@azure/storage-file-share.ShareClient.createIfNotExists'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new share under the specified account. If the share with

      the same name already exists, it is not changed.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-share
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createIfNotExists(options?: ShareCreateOptions):
        Promise<ShareCreateIfNotExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareCreateOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareCreateIfNotExistsResponse" />&gt;
  - name: createPermission(string | SharePermission, ShareCreatePermissionOptions)
    uid: '@azure/storage-file-share.ShareClient.createPermission'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a file permission (a security descriptor) at the share level.

      The created security descriptor can be used for the files/directories in
      the share.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/create-permission
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createPermission(filePermission: string | SharePermission,
        options?: ShareCreatePermissionOptions):
        Promise<ShareCreatePermissionResponse>
      parameters:
        - id: filePermission
          type: string | <xref uid="@azure/storage-file-share.SharePermission" />
          description: File permission described in the SDDL
        - id: options
          type: >-
            <xref uid="@azure/storage-file-share.ShareCreatePermissionOptions"
            />
          description: Options to Share Create Permission operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareCreatePermissionResponse" />&gt;
  - name: createSnapshot(ShareCreateSnapshotOptions)
    uid: '@azure/storage-file-share.ShareClient.createSnapshot'
    package: '@azure/storage-file-share'
    summary: Creates a read-only snapshot of a share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createSnapshot(options?: ShareCreateSnapshotOptions):
        Promise<ShareCreateSnapshotResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareCreateSnapshotOptions" />
          description: Options to Share Create Snapshot operation.
      return:
        description: Response data for the Share Create Snapshot operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareCreateSnapshotResponse" />&gt;
  - name: delete(ShareDeleteMethodOptions)
    uid: '@azure/storage-file-share.ShareClient.delete'
    package: '@azure/storage-file-share'
    summary: >-
      Marks the specified share for deletion. The share and any directories or
      files

      contained within it are later deleted during garbage collection.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-share
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?: ShareDeleteMethodOptions):
        Promise<ShareDeleteResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareDeleteMethodOptions" />
          description: Options to Share Delete operation.
      return:
        description: Response data for the Share Delete operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.ShareDeleteResponse"
          />&gt;
  - name: deleteDirectory(string, DirectoryDeleteOptions)
    uid: '@azure/storage-file-share.ShareClient.deleteDirectory'
    package: '@azure/storage-file-share'
    summary: >-
      Removes the specified empty sub directory under this share.

      Note that the directory must be empty before it can be deleted.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-directory
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDirectory(directoryName: string, options?:
        DirectoryDeleteOptions): Promise<DirectoryDeleteResponse>
      parameters:
        - id: directoryName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryDeleteOptions" />
          description: Options to Directory Delete operation.
      return:
        description: Directory deletion response data.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryDeleteResponse" />&gt;
  - name: deleteFile(string, FileDeleteOptions)
    uid: '@azure/storage-file-share.ShareClient.deleteFile'
    package: '@azure/storage-file-share'
    summary: >-
      Removes a file under the root directory of this share from the storage
      account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.


      Delete File will fail with status code 409 (Conflict) and error code
      `SharingViolation`

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400

      (`InvalidQueryParameterValue`)


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-file2
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFile(fileName: string, options?: FileDeleteOptions):
        Promise<FileDeleteResponse>
      parameters:
        - id: fileName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDeleteOptions" />
          description: Options to File Delete operation.
      return:
        description: Promise<FileDeleteResponse> File Delete response data.
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.FileDeleteResponse"
          />&gt;
  - name: deleteIfExists(ShareDeleteMethodOptions)
    uid: '@azure/storage-file-share.ShareClient.deleteIfExists'
    package: '@azure/storage-file-share'
    summary: >-
      Marks the specified share for deletion if it exists. The share and any
      directories or files

      contained within it are later deleted during garbage collection.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/delete-share
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteIfExists(options?: ShareDeleteMethodOptions):
        Promise<ShareDeleteIfExistsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareDeleteMethodOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareDeleteIfExistsResponse" />&gt;
  - name: exists(ShareExistsOptions)
    uid: '@azure/storage-file-share.ShareClient.exists'
    package: '@azure/storage-file-share'
    summary: >-
      Returns true if the Azrue share resource represented by this client
      exists; false otherwise.


      NOTE: use this function with care since an existing share might be deleted
      by other clients or

      applications. Vice versa new shares might be added by other clients or
      applications after this

      function completes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function exists(options?: ShareExistsOptions): Promise<boolean>'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareExistsOptions" />
          description: options to Exists operation.
      return:
        description: ''
        type: Promise&lt;boolean&gt;
  - name: generateSasStringToSign(ShareGenerateSasUrlOptions)
    uid: '@azure/storage-file-share.ShareClient.generateSasStringToSign'
    package: '@azure/storage-file-share'
    summary: >-
      Only available for ShareClient constructed with a shared key credential.


      Generates string to sign for a Service Shared Access Signature (SAS) URI
      based on the client properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generateSasStringToSign(options: ShareGenerateSasUrlOptions):
        string
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
  - name: generateSasUrl(ShareGenerateSasUrlOptions)
    uid: '@azure/storage-file-share.ShareClient.generateSasUrl'
    package: '@azure/storage-file-share'
    summary: >-
      Only available for ShareClient constructed with a shared key credential.


      Generates a Service Shared Access Signature (SAS) URI based on the client
      properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function generateSasUrl(options: ShareGenerateSasUrlOptions): string'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareGenerateSasUrlOptions" />
          description: Optional parameters.
      return:
        description: >-
          The SAS URI consisting of the URI to the resource represented by this
          client, followed by the generated SAS token.
        type: string
  - name: getAccessPolicy(ShareGetAccessPolicyOptions)
    uid: '@azure/storage-file-share.ShareClient.getAccessPolicy'
    package: '@azure/storage-file-share'
    summary: >-
      Gets the permissions for the specified share. The permissions indicate

      whether share data may be accessed publicly.


      WARNING: JavaScript Date will potential lost precision when parsing start
      and expiry string.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-share-acl
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAccessPolicy(options?: ShareGetAccessPolicyOptions):
        Promise<ShareGetAccessPolicyResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareGetAccessPolicyOptions" />
          description: ''
      return:
        description: Response data for the Share Get Access Policy operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareGetAccessPolicyResponse" />&gt;
  - name: getDirectoryClient(string)
    uid: '@azure/storage-file-share.ShareClient.getDirectoryClient'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a
      [ShareDirectoryClient](xref:@azure/storage-file-share.ShareDirectoryClient)
      object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getDirectoryClient(directoryName: string): ShareDirectoryClient'
      parameters:
        - id: directoryName
          type: string
          description: A directory name
      return:
        description: The ShareDirectoryClient object for the given directory name.
        type: <xref uid="@azure/storage-file-share.ShareDirectoryClient" />
  - name: getPermission(string, ShareGetPermissionOptions)
    uid: '@azure/storage-file-share.ShareClient.getPermission'
    package: '@azure/storage-file-share'
    summary: >-
      Gets the Security Descriptor Definition Language (SDDL) for a given file
      permission key

      which indicates a security descriptor.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-permission
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPermission(filePermissionKey: string, options?:
        ShareGetPermissionOptions): Promise<ShareGetPermissionResponse>
      parameters:
        - id: filePermissionKey
          type: string
          description: >-
            File permission key which indicates the security descriptor of the
            permission.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareGetPermissionOptions" />
          description: Options to Share Create Permission operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareGetPermissionResponse" />&gt;
  - name: getProperties(ShareGetPropertiesOptions)
    uid: '@azure/storage-file-share.ShareClient.getProperties'
    package: '@azure/storage-file-share'
    summary: >-
      Returns all user-defined metadata and system properties for the specified

      share.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/get-share-properties


      WARNING: The `metadata` object returned in the response will have its keys
      in lowercase, even if

      they originally contained uppercase characters. This differs from the
      metadata keys returned by

      the `listShares` method of
      [ShareServiceClient](xref:@azure/storage-file-share.ShareServiceClient)
      using the `includeMetadata` option, which

      will retain their original casing.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?: ShareGetPropertiesOptions):
        Promise<ShareGetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareGetPropertiesOptions" />
          description: ''
      return:
        description: Response data for the Share Get Properties operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareGetPropertiesResponse" />&gt;
  - name: getShareLeaseClient(string)
    uid: '@azure/storage-file-share.ShareClient.getShareLeaseClient'
    package: '@azure/storage-file-share'
    summary: >-
      Get a [ShareLeaseClient](xref:@azure/storage-file-share.ShareLeaseClient)
      that manages leases on the file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getShareLeaseClient(proposeLeaseId?: string): ShareLeaseClient'
      parameters:
        - id: proposeLeaseId
          type: string
          description: Initial proposed lease Id.
      return:
        description: A new ShareLeaseClient object for managing leases on the file.
        type: <xref uid="@azure/storage-file-share.ShareLeaseClient" />
  - name: getStatistics(ShareGetStatisticsOptions)
    uid: '@azure/storage-file-share.ShareClient.getStatistics'
    package: '@azure/storage-file-share'
    summary: Retrieves statistics related to the share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getStatistics(options?: ShareGetStatisticsOptions):
        Promise<ShareGetStatisticsResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareGetStatisticsOptions" />
          description: ''
      return:
        description: Response data for the Share Get Statistics operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareGetStatisticsResponse" />&gt;
  - name: setAccessPolicy(SignedIdentifier[], ShareSetAccessPolicyOptions)
    uid: '@azure/storage-file-share.ShareClient.setAccessPolicy'
    package: '@azure/storage-file-share'
    summary: >-
      Sets the permissions for the specified share. The permissions indicate

      whether directories or files in a share may be accessed publicly.


      When you set permissions for a share, the existing permissions are
      replaced.

      If no shareAcl provided, the existing share ACL will be

      removed.


      When you establish a stored access policy on a share, it may take up to 30
      seconds to take effect.

      During this interval, a shared access signature that is associated with
      the stored access policy will

      fail with status code 403 (Forbidden), until the access policy becomes
      active.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-share-acl
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(shareAcl?: SignedIdentifier[], options?:
        ShareSetAccessPolicyOptions): Promise<ShareSetAccessPolicyResponse>
      parameters:
        - id: shareAcl
          type: <xref uid="@azure/storage-file-share.SignedIdentifier" />[]
          description: >-
            Array of signed identifiers, each having a unique Id and details of
            access policy.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareSetAccessPolicyOptions" />
          description: ''
      return:
        description: Response data for the Share Set Access Policy operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareSetAccessPolicyResponse" />&gt;
  - name: setMetadata(Metadata, ShareSetMetadataOptions)
    uid: '@azure/storage-file-share.ShareClient.setMetadata'
    package: '@azure/storage-file-share'
    summary: >-
      Sets one or more user-defined name-value pairs for the specified share.


      If no option provided, or no metadata defined in the option parameter, the
      share

      metadata will be removed.


      See
      https://learn.microsoft.com/en-us/rest/api/storageservices/set-share-metadata
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        ShareSetMetadataOptions): Promise<ShareSetMetadataResponse>
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-file-share.Metadata" />
          description: >-
            If no metadata provided, all existing directory metadata will be
            removed.
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareSetMetadataOptions" />
          description: ''
      return:
        description: Response data for the Share Set Metadata operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareSetMetadataResponse" />&gt;
  - name: setProperties(ShareSetPropertiesOptions)
    uid: '@azure/storage-file-share.ShareClient.setProperties'
    package: '@azure/storage-file-share'
    summary: Sets properties of the share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(options?: ShareSetPropertiesOptions):
        Promise<ShareSetPropertiesResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareSetPropertiesOptions" />
          description: ''
      return:
        description: Response data for the Share Set Properties operation.
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.ShareSetPropertiesResponse" />&gt;
  - name: setQuota(number, ShareSetQuotaOptions)
    uid: '@azure/storage-file-share.ShareClient.setQuota'
    package: '@azure/storage-file-share'
    summary: Sets quota for the specified share.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: >-
      Use
      [setProperties](xref:@azure/storage-file-share.ShareClient.setProperties)
      instead.
    syntax:
      content: >-
        function setQuota(quotaInGB: number, options?: ShareSetQuotaOptions):
        Promise<ShareSetQuotaResponse>
      parameters:
        - id: quotaInGB
          type: number
          description: Specifies the maximum size of the share in gigabytes
        - id: options
          type: <xref uid="@azure/storage-file-share.ShareSetQuotaOptions" />
          description: ''
      return:
        description: Response data for the Share Get Quota operation.
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.ShareSetQuotaResponse"
          />&gt;
  - name: withSnapshot(string)
    uid: '@azure/storage-file-share.ShareClient.withSnapshot'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new ShareClient object identical to the source but with the
      specified snapshot timestamp.

      Provide "" will remove the snapshot and return a URL to the base share.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function withSnapshot(snapshot: string): ShareClient'
      parameters:
        - id: snapshot
          type: string
          description: The snapshot timestamp.
      return:
        description: >-
          A new ShareClient object identical to the source but with the
          specified snapshot timestamp
        type: <xref uid="@azure/storage-file-share.ShareClient" />
extends: StorageClient
