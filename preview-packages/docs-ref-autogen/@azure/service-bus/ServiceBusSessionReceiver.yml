### YamlMime:TSType
name: ServiceBusSessionReceiver
uid: '@azure/service-bus.ServiceBusSessionReceiver'
package: '@azure/service-bus'
summary: A receiver that handles sessions, including renewing the session lock.
fullName: ServiceBusSessionReceiver
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: sessionId
    uid: '@azure/service-bus.ServiceBusSessionReceiver.sessionId'
    package: '@azure/service-bus'
    summary: The session ID.
    fullName: sessionId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'sessionId: string'
      return:
        description: ''
        type: string
  - name: sessionLockedUntilUtc
    uid: '@azure/service-bus.ServiceBusSessionReceiver.sessionLockedUntilUtc'
    package: '@azure/service-bus'
    summary: >-
      The time in UTC until which the session is locked.

      Every time `renewSessionLock()` is called, this time gets updated to
      current time plus the lock

      duration as specified during the Queue/Subscription creation.


      Will return undefined until a AMQP receiver link has been successfully set
      up for the session.
    fullName: sessionLockedUntilUtc
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'sessionLockedUntilUtc: Date'
      return:
        description: ''
        type: Date
inheritedProperties:
  - name: entityPath
    uid: '@azure/service-bus.ServiceBusSessionReceiver.entityPath'
    package: '@azure/service-bus'
    summary: Path of the entity for which the receiver has been created.
    fullName: entityPath
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'entityPath: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.entityPath](xref:@azure/service-bus.ServiceBusReceiver.entityPath)
  - name: identifier
    uid: '@azure/service-bus.ServiceBusSessionReceiver.identifier'
    package: '@azure/service-bus'
    summary: >-
      A name used to identify the receiver. This can be used to correlate logs
      and exceptions.

      If not specified or empty, a random unique one will be generated.
    fullName: identifier
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'identifier: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.identifier](xref:@azure/service-bus.ServiceBusReceiver.identifier)
  - name: isClosed
    uid: '@azure/service-bus.ServiceBusSessionReceiver.isClosed'
    package: '@azure/service-bus'
    summary: >-
      Returns `true` if either the receiver or the client that created it has
      been closed.
    fullName: isClosed
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'isClosed: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.isClosed](xref:@azure/service-bus.ServiceBusReceiver.isClosed)
  - name: receiveMode
    uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveMode'
    package: '@azure/service-bus'
    summary: The receive mode used to create the receiver.
    fullName: receiveMode
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'receiveMode: "peekLock" | "receiveAndDelete"'
      return:
        description: ''
        type: '"peekLock" | "receiveAndDelete"'
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.receiveMode](xref:@azure/service-bus.ServiceBusReceiver.receiveMode)
inheritedMethods:
  - name: >-
      abandonMessage(ServiceBusReceivedMessage, {[key: string]: number | boolean
      | string | Date | null})
    uid: '@azure/service-bus.ServiceBusSessionReceiver.abandonMessage'
    package: '@azure/service-bus'
    summary: >-
      The lock held on the message by the receiver is let go, making the message
      available again in

      Service Bus for another receive operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function abandonMessage(message: ServiceBusReceivedMessage,
        propertiesToModify?: {[key: string]: number | boolean | string | Date |
        null}): Promise<void>
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
        - id: propertiesToModify
          type: '{[key: string]: number | boolean | string | Date | null}'
          description: >-
            The properties of the message to modify while abandoning the
            message.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.abandonMessage](xref:@azure/service-bus.ServiceBusReceiver.abandonMessage)
  - name: close()
    uid: '@azure/service-bus.ServiceBusSessionReceiver.close'
    package: '@azure/service-bus'
    summary: >-
      Closes the receiver.

      Once closed, the receiver cannot be used for any further operations.

      Use the `createReceiver()` method on the ServiceBusClient to create a new
      Receiver.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.close](xref:@azure/service-bus.ServiceBusReceiver.close)
  - name: completeMessage(ServiceBusReceivedMessage)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.completeMessage'
    package: '@azure/service-bus'
    summary: Removes the message from Service Bus.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function completeMessage(message: ServiceBusReceivedMessage):
        Promise<void>
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.completeMessage](xref:@azure/service-bus.ServiceBusReceiver.completeMessage)
  - name: >-
      deadLetterMessage(ServiceBusReceivedMessage, DeadLetterOptions & {[key:
      string]: number | boolean | string | Date | null})
    uid: '@azure/service-bus.ServiceBusSessionReceiver.deadLetterMessage'
    package: '@azure/service-bus'
    summary: >-
      Moves the message to the deadletter sub-queue. To receive a deadletted
      message, create a new

      QueueClient/SubscriptionClient using the path for the deadletter
      sub-queue.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deadLetterMessage(message: ServiceBusReceivedMessage, options?:
        DeadLetterOptions & {[key: string]: number | boolean | string | Date |
        null}): Promise<void>
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
        - id: options
          type: >-
            <xref uid="@azure/service-bus.DeadLetterOptions" /> & {[key:
            string]: number | boolean | string | Date | null}
          description: |-
            The DeadLetter options that can be provided while
            rejecting the message.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.deadLetterMessage](xref:@azure/service-bus.ServiceBusReceiver.deadLetterMessage)
  - name: >-
      deferMessage(ServiceBusReceivedMessage, {[key: string]: number | boolean |
      string | Date | null})
    uid: '@azure/service-bus.ServiceBusSessionReceiver.deferMessage'
    package: '@azure/service-bus'
    summary: >-
      Defers the processing of the message. Save the `sequenceNumber` of the
      message, in order to

      receive it message again in the future using the `receiveDeferredMessage`
      method.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deferMessage(message: ServiceBusReceivedMessage,
        propertiesToModify?: {[key: string]: number | boolean | string | Date |
        null}): Promise<void>
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
        - id: propertiesToModify
          type: '{[key: string]: number | boolean | string | Date | null}'
          description: The properties of the message to modify while deferring the message
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.deferMessage](xref:@azure/service-bus.ServiceBusReceiver.deferMessage)
  - name: deleteMessages(DeleteMessagesOptions)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.deleteMessages'
    package: '@azure/service-bus'
    summary: Delete messages. If no option is specified, all messages will be deleted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deleteMessages(options: DeleteMessagesOptions): Promise<number>'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.DeleteMessagesOptions" />
          description: Options to configure the operation.
      return:
        description: number of messages that have been deleted.
        type: Promise&lt;number&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.deleteMessages](xref:@azure/service-bus.ServiceBusReceiver.deleteMessages)
  - name: getMessageIterator(GetMessageIteratorOptions)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.getMessageIterator'
    package: '@azure/service-bus'
    summary: Returns an iterator that can be used to receive messages from Service Bus.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMessageIterator(options?: GetMessageIteratorOptions):
        AsyncIterableIterator<ServiceBusReceivedMessage>
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.GetMessageIteratorOptions" />
          description: |-
            A set of options to control the receive operation.
            - `abortSignal`: The signal to use to abort the ongoing operation.
      return:
        description: ''
        type: >-
          AsyncIterableIterator&lt;<xref
          uid="@azure/service-bus.ServiceBusReceivedMessage" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.getMessageIterator](xref:@azure/service-bus.ServiceBusReceiver.getMessageIterator)
  - name: peekMessages(number, PeekMessagesOptions)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.peekMessages'
    package: '@azure/service-bus'
    summary: >-
      Peek the next batch of active messages (including deferred but not
      deadlettered messages) on the

      queue or subscription without modifying them.

      - The first call to `peekMessages()` fetches the first active message.
      Each subsequent call fetches the

      subsequent message.

      - Unlike a "received" message, "peeked" message is a read-only version of
      the message.

      It cannot be `Completed/Abandoned/Deferred/Deadlettered`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function peekMessages(maxMessageCount: number, options?:
        PeekMessagesOptions): Promise<ServiceBusReceivedMessage[]>
      parameters:
        - id: maxMessageCount
          type: number
          description: The maximum number of messages to peek.
        - id: options
          type: <xref uid="@azure/service-bus.PeekMessagesOptions" />
          description: >-
            Options that allow to specify the maximum number of messages to
            peek,

            the sequenceNumber to start peeking from or an abortSignal to abort
            the operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusReceivedMessage"
          />[]&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.peekMessages](xref:@azure/service-bus.ServiceBusReceiver.peekMessages)
  - name: purgeMessages(PurgeMessagesOptions)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.purgeMessages'
    package: '@azure/service-bus'
    summary: >-
      Attempts to purge all messages from an entity.  Locked messages are not
      eligible for removal and

      will remain in the entity.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function purgeMessages(options?: PurgeMessagesOptions): Promise<number>'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.PurgeMessagesOptions" />
          description: >-
            Options that allow to specify the cutoff time for deletion. Only
            messages that were enqueued
                             before this time will be deleted.  If not specified, current time will be used.
      return:
        description: number of messages deleted.
        type: Promise&lt;number&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.purgeMessages](xref:@azure/service-bus.ServiceBusReceiver.purgeMessages)
  - name: receiveDeferredMessages(Long | Long[], OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveDeferredMessages'
    package: '@azure/service-bus'
    summary: >-
      Returns a promise that resolves to an array of deferred messages
      identified by given `sequenceNumbers`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveDeferredMessages(sequenceNumbers: Long | Long[],
        options?: OperationOptionsBase): Promise<ServiceBusReceivedMessage[]>
      parameters:
        - id: sequenceNumbers
          type: Long | Long[]
          description: >-
            The sequence number or an array of sequence numbers for the messages
            that need to be received.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: >-
          A list of messages identified by the given sequenceNumbers or an empty
          list if no messages are found.
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusReceivedMessage"
          />[]&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.receiveDeferredMessages](xref:@azure/service-bus.ServiceBusReceiver.receiveDeferredMessages)
  - name: receiveMessages(number, ReceiveMessagesOptions)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.receiveMessages'
    package: '@azure/service-bus'
    summary: >-
      Returns a promise that resolves to an array of messages received from
      Service Bus.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function receiveMessages(maxMessageCount: number, options?:
        ReceiveMessagesOptions): Promise<ServiceBusReceivedMessage[]>
      parameters:
        - id: maxMessageCount
          type: number
          description: The maximum number of messages to receive.
        - id: options
          type: <xref uid="@azure/service-bus.ReceiveMessagesOptions" />
          description: >-
            A set of options to control the receive operation.

            - `maxWaitTimeInMs`: The maximum time to wait for the first message
            before returning an empty array if no messages are available.

            - `abortSignal`: The signal to use to abort the ongoing operation.
      return:
        description: A promise that resolves with an array of messages.
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusReceivedMessage"
          />[]&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.receiveMessages](xref:@azure/service-bus.ServiceBusReceiver.receiveMessages)
  - name: renewMessageLock(ServiceBusReceivedMessage)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.renewMessageLock'
    package: '@azure/service-bus'
    summary: >-
      Renews the lock on the message for the duration as specified during the
      Queue/Subscription

      creation.

      - Check the `lockedUntilUtc` property on the message for the time when the
      lock expires.

      - If a message is not settled (using either `complete()`, `defer()` or
      `deadletter()`,

      before its lock expires, then the message lands back in the
      Queue/Subscription for the next

      receive operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function renewMessageLock(message: ServiceBusReceivedMessage):
        Promise<Date>
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.ServiceBusReceivedMessage" />
          description: ''
      return:
        description: New lock token expiry date and time in UTC format.
        type: Promise&lt;Date&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceBusReceiver.renewMessageLock](xref:@azure/service-bus.ServiceBusReceiver.renewMessageLock)
methods:
  - name: getSessionState(OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.getSessionState'
    package: '@azure/service-bus'
    summary: >-
      Gets the state of the Session. For more on session states, see

      [Session
      State](https://learn.microsoft.com/azure/service-bus-messaging/message-sessions#message-session-state)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getSessionState(options?: OperationOptionsBase): Promise<any>'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: The state of that session
        type: Promise&lt;any&gt;
  - name: renewSessionLock(OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.renewSessionLock'
    package: '@azure/service-bus'
    summary: Renews the lock on the session.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function renewSessionLock(options?: OperationOptionsBase): Promise<Date>'
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: ''
      return:
        description: ''
        type: Promise&lt;Date&gt;
  - name: setSessionState(any, OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.setSessionState'
    package: '@azure/service-bus'
    summary: >-
      Sets the state on the Session. For more on session states, see

      [Session
      State](https://learn.microsoft.com/azure/service-bus-messaging/message-sessions#message-session-state)
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setSessionState(state: any, options?: OperationOptionsBase):
        Promise<void>
      parameters:
        - id: state
          type: any
          description: The state that needs to be set.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: subscribe(MessageHandlers, SubscribeOptions)
    uid: '@azure/service-bus.ServiceBusSessionReceiver.subscribe'
    package: '@azure/service-bus'
    summary: Streams messages to message handlers.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function subscribe(handlers: MessageHandlers, options?:
        SubscribeOptions): { close() => Promise<void> }
      parameters:
        - id: handlers
          type: <xref uid="@azure/service-bus.MessageHandlers" />
          description: A handler that gets called for messages and errors.
        - id: options
          type: <xref uid="@azure/service-bus.SubscribeOptions" />
          description: Options for subscribe.
      return:
        description: >-
          An object that can be closed, sending any remaining messages to
          `handlers` and

          stopping new messages from arriving.
        type: '{ close() =&gt; Promise&lt;void&gt; }'
extends: <xref uid="@azure/service-bus.ServiceBusReceiver" />
