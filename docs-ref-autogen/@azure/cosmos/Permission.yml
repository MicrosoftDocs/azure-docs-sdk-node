### YamlMime:TSType
name: Permission
uid: '@azure/cosmos.Permission'
package: '@azure/cosmos'
summary: >-
  Use to read, replace, or delete a given
  [Permission](xref:@azure/cosmos.Permission) by id.


  See [Permissions](xref:@azure/cosmos.Permissions) to create, upsert, query, or
  read all Permissions.
fullName: Permission
remarks: ''
isDeprecated: false
type: class
properties:
  - name: id
    uid: '@azure/cosmos.Permission.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/cosmos.Permission.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
  - name: user
    uid: '@azure/cosmos.Permission.user'
    package: '@azure/cosmos'
    summary: ''
    fullName: user
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'user: User'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.User" />
methods:
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Permission.delete'
    package: '@azure/cosmos'
    summary: >+
      Delete the given [Permission](xref:@azure/cosmos.Permission).


      **Example**


      ```ts snippet:PermissionDelete

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const user = database.user("<user-id>");


      await user.permission("<permission-id>").delete();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<PermissionResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.PermissionResponse" />&gt;
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Permission.read'
    package: '@azure/cosmos'
    summary: >+
      Read the [PermissionDefinition](xref:@azure/cosmos.PermissionDefinition)
      of the given [Permission](xref:@azure/cosmos.Permission).


      **Example**


      ```ts snippet:PermissionRead

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const user = database.user("<user-id>");


      const { resource: permission } = await
      user.permission("<permission-id>").read();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<PermissionResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.PermissionResponse" />&gt;
  - name: replace(PermissionDefinition, RequestOptions)
    uid: '@azure/cosmos.Permission.replace'
    package: '@azure/cosmos'
    summary: >+
      Replace the given [Permission](xref:@azure/cosmos.Permission) with the
      specified [PermissionDefinition](xref:@azure/cosmos.PermissionDefinition).


      **Example**


      ```ts snippet:PermissionReplace

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const user = database.user("<user-id>");

      const { resource: permission } = await
      user.permission("<permission-id>").read();

      permission.resource = "<new-resource-url>";


      await user.permission("<permission-id>").replace(permission);

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replace(body: PermissionDefinition, options?: RequestOptions):
        Promise<PermissionResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.PermissionDefinition" />
          description: >-
            The specified
            [PermissionDefinition](xref:@azure/cosmos.PermissionDefinition).
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.PermissionResponse" />&gt;
