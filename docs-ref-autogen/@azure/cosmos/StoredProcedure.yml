### YamlMime:TSType
name: StoredProcedure
uid: '@azure/cosmos.StoredProcedure'
package: '@azure/cosmos'
summary: >-
  Operations for reading, replacing, deleting, or executing a specific, existing
  stored procedure by id.


  For operations to create, read all, or query Stored Procedures,
fullName: StoredProcedure
remarks: ''
isDeprecated: false
type: class
properties:
  - name: container
    uid: '@azure/cosmos.StoredProcedure.container'
    package: '@azure/cosmos'
    summary: ''
    fullName: container
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'container: Container'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container" />
  - name: id
    uid: '@azure/cosmos.StoredProcedure.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/cosmos.StoredProcedure.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
methods:
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.StoredProcedure.delete'
    package: '@azure/cosmos'
    summary: >+
      Delete the given [StoredProcedure](xref:@azure/cosmos.StoredProcedure).


      **Example**


      ```ts snippet:StoredProcedureDelete

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      await container.scripts.storedProcedure("<sproc-id>").delete();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?: RequestOptions):
        Promise<StoredProcedureResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.StoredProcedureResponse" />&gt;
  - name: execute<T>(PartitionKey, any[], RequestOptions)
    uid: '@azure/cosmos.StoredProcedure.execute'
    package: '@azure/cosmos'
    summary: >+
      Execute the given [StoredProcedure](xref:@azure/cosmos.StoredProcedure).


      The specified type, T, is not enforced by the client.

      Be sure to validate the response from the stored procedure matches the
      type, T, you provide.


      **Example**


      ```ts snippet:StoredProcedureExecute

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const { resource: result } = await container.scripts
        .storedProcedure("<sproc-id>")
        .execute(undefined);
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function execute<T>(partitionKey: PartitionKey, params?: any[],
        options?: RequestOptions): Promise<ResourceResponse<T>>
      parameters:
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: The partition key to use when executing the stored procedure
        - id: params
          type: any[]
          description: >-
            Array of parameters to pass as arguments to the given
            [StoredProcedure](xref:@azure/cosmos.StoredProcedure).
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: >-
            Additional options, such as the partition key to invoke the
            [StoredProcedure](xref:@azure/cosmos.StoredProcedure) on.

            *
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ResourceResponse" />&lt;T&gt;&gt;
  - name: read(RequestOptions)
    uid: '@azure/cosmos.StoredProcedure.read'
    package: '@azure/cosmos'
    summary: >+
      Read the
      [StoredProcedureDefinition](xref:@azure/cosmos.StoredProcedureDefinition)
      for the given [StoredProcedure](xref:@azure/cosmos.StoredProcedure).


      **Example**


      ```ts snippet:StoredProcedureRead

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const { resource: sproc } = await
      container.scripts.storedProcedure("<sproc-id>").read();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function read(options?: RequestOptions):
        Promise<StoredProcedureResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.StoredProcedureResponse" />&gt;
  - name: replace(StoredProcedureDefinition, RequestOptions)
    uid: '@azure/cosmos.StoredProcedure.replace'
    package: '@azure/cosmos'
    summary: >+
      Replace the given [StoredProcedure](xref:@azure/cosmos.StoredProcedure)
      with the specified
      [StoredProcedureDefinition](xref:@azure/cosmos.StoredProcedureDefinition).


      **Example**


      ```ts snippet:StoredProcedureReplace

      import { CosmosClient, StoredProcedureDefinition } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const sprocDefinition: StoredProcedureDefinition = {
        id: "sample sproc",
        body: "function () { const x = 10; }",
      };


      const { resource: sproc } = await
      container.scripts.storedProcedures.create(sprocDefinition);


      sproc.body = function () {
        const x = 20;
        console.log(x);
      };

      const { resource: replacedSproc } = await container.scripts
        .storedProcedure(sproc.id)
        .replace(sproc);
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replace(body: StoredProcedureDefinition, options?:
        RequestOptions): Promise<StoredProcedureResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.StoredProcedureDefinition" />
          description: >-
            The specified
            [StoredProcedureDefinition](xref:@azure/cosmos.StoredProcedureDefinition)
            to replace the existing definition.
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.StoredProcedureResponse" />&gt;
