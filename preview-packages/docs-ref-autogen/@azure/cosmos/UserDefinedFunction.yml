### YamlMime:TSType
name: UserDefinedFunction
uid: '@azure/cosmos.UserDefinedFunction'
package: '@azure/cosmos'
summary: >-
  Used to read, replace, or delete a specified User Definied Function by id.


  See [UserDefinedFunction](xref:@azure/cosmos.UserDefinedFunction) to create,
  upsert, query, read all User Defined Functions.
fullName: UserDefinedFunction
remarks: ''
isDeprecated: false
type: class
properties:
  - name: container
    uid: '@azure/cosmos.UserDefinedFunction.container'
    package: '@azure/cosmos'
    summary: ''
    fullName: container
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'container: Container'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Container" />
  - name: id
    uid: '@azure/cosmos.UserDefinedFunction.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: url
    uid: '@azure/cosmos.UserDefinedFunction.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
methods:
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.UserDefinedFunction.delete'
    package: '@azure/cosmos'
    summary: >+
      Delete the given <xref:UserDefined>.


      **Example**


      ```ts snippet:UserDefinedFunctionDelete

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      await container.scripts.userDefinedFunction("<udf-id>").delete();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?: RequestOptions):
        Promise<UserDefinedFunctionResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.UserDefinedFunctionResponse"
          />&gt;
  - name: read(RequestOptions)
    uid: '@azure/cosmos.UserDefinedFunction.read'
    package: '@azure/cosmos'
    summary: >+
      Read the
      [UserDefinedFunctionDefinition](xref:@azure/cosmos.UserDefinedFunctionDefinition)
      for the given
      [UserDefinedFunction](xref:@azure/cosmos.UserDefinedFunction).


      **Example**


      ```ts snippet:UserDefinedFunctionRead

      import { CosmosClient } from "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const { resource: udf } = await
      container.scripts.userDefinedFunction("<udf-id>").read();

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function read(options?: RequestOptions):
        Promise<UserDefinedFunctionResponse>
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.UserDefinedFunctionResponse"
          />&gt;
  - name: replace(UserDefinedFunctionDefinition, RequestOptions)
    uid: '@azure/cosmos.UserDefinedFunction.replace'
    package: '@azure/cosmos'
    summary: >+
      Replace the given
      [UserDefinedFunction](xref:@azure/cosmos.UserDefinedFunction) with the
      specified
      [UserDefinedFunctionDefinition](xref:@azure/cosmos.UserDefinedFunctionDefinition).


      **Example**


      ```ts snippet:UserDefinedFunctionReplace

      import { CosmosClient, UserDefinedFunctionDefinition } from
      "@azure/cosmos";


      const endpoint = "https://your-account.documents.azure.com";

      const key = "<database account masterkey>";

      const client = new CosmosClient({ endpoint, key });

      const { database } = await client.databases.createIfNotExists({ id: "Test
      Database" });

      const { container } = await database.containers.createIfNotExists({ id:
      "Test Container" });


      const udfDefinition: UserDefinedFunctionDefinition = {
        id: "sample udf",
        body: "function () { const x = 10; }",
      };

      await container.scripts.userDefinedFunctions.create(udfDefinition);


      udfDefinition.body = "function () { const x = 20; }";

      const { resource: replacedUdf } = await container.scripts
        .userDefinedFunction(udfDefinition.id)
        .replace(udfDefinition);
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replace(body: UserDefinedFunctionDefinition, options?:
        RequestOptions): Promise<UserDefinedFunctionResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.UserDefinedFunctionDefinition" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.UserDefinedFunctionResponse"
          />&gt;
