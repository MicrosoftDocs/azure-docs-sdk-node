### YamlMime:TSPackage
uid: '@azure/arm-playwright'
name: '@azure/arm-playwright'
summary: ''
type: package
enums:
  - '@azure/arm-playwright.AzureClouds'
  - '@azure/arm-playwright.KnownActionType'
  - '@azure/arm-playwright.KnownCheckNameAvailabilityReason'
  - '@azure/arm-playwright.KnownCreatedByType'
  - '@azure/arm-playwright.KnownEnablementStatus'
  - '@azure/arm-playwright.KnownFreeTrialState'
  - '@azure/arm-playwright.KnownOrigin'
  - '@azure/arm-playwright.KnownProvisioningState'
  - '@azure/arm-playwright.KnownQuotaName'
  - '@azure/arm-playwright.KnownVersions'
classes:
  - '@azure/arm-playwright.PlaywrightManagementClient'
interfaces:
  - '@azure/arm-playwright.CheckNameAvailabilityRequest'
  - '@azure/arm-playwright.CheckNameAvailabilityResponse'
  - '@azure/arm-playwright.ErrorAdditionalInfo'
  - '@azure/arm-playwright.ErrorDetail'
  - '@azure/arm-playwright.ErrorResponse'
  - '@azure/arm-playwright.FreeTrialProperties'
  - '@azure/arm-playwright.Operation'
  - '@azure/arm-playwright.OperationDisplay'
  - '@azure/arm-playwright.OperationsListOptionalParams'
  - '@azure/arm-playwright.OperationsOperations'
  - '@azure/arm-playwright.PageSettings'
  - '@azure/arm-playwright.PagedAsyncIterableIterator'
  - '@azure/arm-playwright.PlaywrightManagementClientOptionalParams'
  - '@azure/arm-playwright.PlaywrightQuota'
  - '@azure/arm-playwright.PlaywrightQuotaProperties'
  - '@azure/arm-playwright.PlaywrightQuotasGetOptionalParams'
  - '@azure/arm-playwright.PlaywrightQuotasListBySubscriptionOptionalParams'
  - '@azure/arm-playwright.PlaywrightQuotasOperations'
  - '@azure/arm-playwright.PlaywrightWorkspace'
  - '@azure/arm-playwright.PlaywrightWorkspaceFreeTrialProperties'
  - '@azure/arm-playwright.PlaywrightWorkspaceProperties'
  - '@azure/arm-playwright.PlaywrightWorkspaceQuota'
  - '@azure/arm-playwright.PlaywrightWorkspaceQuotaProperties'
  - '@azure/arm-playwright.PlaywrightWorkspaceQuotasGetOptionalParams'
  - >-
    @azure/arm-playwright.PlaywrightWorkspaceQuotasListByPlaywrightWorkspaceOptionalParams
  - '@azure/arm-playwright.PlaywrightWorkspaceQuotasOperations'
  - '@azure/arm-playwright.PlaywrightWorkspaceUpdate'
  - '@azure/arm-playwright.PlaywrightWorkspaceUpdateProperties'
  - >-
    @azure/arm-playwright.PlaywrightWorkspacesCheckNameAvailabilityOptionalParams
  - '@azure/arm-playwright.PlaywrightWorkspacesCreateOrUpdateOptionalParams'
  - '@azure/arm-playwright.PlaywrightWorkspacesDeleteOptionalParams'
  - '@azure/arm-playwright.PlaywrightWorkspacesGetOptionalParams'
  - '@azure/arm-playwright.PlaywrightWorkspacesListByResourceGroupOptionalParams'
  - '@azure/arm-playwright.PlaywrightWorkspacesListBySubscriptionOptionalParams'
  - '@azure/arm-playwright.PlaywrightWorkspacesOperations'
  - '@azure/arm-playwright.PlaywrightWorkspacesUpdateOptionalParams'
  - '@azure/arm-playwright.ProxyResource'
  - '@azure/arm-playwright.Resource'
  - '@azure/arm-playwright.RestorePollerOptions'
  - '@azure/arm-playwright.SystemData'
  - '@azure/arm-playwright.TrackedResource'
typeAliases:
  - '@azure/arm-playwright.ActionType'
  - '@azure/arm-playwright.AzureSupportedClouds'
  - '@azure/arm-playwright.CheckNameAvailabilityReason'
  - '@azure/arm-playwright.ContinuablePage'
  - '@azure/arm-playwright.CreatedByType'
  - '@azure/arm-playwright.EnablementStatus'
  - '@azure/arm-playwright.FreeTrialState'
  - '@azure/arm-playwright.Origin'
  - '@azure/arm-playwright.ProvisioningState'
  - '@azure/arm-playwright.QuotaName'
functions:
  - name: >-
      restorePoller<TResponse, TResult>(PlaywrightManagementClient, string,
      (args: any[]) => PollerLike<OperationState<TResult>, TResult>,
      RestorePollerOptions<TResult, PathUncheckedResponse>)
    uid: '@azure/arm-playwright.restorePoller'
    package: '@azure/arm-playwright'
    summary: |-
      Creates a poller from the serialized state of another poller. This can be
      useful when you want to create pollers on a different host or a poller
      needs to be constructed after the original one is not in scope.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restorePoller<TResponse, TResult>(client:
        PlaywrightManagementClient, serializedState: string, sourceOperation:
        (args: any[]) => PollerLike<OperationState<TResult>, TResult>, options?:
        RestorePollerOptions<TResult, PathUncheckedResponse>):
        PollerLike<OperationState<TResult>, TResult>
      parameters:
        - id: client
          type: <xref uid="@azure/arm-playwright.PlaywrightManagementClient" />
          description: ''
        - id: serializedState
          type: string
          description: ''
        - id: sourceOperation
          type: >-
            (args: any[]) =&gt; PollerLike&lt;OperationState&lt;TResult&gt;,
            TResult&gt;
          description: ''
        - id: options
          type: >-
            <xref uid="@azure/arm-playwright.RestorePollerOptions"
            />&lt;TResult, <xref
            uid="@azure-rest/core-client.PathUncheckedResponse" />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-lro.PollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;TResult&gt;, TResult&gt;
