### YamlMime:TSType
name: Reservation
uid: '@azure/arm-reservations.Reservation'
package: '@azure/arm-reservations'
summary: Interface representing a Reservation.
fullName: Reservation
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: archive(string, string, ReservationArchiveOptionalParams)
    uid: '@azure/arm-reservations.Reservation.archive'
    package: '@azure/arm-reservations'
    summary: Archiving a `Reservation` moves it to `Archived` state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function archive(reservationOrderId: string, reservationId: string,
        options?: ReservationArchiveOptionalParams): Promise<void>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationArchiveOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      beginAvailableScopes(string, string, AvailableScopeRequest,
      ReservationAvailableScopesOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginAvailableScopes'
    package: '@azure/arm-reservations'
    summary: Check whether the scopes from request is valid for `Reservation`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginAvailableScopes(reservationOrderId: string, reservationId:
        string, body: AvailableScopeRequest, options?:
        ReservationAvailableScopesOptionalParams):
        Promise<SimplePollerLike<OperationState<AvailableScopeProperties>,
        AvailableScopeProperties>>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the reservation item
        - id: body
          type: <xref uid="@azure/arm-reservations.AvailableScopeRequest" />
          description: Scopes to be checked for eligibility.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-reservations.ReservationAvailableScopesOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-reservations.AvailableScopeProperties" />&gt;, <xref
          uid="@azure/arm-reservations.AvailableScopeProperties" />&gt;&gt;
  - name: >-
      beginAvailableScopesAndWait(string, string, AvailableScopeRequest,
      ReservationAvailableScopesOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginAvailableScopesAndWait'
    package: '@azure/arm-reservations'
    summary: Check whether the scopes from request is valid for `Reservation`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginAvailableScopesAndWait(reservationOrderId: string,
        reservationId: string, body: AvailableScopeRequest, options?:
        ReservationAvailableScopesOptionalParams):
        Promise<AvailableScopeProperties>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the reservation item
        - id: body
          type: <xref uid="@azure/arm-reservations.AvailableScopeRequest" />
          description: Scopes to be checked for eligibility.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-reservations.ReservationAvailableScopesOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-reservations.AvailableScopeProperties" />&gt;
  - name: beginMerge(string, MergeRequest, ReservationMergeOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginMerge'
    package: '@azure/arm-reservations'
    summary: >-
      Merge the specified `Reservation`s into a new `Reservation`. The two
      `Reservation`s being merged

      must have same properties.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginMerge(reservationOrderId: string, body: MergeRequest,
        options?: ReservationMergeOptionalParams):
        Promise<SimplePollerLike<OperationState<ReservationMergeResponse>,
        ReservationMergeResponse>>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: body
          type: <xref uid="@azure/arm-reservations.MergeRequest" />
          description: Information needed for commercial request for a reservation
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationMergeOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-reservations.ReservationMergeResponse" />&gt;, <xref
          uid="@azure/arm-reservations.ReservationMergeResponse" />&gt;&gt;
  - name: beginMergeAndWait(string, MergeRequest, ReservationMergeOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginMergeAndWait'
    package: '@azure/arm-reservations'
    summary: >-
      Merge the specified `Reservation`s into a new `Reservation`. The two
      `Reservation`s being merged

      must have same properties.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginMergeAndWait(reservationOrderId: string, body:
        MergeRequest, options?: ReservationMergeOptionalParams):
        Promise<ReservationMergeResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: body
          type: <xref uid="@azure/arm-reservations.MergeRequest" />
          description: Information needed for commercial request for a reservation
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationMergeOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-reservations.ReservationMergeResponse" />&gt;
  - name: beginSplit(string, SplitRequest, ReservationSplitOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginSplit'
    package: '@azure/arm-reservations'
    summary: >-
      Split a `Reservation` into two `Reservation`s with specified quantity
      distribution.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginSplit(reservationOrderId: string, body: SplitRequest,
        options?: ReservationSplitOptionalParams):
        Promise<SimplePollerLike<OperationState<ReservationSplitResponse>,
        ReservationSplitResponse>>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: body
          type: <xref uid="@azure/arm-reservations.SplitRequest" />
          description: Information needed to Split a reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationSplitOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-reservations.ReservationSplitResponse" />&gt;, <xref
          uid="@azure/arm-reservations.ReservationSplitResponse" />&gt;&gt;
  - name: beginSplitAndWait(string, SplitRequest, ReservationSplitOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginSplitAndWait'
    package: '@azure/arm-reservations'
    summary: >-
      Split a `Reservation` into two `Reservation`s with specified quantity
      distribution.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginSplitAndWait(reservationOrderId: string, body:
        SplitRequest, options?: ReservationSplitOptionalParams):
        Promise<ReservationSplitResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: body
          type: <xref uid="@azure/arm-reservations.SplitRequest" />
          description: Information needed to Split a reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationSplitOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-reservations.ReservationSplitResponse" />&gt;
  - name: beginUpdate(string, string, Patch, ReservationUpdateOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginUpdate'
    package: '@azure/arm-reservations'
    summary: Updates the applied scopes of the `Reservation`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdate(reservationOrderId: string, reservationId: string,
        parameters: Patch, options?: ReservationUpdateOptionalParams):
        Promise<SimplePollerLike<OperationState<ReservationResponse>,
        ReservationResponse>>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the reservation item
        - id: parameters
          type: <xref uid="@azure/arm-reservations.Patch" />
          description: Information needed to patch a reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-reservations.ReservationResponse" />&gt;, <xref
          uid="@azure/arm-reservations.ReservationResponse" />&gt;&gt;
  - name: beginUpdateAndWait(string, string, Patch, ReservationUpdateOptionalParams)
    uid: '@azure/arm-reservations.Reservation.beginUpdateAndWait'
    package: '@azure/arm-reservations'
    summary: Updates the applied scopes of the `Reservation`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateAndWait(reservationOrderId: string, reservationId:
        string, parameters: Patch, options?: ReservationUpdateOptionalParams):
        Promise<ReservationResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the reservation item
        - id: parameters
          type: <xref uid="@azure/arm-reservations.Patch" />
          description: Information needed to patch a reservation item
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-reservations.ReservationResponse"
          />&gt;
  - name: get(string, string, ReservationGetOptionalParams)
    uid: '@azure/arm-reservations.Reservation.get'
    package: '@azure/arm-reservations'
    summary: Get specific `Reservation` details.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(reservationOrderId: string, reservationId: string,
        options?: ReservationGetOptionalParams): Promise<ReservationResponse>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the reservation item
        - id: options
          type: <xref uid="@azure/arm-reservations.ReservationGetOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-reservations.ReservationResponse"
          />&gt;
  - name: list(string, ReservationListOptionalParams)
    uid: '@azure/arm-reservations.Reservation.list'
    package: '@azure/arm-reservations'
    summary: List `Reservation`s within a single `ReservationOrder`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(reservationOrderId: string, options?:
        ReservationListOptionalParams):
        PagedAsyncIterableIterator<ReservationResponse, ReservationResponse[],
        PageSettings>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: options
          type: <xref uid="@azure/arm-reservations.ReservationListOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-reservations.ReservationResponse" />, <xref
          uid="@azure/arm-reservations.ReservationResponse" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listAll(ReservationListAllOptionalParams)
    uid: '@azure/arm-reservations.Reservation.listAll'
    package: '@azure/arm-reservations'
    summary: >-
      List the reservations and the roll up counts of reservations group by
      provisioning states that the

      user has access to in the current tenant.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listAll(options?: ReservationListAllOptionalParams):
        PagedAsyncIterableIterator<ReservationResponse, ReservationResponse[],
        PageSettings>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/arm-reservations.ReservationListAllOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-reservations.ReservationResponse" />, <xref
          uid="@azure/arm-reservations.ReservationResponse" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listRevisions(string, string, ReservationListRevisionsOptionalParams)
    uid: '@azure/arm-reservations.Reservation.listRevisions'
    package: '@azure/arm-reservations'
    summary: List of all the revisions for the `Reservation`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRevisions(reservationOrderId: string, reservationId:
        string, options?: ReservationListRevisionsOptionalParams):
        PagedAsyncIterableIterator<ReservationResponse, ReservationResponse[],
        PageSettings>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the reservation item
        - id: options
          type: >-
            <xref
            uid="@azure/arm-reservations.ReservationListRevisionsOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-reservations.ReservationResponse" />, <xref
          uid="@azure/arm-reservations.ReservationResponse" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: unarchive(string, string, ReservationUnarchiveOptionalParams)
    uid: '@azure/arm-reservations.Reservation.unarchive'
    package: '@azure/arm-reservations'
    summary: Restores a `Reservation` to the state it was before archiving.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unarchive(reservationOrderId: string, reservationId: string,
        options?: ReservationUnarchiveOptionalParams): Promise<void>
      parameters:
        - id: reservationOrderId
          type: string
          description: Order Id of the reservation
        - id: reservationId
          type: string
          description: Id of the reservation item
        - id: options
          type: >-
            <xref
            uid="@azure/arm-reservations.ReservationUnarchiveOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
