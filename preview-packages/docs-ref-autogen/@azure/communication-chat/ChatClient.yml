### YamlMime:TSType
name: ChatClient
uid: '@azure/communication-chat.ChatClient'
package: '@azure/communication-chat'
summary: The client to do chat operations
fullName: ChatClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ChatClient(string, CommunicationTokenCredential, ChatClientOptions)
    uid: '@azure/communication-chat.ChatClient.constructor'
    package: '@azure/communication-chat'
    summary: Creates an instance of the ChatClient for a given resource and user.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new ChatClient(endpoint: string, credential:
        CommunicationTokenCredential, options?: ChatClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: The url of the Communication Services resource.
        - id: credential
          type: >-
            <xref uid="@azure/communication-common.CommunicationTokenCredential"
            />
          description: >-
            The token credential. Use AzureCommunicationTokenCredential from
            @azure/communication-common to create a credential.
        - id: options
          type: <xref uid="@azure/communication-chat.ChatClientOptions" />
          description: Additional client options.
methods:
  - name: createChatThread(CreateChatThreadRequest, CreateChatThreadOptions)
    uid: '@azure/communication-chat.ChatClient.createChatThread'
    package: '@azure/communication-chat'
    summary: |-
      Creates a chat thread.
      Returns thread client with the id of the created thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createChatThread(request: CreateChatThreadRequest, options?:
        CreateChatThreadOptions): Promise<CreateChatThreadResult>
      parameters:
        - id: request
          type: <xref uid="@azure/communication-chat.CreateChatThreadRequest" />
          description: Request for creating a chat thread.
        - id: options
          type: <xref uid="@azure/communication-chat.CreateChatThreadOptions" />
          description: Operation options.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/communication-chat.CreateChatThreadResult" />&gt;
  - name: deleteChatThread(string, OperationOptions)
    uid: '@azure/communication-chat.ChatClient.deleteChatThread'
    package: '@azure/communication-chat'
    summary: Deletes a chat thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteChatThread(threadId: string, options?: OperationOptions):
        Promise<void>
      parameters:
        - id: threadId
          type: string
          description: The ID of the thread to delete.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: Operation options.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: getChatThreadClient(string)
    uid: '@azure/communication-chat.ChatClient.getChatThreadClient'
    package: '@azure/communication-chat'
    summary: Returns ChatThreadClient with the specific thread id.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getChatThreadClient(threadId: string): ChatThreadClient'
      parameters:
        - id: threadId
          type: string
          description: Thread ID for the ChatThreadClient
      return:
        description: ''
        type: <xref uid="@azure/communication-chat.ChatThreadClient" />
  - name: listChatThreads(ChatListChatThreadsOptionalParams)
    uid: '@azure/communication-chat.ChatClient.listChatThreads'
    package: '@azure/communication-chat'
    summary: Gets the list of chat threads of a user.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listChatThreads(options?: ChatListChatThreadsOptionalParams):
        PagedAsyncIterableIterator<ChatThreadItem, ChatThreadItem[],
        PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/communication-chat.RestListChatThreadsOptions" />
          description: List chat threads options.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/communication-chat.ChatThreadItem" />, <xref
          uid="@azure/communication-chat.ChatThreadItem" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: 'off("chatMessageDeleted", (e: ChatMessageDeletedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_2'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatMessageDeleted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatMessageDeleted", listener: (e:
        ChatMessageDeletedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageDeleted"'
          description: The ChatMessageDeletedEvent.
        - id: listener
          type: '(e: ChatMessageDeletedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'off("chatMessageEdited", (e: ChatMessageEditedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_1'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatMessageEdited.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatMessageEdited", listener: (e:
        ChatMessageEditedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageEdited"'
          description: The ChatMessageEditedEvent.
        - id: listener
          type: '(e: ChatMessageEditedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'off("chatMessageReceived", (e: ChatMessageReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatMessageReceived.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatMessageReceived", listener: (e:
        ChatMessageReceivedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageReceived"'
          description: The ChatMessageReceivedEvent.
        - id: listener
          type: '(e: ChatMessageReceivedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'off("chatThreadCreated", (e: ChatThreadCreatedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_5'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatThreadCreated.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatThreadCreated", listener: (e:
        ChatThreadCreatedEvent) => void)
      parameters:
        - id: event
          type: '"chatThreadCreated"'
          description: The ChatThreadCreatedEvent.
        - id: listener
          type: '(e: ChatThreadCreatedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'off("chatThreadDeleted", (e: ChatThreadDeletedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_6'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatThreadDeleted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatThreadDeleted", listener: (e:
        ChatThreadDeletedEvent) => void)
      parameters:
        - id: event
          type: '"chatThreadDeleted"'
          description: The ChatThreadDeletedEvent.
        - id: listener
          type: '(e: ChatThreadDeletedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: >-
      off("chatThreadPropertiesUpdated", (e: ChatThreadPropertiesUpdatedEvent)
      => void)
    uid: '@azure/communication-chat.ChatClient.off_7'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatThreadPropertiesUpdated.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatThreadPropertiesUpdated", listener: (e:
        ChatThreadPropertiesUpdatedEvent) => void)
      parameters:
        - id: event
          type: '"chatThreadPropertiesUpdated"'
          description: The ChatThreadPropertiesUpdatedEvent.
        - id: listener
          type: '(e: ChatThreadPropertiesUpdatedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'off("participantsAdded", (e: ParticipantsAddedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_8'
    package: '@azure/communication-chat'
    summary: Unsubscribe from participantsAdded.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "participantsAdded", listener: (e:
        ParticipantsAddedEvent) => void)
      parameters:
        - id: event
          type: '"participantsAdded"'
          description: The ParticipantsAddedEvent.
        - id: listener
          type: '(e: ParticipantsAddedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'off("participantsRemoved", (e: ParticipantsRemovedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_9'
    package: '@azure/communication-chat'
    summary: Unsubscribe from participantsRemoved.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "participantsRemoved", listener: (e:
        ParticipantsRemovedEvent) => void)
      parameters:
        - id: event
          type: '"participantsRemoved"'
          description: The ParticipantsRemovedEvent.
        - id: listener
          type: '(e: ParticipantsRemovedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'off("readReceiptReceived", (e: ReadReceiptReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_4'
    package: '@azure/communication-chat'
    summary: Unsubscribe from readReceiptReceived.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "readReceiptReceived", listener: (e:
        ReadReceiptReceivedEvent) => void)
      parameters:
        - id: event
          type: '"readReceiptReceived"'
          description: The ReadReceiptReceivedEvent.
        - id: listener
          type: '(e: ReadReceiptReceivedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'off("typingIndicatorReceived", (e: TypingIndicatorReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_3'
    package: '@azure/communication-chat'
    summary: Unsubscribe from typingIndicatorReceived.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "typingIndicatorReceived", listener: (e:
        TypingIndicatorReceivedEvent) => void)
      parameters:
        - id: event
          type: '"typingIndicatorReceived"'
          description: The TypingIndicatorReceivedEvent.
        - id: listener
          type: '(e: TypingIndicatorReceivedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'on("chatMessageDeleted", (e: ChatMessageDeletedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_2'
    package: '@azure/communication-chat'
    summary: |-
      Subscribe function for chatMessageDeleted.
      The initial sender will also receive this event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatMessageDeleted", listener: (e:
        ChatMessageDeletedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageDeleted"'
          description: The ChatMessageDeletedEvent.
        - id: listener
          type: '(e: ChatMessageDeletedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'on("chatMessageEdited", (e: ChatMessageEditedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_1'
    package: '@azure/communication-chat'
    summary: |-
      Subscribe function for chatMessageEdited.
      The initial sender will also receive this event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatMessageEdited", listener: (e:
        ChatMessageEditedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageEdited"'
          description: The ChatMessageEditedEvent.
        - id: listener
          type: '(e: ChatMessageEditedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'on("chatMessageReceived", (e: ChatMessageReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on'
    package: '@azure/communication-chat'
    summary: >-
      Subscribe function for chatMessageReceived.

      The initial sender will also receive this event.

      You need to call startRealtimeNotifications before subscribing to any
      event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatMessageReceived", listener: (e:
        ChatMessageReceivedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageReceived"'
          description: The ChatMessageReceivedEvent.
        - id: listener
          type: '(e: ChatMessageReceivedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'on("chatThreadCreated", (e: ChatThreadCreatedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_5'
    package: '@azure/communication-chat'
    summary: Subscribe function for chatThreadCreated.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatThreadCreated", listener: (e:
        ChatThreadCreatedEvent) => void)
      parameters:
        - id: event
          type: '"chatThreadCreated"'
          description: The ChatThreadCreatedEvent.
        - id: listener
          type: '(e: ChatThreadCreatedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'on("chatThreadDeleted", (e: ChatThreadDeletedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_6'
    package: '@azure/communication-chat'
    summary: Subscribe function for chatThreadDeleted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatThreadDeleted", listener: (e:
        ChatThreadDeletedEvent) => void)
      parameters:
        - id: event
          type: '"chatThreadDeleted"'
          description: The ChatThreadDeletedEvent.
        - id: listener
          type: '(e: ChatThreadDeletedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: >-
      on("chatThreadPropertiesUpdated", (e: ChatThreadPropertiesUpdatedEvent) =>
      void)
    uid: '@azure/communication-chat.ChatClient.on_7'
    package: '@azure/communication-chat'
    summary: Subscribe function for chatThreadPropertiesUpdated.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatThreadPropertiesUpdated", listener: (e:
        ChatThreadPropertiesUpdatedEvent) => void)
      parameters:
        - id: event
          type: '"chatThreadPropertiesUpdated"'
          description: The ChatThreadPropertiesUpdatedEvent.
        - id: listener
          type: '(e: ChatThreadPropertiesUpdatedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'on("participantsAdded", (e: ParticipantsAddedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_8'
    package: '@azure/communication-chat'
    summary: Subscribe function for participantsAdded.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "participantsAdded", listener: (e:
        ParticipantsAddedEvent) => void)
      parameters:
        - id: event
          type: '"participantsAdded"'
          description: The ParticipantsAddedEvent.
        - id: listener
          type: '(e: ParticipantsAddedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'on("participantsRemoved", (e: ParticipantsRemovedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_9'
    package: '@azure/communication-chat'
    summary: Subscribe function for participantsRemoved.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "participantsRemoved", listener: (e:
        ParticipantsRemovedEvent) => void)
      parameters:
        - id: event
          type: '"participantsRemoved"'
          description: The ParticipantsRemovedEvent.
        - id: listener
          type: '(e: ParticipantsRemovedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: 'on("readReceiptReceived", (e: ReadReceiptReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_4'
    package: '@azure/communication-chat'
    summary: Subscribe function for readReceiptReceived.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "readReceiptReceived", listener: (e:
        ReadReceiptReceivedEvent) => void)
      parameters:
        - id: event
          type: '"readReceiptReceived"'
          description: The ReadReceiptReceivedEvent.
        - id: listener
          type: '(e: ReadReceiptReceivedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: on("realTimeNotificationConnected", () => void)
    uid: '@azure/communication-chat.ChatClient.on_10'
    package: '@azure/communication-chat'
    summary: Subscribe function for realTimeNotificationConnected.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "realTimeNotificationConnected", listener: () =>
        void)
      parameters:
        - id: event
          type: '"realTimeNotificationConnected"'
          description: The realTimeNotificationConnected Event
        - id: listener
          type: () =&gt; void
          description: The listener to handle the event.
  - name: on("realTimeNotificationDisconnected", () => void)
    uid: '@azure/communication-chat.ChatClient.on_11'
    package: '@azure/communication-chat'
    summary: Subscribe function for realTimeNotificationDisconnected.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "realTimeNotificationDisconnected", listener: () =>
        void)
      parameters:
        - id: event
          type: '"realTimeNotificationDisconnected"'
          description: The realTimeNotificationDisconnected Event
        - id: listener
          type: () =&gt; void
          description: The listener to handle the event.
  - name: 'on("typingIndicatorReceived", (e: TypingIndicatorReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_3'
    package: '@azure/communication-chat'
    summary: |-
      Subscribe function for typingIndicatorReceived.
      The initial sender will also receive this event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "typingIndicatorReceived", listener: (e:
        TypingIndicatorReceivedEvent) => void)
      parameters:
        - id: event
          type: '"typingIndicatorReceived"'
          description: The TypingIndicatorReceivedEvent.
        - id: listener
          type: '(e: TypingIndicatorReceivedEvent) =&gt; void'
          description: The listener to handle the event.
  - name: startRealtimeNotifications()
    uid: '@azure/communication-chat.ChatClient.startRealtimeNotifications'
    package: '@azure/communication-chat'
    summary: |-
      Start receiving realtime notifications.
      Call this function before subscribing to any event.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function startRealtimeNotifications(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopRealtimeNotifications()
    uid: '@azure/communication-chat.ChatClient.stopRealtimeNotifications'
    package: '@azure/communication-chat'
    summary: |-
      Stop receiving realtime notifications.
      This function would unsubscribe to all events.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopRealtimeNotifications(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
