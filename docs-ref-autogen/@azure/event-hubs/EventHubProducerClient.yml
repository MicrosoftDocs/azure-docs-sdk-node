### YamlMime:TSType
name: EventHubProducerClient
uid: '@azure/event-hubs.EventHubProducerClient'
package: '@azure/event-hubs'
summary: >-
  The `EventHubProducerClient` class is used to send events to an Event Hub.


  There are multiple ways to create an `EventHubProducerClient`

  - Use the connection string from the SAS policy created for your Event Hub
  instance.

  - Use the connection string from the SAS policy created for your Event Hub
  namespace,

  and the name of the Event Hub instance

  - Use the full namespace like `<yournamespace>.servicebus.windows.net`, and a
  credentials object.


  Optionally, you can also pass an options bag to configure the retry policy or
  proxy settings.
fullName: EventHubProducerClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: EventHubProducerClient(string, EventHubClientOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.constructor'
    package: '@azure/event-hubs'
    summary: |-
      The `EventHubProducerClient` class is used to send events to an Event Hub.
      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventHubProducerClient(connectionString: string, options?:
        EventHubClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubClientOptions" />
          description: >-
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: EventHubProducerClient(string, string, EventHubClientOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.constructor_1'
    package: '@azure/event-hubs'
    summary: |-
      The `EventHubProducerClient` class is used to send events to an Event Hub.
      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventHubProducerClient(connectionString: string, eventHubName:
        string, options?: EventHubClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties are contained in this
            connection string, but not the Event Hub path,

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;'.
        - id: eventHubName
          type: string
          description: The name of the specific Event Hub to connect the client to.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubClientOptions" />
          description: >-
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: >-
      EventHubProducerClient(string, string, TokenCredential |
      NamedKeyCredential | SASCredential, EventHubClientOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.constructor_2'
    package: '@azure/event-hubs'
    summary: |-
      The `EventHubProducerClient` class is used to send events to an Event Hub.
      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventHubProducerClient(fullyQualifiedNamespace: string,
        eventHubName: string, credential: TokenCredential | NamedKeyCredential |
        SASCredential, options?: EventHubClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type: string
          description: |-
            The full namespace which is likely to be similar to
            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type: string
          description: The name of the specific Event Hub to connect the client to.
        - id: credential
          type: >-
            <xref uid="@azure/event-hubs.TokenCredential" /> | <xref
            uid="@azure/core-auth.NamedKeyCredential" /> | <xref
            uid="@azure/core-auth.SASCredential" />
          description: >-
            An credential object used by the client to get the token to
            authenticate the connection

            with the Azure Event Hubs service.

            See &commat;azure/identity for creating credentials that support AAD
            auth.

            Use the `AzureNamedKeyCredential` from &commat;azure/core-auth if
            you want to pass in a `SharedAccessKeyName`

            and `SharedAccessKey` without using a connection string. These
            fields map to the `name` and `key` field respectively

            in `AzureNamedKeyCredential`.

            Use the `AzureSASCredential` from &commat;azure/core-auth if you
            want to pass in a `SharedAccessSignature`

            without using a connection string. This field maps to `signature` in
            `AzureSASCredential`.
        - id: options
          type: <xref uid="@azure/event-hubs.EventHubClientOptions" />
          description: >-
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
properties:
  - name: eventHubName
    uid: '@azure/event-hubs.EventHubProducerClient.eventHubName'
    package: '@azure/event-hubs'
    summary: The name of the Event Hub instance for which this client is created.
    fullName: eventHubName
    remarks: ''
    isDeprecated: false
    syntax:
      content: string eventHubName
      return:
        description: ''
        type: string
  - name: fullyQualifiedNamespace
    uid: '@azure/event-hubs.EventHubProducerClient.fullyQualifiedNamespace'
    package: '@azure/event-hubs'
    summary: >-
      The fully qualified namespace of the Event Hub instance for which this
      client is created.

      This is likely to be similar to <yournamespace>.servicebus.windows.net.
    fullName: fullyQualifiedNamespace
    remarks: ''
    isDeprecated: false
    syntax:
      content: string fullyQualifiedNamespace
      return:
        description: ''
        type: string
  - name: identifier
    uid: '@azure/event-hubs.EventHubProducerClient.identifier'
    package: '@azure/event-hubs'
    summary: |-
      The name used to identify this EventHubProducerClient.
      If not specified or empty, a random unique one will be generated.
    fullName: identifier
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'identifier: string'
      return:
        description: ''
        type: string
methods:
  - name: close()
    uid: '@azure/event-hubs.EventHubProducerClient.close'
    package: '@azure/event-hubs'
    summary: |-
      Closes the AMQP connection to the Event Hub instance,
      returning a promise that will be resolved when disconnection is completed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<void>'
      return:
        description: Promise<void>
        type: Promise&lt;void&gt;
  - name: createBatch(CreateBatchOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.createBatch'
    package: '@azure/event-hubs'
    summary: >-
      Creates an instance of `EventDataBatch` to which one can add events until
      the maximum supported size is reached.

      The batch can be passed to the
      [sendBatch](xref:@azure/event-hubs.EventHubProducerClient.sendBatch_1)
      method of the `EventHubProducerClient` to be sent to Azure Event Hubs.


      Events with different values for partitionKey or partitionId will need to
      be put into different batches.

      To simplify such batch management across partitions or to have the client
      automatically batch events

      and send them in specific intervals, use `EventHubBufferedProducerClient`
      instead.


      The below example assumes you have an array of events at hand to be
      batched safely.

      If you have events coming in one by one, `EventHubBufferedProducerClient`
      is recommended instead

      for effecient management of batches.


      Example usage:

      ```ts snippet:EventHubProducerClient_CreateBatch

      import { EventHubProducerClient } from "@azure/event-hubs";


      const client = new EventHubProducerClient("my-connection-string",
      "my-event-hub");


      const messages = [
        { body: "my-event-body1" },
        { body: "my-event-body2" },
        { body: "my-event-body3" },
        { body: "my-event-body4" },
        { body: "my-event-body5" },
      ];


      let batch = await client.createBatch();

      for (let i = 0; i < messages.length; i++) {
        if (!batch.tryAdd(messages[i])) {
          await client.sendBatch(batch);
          batch = await client.createBatch();
          if (!batch.tryAdd(messages[i])) {
            throw new Error("Message too big to fit");
          }
          if (i === messages.length - 1) {
            await client.sendBatch(batch);
          }
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createBatch(options?: CreateBatchOptions):
        Promise<EventDataBatch>
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.CreateBatchOptions" />
          description: >-
            Configures the behavior of the batch.

            - `partitionKey`  : A value that is hashed and used by the Azure
            Event Hubs service to determine the partition to which

            the events need to be sent.

            - `partitionId`   : Id of the partition to which the batch of events
            need to be sent.

            - `maxSizeInBytes`: The upper limit for the size of batch. The
            `tryAdd` function will return `false` after this limit is reached.

            - `abortSignal`   : A signal the request to cancel the operation.
      return:
        description: Promise<EventDataBatch>
        type: Promise&lt;<xref uid="@azure/event-hubs.EventDataBatch" />&gt;
  - name: getEventHubProperties(GetEventHubPropertiesOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.getEventHubProperties'
    package: '@azure/event-hubs'
    summary: Provides the Event Hub runtime information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getEventHubProperties(options?: GetEventHubPropertiesOptions):
        Promise<EventHubProperties>
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.GetEventHubPropertiesOptions" />
          description: The set of options to apply to the operation call.
      return:
        description: A promise that resolves with information about the Event Hub instance.
        type: Promise&lt;<xref uid="@azure/event-hubs.EventHubProperties" />&gt;
  - name: getPartitionIds(GetPartitionIdsOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.getPartitionIds'
    package: '@azure/event-hubs'
    summary: Provides the id for each partition associated with the Event Hub.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionIds(options?: GetPartitionIdsOptions):
        Promise<string[]>
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.GetPartitionIdsOptions" />
          description: The set of options to apply to the operation call.
      return:
        description: >-
          A promise that resolves with an Array of strings representing the id
          for

          each partition associated with the Event Hub.
        type: Promise&lt;string[]&gt;
  - name: getPartitionProperties(string, GetPartitionPropertiesOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.getPartitionProperties'
    package: '@azure/event-hubs'
    summary: Provides information about the state of the specified partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionProperties(partitionId: string, options?:
        GetPartitionPropertiesOptions): Promise<PartitionProperties>
      parameters:
        - id: partitionId
          type: string
          description: The id of the partition for which information is required.
        - id: options
          type: <xref uid="@azure/event-hubs.GetPartitionPropertiesOptions" />
          description: The set of options to apply to the operation call.
      return:
        description: >-
          A promise that resolves with information about the state of the
          partition .
        type: Promise&lt;<xref uid="@azure/event-hubs.PartitionProperties" />&gt;
  - name: sendBatch(EventDataBatch, OperationOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.sendBatch_1'
    package: '@azure/event-hubs'
    summary: >-
      Sends a batch of events created using
      `EventHubProducerClient.createBatch()` to the associated Event Hub.


      Events with different values for partitionKey or partitionId will need to
      be put into different batches.

      To simplify such batch management across partitions or to have the client
      automatically batch events

      and send them in specific intervals, use `EventHubBufferedProducerClient`
      instead.


      The below example assumes you have an array of events at hand to be
      batched safely.

      If you have events coming in one by one, `EventHubBufferedProducerClient`
      is recommended instead

      for effecient management of batches.


      Example usage:

      ```ts snippet:EventHubProducerClient_SendBatchPartitioned

      import { EventHubProducerClient } from "@azure/event-hubs";


      const client = new EventHubProducerClient("my-connection-string",
      "my-event-hub");


      const messages = [
        { body: "my-event-body1" },
        { body: "my-event-body2" },
        { body: "my-event-body3" },
        { body: "my-event-body4" },
        { body: "my-event-body5" },
      ];


      let batch = await client.createBatch();

      for (let i = 0; i < messages.length; i++) {
        if (!batch.tryAdd(messages[i])) {
          await client.sendBatch(batch);
          batch = await client.createBatch();
          if (!batch.tryAdd(messages[i])) {
            throw new Error("Message too big to fit");
          }
          if (i === messages.length - 1) {
            await client.sendBatch(batch);
          }
        }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendBatch(batch: EventDataBatch, options?: OperationOptions):
        Promise<void>
      parameters:
        - id: batch
          type: <xref uid="@azure/event-hubs.EventDataBatch" />
          description: >-
            A batch of events that you can create using the
            [createBatch](xref:@azure/event-hubs.EventHubProducerClient.createBatch)
            method.
        - id: options
          type: <xref uid="@azure/event-hubs.OperationOptions" />
          description: >-
            A set of options that can be specified to influence the way in which

            events are sent to the associated Event Hub.

            - `abortSignal`  : A signal the request to cancel the send
            operation.
      return:
        description: Promise<void>
        type: Promise&lt;void&gt;
  - name: sendBatch(EventData[] | AmqpAnnotatedMessage[], SendBatchOptions)
    uid: '@azure/event-hubs.EventHubProducerClient.sendBatch'
    package: '@azure/event-hubs'
    summary: >-
      Sends an array of events as a batch to the associated Event Hub.


      Azure Event Hubs has a limit on the size of the batch that can be sent
      which if exceeded

      will result in an error with code `MessageTooLargeError`.

      To safely send within batch size limits, use
      `EventHubProducerClient.createBatch()` or

      `EventHubBufferedProducerClient` instead.


      Example usage:

      ```ts snippet:EventHubProducerClient_SendBatch

      import { EventHubProducerClient } from "@azure/event-hubs";


      const client = new EventHubProducerClient("my-connection-string",
      "my-event-hub");


      const messages = [
        { body: "my-event-body1" },
        { body: "my-event-body2" },
        { body: "my-event-body3" },
        { body: "my-event-body4" },
        { body: "my-event-body5" },
      ];


      await client.sendBatch(messages);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendBatch(batch: EventData[] | AmqpAnnotatedMessage[],
        options?: SendBatchOptions): Promise<void>
      parameters:
        - id: batch
          type: >-
            <xref uid="@azure/event-hubs.EventData" />[] | <xref
            uid="@azure/core-amqp.AmqpAnnotatedMessage" />[]
          description: >-
            An array of [EventData](xref:@azure/event-hubs.EventData) or
            `AmqpAnnotatedMessage`.
        - id: options
          type: <xref uid="@azure/event-hubs.SendBatchOptions" />
          description: >-
            A set of options that can be specified to influence the way in which

            events are sent to the associated Event Hub.

            - `abortSignal`  : A signal the request to cancel the send
            operation.

            - `partitionId`  : The partition this batch will be sent to. If set,
            `partitionKey` can not be set.

            - `partitionKey` : A value that is hashed to produce a partition
            assignment. If set, `partitionId` can not be set.
      return:
        description: Promise<void>
        type: Promise&lt;void&gt;
