### YamlMime:TSType
name: Container
uid: '@azure/cosmos.Container'
package: '@azure/cosmos'
summary: >-
  Operations for reading, replacing, or deleting a specific, existing container
  by id.


  See [Containers](xref:@azure/cosmos.Containers) for creating new containers,
  and reading/querying all containers; use `.containers`.


  Note: all these operations make calls against a fixed budget.

  You should design your system such that these calls scale sublinearly with
  your application.

  For instance, do not call `container(id).read()` before every single
  `item.read()` call, to ensure the container exists;

  do this once on application start up.
fullName: Container
remarks: ''
isDeprecated: false
type: class
properties:
  - name: conflicts
    uid: '@azure/cosmos.Container.conflicts'
    package: '@azure/cosmos'
    summary: |-
      Operations for reading and querying conflicts for the given container.

      For reading or deleting a specific conflict, use `.conflict(id)`.
    fullName: conflicts
    remarks: ''
    isDeprecated: false
    syntax:
      content: Conflicts conflicts
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Conflicts" />
  - name: database
    uid: '@azure/cosmos.Container.database'
    package: '@azure/cosmos'
    summary: ''
    fullName: database
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'database: Database'
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Database" />
  - name: id
    uid: '@azure/cosmos.Container.id'
    package: '@azure/cosmos'
    summary: ''
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
  - name: items
    uid: '@azure/cosmos.Container.items'
    package: '@azure/cosmos'
    summary: >+
      Operations for creating new items, and reading/querying all items


      For reading, replacing, or deleting an existing item, use `.item(id)`.


      **Example**


      Create a new item

      ```typescript

      const {body: createdItem} = await container.items.create({id: "<item id>",
      properties: {}});

      ```

    fullName: items
    remarks: ''
    isDeprecated: false
    syntax:
      content: Items items
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Items" />
  - name: scripts
    uid: '@azure/cosmos.Container.scripts'
    package: '@azure/cosmos'
    summary: All operations for Stored Procedures, Triggers, and User Defined Functions
    fullName: scripts
    remarks: ''
    isDeprecated: false
    syntax:
      content: Scripts scripts
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Scripts" />
  - name: url
    uid: '@azure/cosmos.Container.url'
    package: '@azure/cosmos'
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    fullName: url
    remarks: ''
    isDeprecated: false
    syntax:
      content: string url
      return:
        description: ''
        type: string
methods:
  - name: conflict(string, PartitionKey)
    uid: '@azure/cosmos.Container.conflict'
    package: '@azure/cosmos'
    summary: >-
      Used to read, replace, or delete a specific, existing
      [Conflict](xref:@azure/cosmos.Conflict) by id.


      Use `.conflicts` for creating new conflicts, or querying/reading all
      conflicts.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function conflict(id: string, partitionKey?: PartitionKey): Conflict'
      parameters:
        - id: id
          type: string
          description: The id of the [Conflict](xref:@azure/cosmos.Conflict).
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Conflict" />
  - name: delete(RequestOptions)
    uid: '@azure/cosmos.Container.delete'
    package: '@azure/cosmos'
    summary: Delete the container
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function delete(options?: RequestOptions): Promise<ContainerResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
  - name: deleteAllItemsForPartitionKey(PartitionKey, RequestOptions)
    uid: '@azure/cosmos.Container.deleteAllItemsForPartitionKey'
    package: '@azure/cosmos'
    summary: >-
      Delete all documents belong to the container for the provided partition
      key value
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteAllItemsForPartitionKey(partitionKey: PartitionKey,
        options?: RequestOptions): Promise<ContainerResponse>
      parameters:
        - id: partitionKey
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: The partition key value of the items to be deleted
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
  - name: getFeedRanges()
    uid: '@azure/cosmos.Container.getFeedRanges'
    package: '@azure/cosmos'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getFeedRanges(): Promise<readonly FeedRange[]>'
      return:
        description: all the feed ranges for which changefeed could be fetched.
        type: Promise&lt;readonly FeedRange[]&gt;
  - name: getPartitionKeyDefinition()
    uid: '@azure/cosmos.Container.getPartitionKeyDefinition'
    package: '@azure/cosmos'
    summary: >-
      Gets the partition key definition first by looking into the cache
      otherwise by reading the collection.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: This method has been renamed to readPartitionKeyDefinition.
    syntax:
      content: >-
        function getPartitionKeyDefinition():
        Promise<ResourceResponse<PartitionKeyDefinition>>
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/cosmos.ResourceResponse" />&lt;<xref
          uid="@azure/cosmos.PartitionKeyDefinition" />&gt;&gt;
  - name: getQueryPlan(string | SqlQuerySpec)
    uid: '@azure/cosmos.Container.getQueryPlan'
    package: '@azure/cosmos'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getQueryPlan(query: string | SqlQuerySpec):
        Promise<Response_2<PartitionedQueryExecutionInfo>>
      parameters:
        - id: query
          type: string | <xref uid="@azure/cosmos.SqlQuerySpec" />
          description: ''
      return:
        description: ''
        type: Promise&lt;Response_2&lt;PartitionedQueryExecutionInfo&gt;&gt;
  - name: initializeEncryption()
    uid: '@azure/cosmos.Container.initializeEncryption'
    package: '@azure/cosmos'
    summary: Warms up encryption related caches for the container.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function initializeEncryption(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: item(string, PartitionKey)
    uid: '@azure/cosmos.Container.item'
    package: '@azure/cosmos'
    summary: >+
      Used to read, replace, or delete a specific, existing
      [Item](xref:@azure/cosmos.Item) by id.


      Use `.items` for creating new items, or querying/reading all items.


      **Example**


      Replace an item

      `const {body: replacedItem} = await container.item("<item id>",
      "<partition key value>").replace({id: "<item id>", title: "Updated post",
      authorID: 5});`

    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function item(id: string, partitionKeyValue?: PartitionKey): Item'
      parameters:
        - id: id
          type: string
          description: The id of the [Item](xref:@azure/cosmos.Item).
        - id: partitionKeyValue
          type: <xref uid="@azure/cosmos.PartitionKey" />
          description: The value of the [Item](xref:@azure/cosmos.Item) partition key
      return:
        description: ''
        type: <xref uid="@azure/cosmos.Item" />
  - name: read(RequestOptions)
    uid: '@azure/cosmos.Container.read'
    package: '@azure/cosmos'
    summary: Read the container's definition
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function read(options?: RequestOptions): Promise<ContainerResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
  - name: readOffer(RequestOptions)
    uid: '@azure/cosmos.Container.readOffer'
    package: '@azure/cosmos'
    summary: >-
      Gets offer on container. If none exists, returns an OfferResponse with
      undefined.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function readOffer(options?: RequestOptions): Promise<OfferResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.OfferResponse" />&gt;
  - name: readPartitionKeyRanges(FeedOptions)
    uid: '@azure/cosmos.Container.readPartitionKeyRanges'
    package: '@azure/cosmos'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function readPartitionKeyRanges(feedOptions?: FeedOptions):
        QueryIterator<PartitionKeyRange>
      parameters:
        - id: feedOptions
          type: <xref uid="@azure/cosmos.FeedOptions" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/cosmos.QueryIterator" />&lt;PartitionKeyRange&gt;
  - name: replace(ContainerDefinition, RequestOptions)
    uid: '@azure/cosmos.Container.replace'
    package: '@azure/cosmos'
    summary: Replace the container's definition
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function replace(body: ContainerDefinition, options?: RequestOptions):
        Promise<ContainerResponse>
      parameters:
        - id: body
          type: <xref uid="@azure/cosmos.ContainerDefinition" />
          description: ''
        - id: options
          type: <xref uid="@azure/cosmos.RequestOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/cosmos.ContainerResponse" />&gt;
