### YamlMime:TSType
name: EventSubscriptions
uid: '@azure/arm-eventgrid.EventSubscriptions'
package: '@azure/arm-eventgrid'
summary: Interface representing a EventSubscriptions.
fullName: EventSubscriptions
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: >-
      beginCreateOrUpdate(string, string, EventSubscription,
      EventSubscriptionsCreateOrUpdateOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.beginCreateOrUpdate'
    package: '@azure/arm-eventgrid'
    summary: >-
      Asynchronously creates a new event subscription or updates an existing
      event subscription based on

      the specified scope.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdate(scope: string, eventSubscriptionName:
        string, eventSubscriptionInfo: EventSubscription, options?:
        EventSubscriptionsCreateOrUpdateOptionalParams):
        Promise<SimplePollerLike<OperationState<EventSubscription>,
        EventSubscription>>
      parameters:
        - id: scope
          type: string
          description: >-
            The identifier of the resource to which the event subscription needs
            to be created or
                         updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
                         a resource provider namespace, or an EventGrid topic. For example, use
                         '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: >-
            Name of the event subscription to be created. Event subscription
            names
                                         must be between 3 and 64 characters in length and should use alphanumeric letters only.
        - id: eventSubscriptionInfo
          type: <xref uid="@azure/arm-eventgrid.EventSubscription" />
          description: |-
            Event subscription properties containing the destination and filter
                                         information.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsCreateOrUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />&gt;, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />&gt;&gt;
  - name: >-
      beginCreateOrUpdateAndWait(string, string, EventSubscription,
      EventSubscriptionsCreateOrUpdateOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.beginCreateOrUpdateAndWait'
    package: '@azure/arm-eventgrid'
    summary: >-
      Asynchronously creates a new event subscription or updates an existing
      event subscription based on

      the specified scope.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAndWait(scope: string,
        eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription,
        options?: EventSubscriptionsCreateOrUpdateOptionalParams):
        Promise<EventSubscription>
      parameters:
        - id: scope
          type: string
          description: >-
            The identifier of the resource to which the event subscription needs
            to be created or
                         updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
                         a resource provider namespace, or an EventGrid topic. For example, use
                         '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: >-
            Name of the event subscription to be created. Event subscription
            names
                                         must be between 3 and 64 characters in length and should use alphanumeric letters only.
        - id: eventSubscriptionInfo
          type: <xref uid="@azure/arm-eventgrid.EventSubscription" />
          description: |-
            Event subscription properties containing the destination and filter
                                         information.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsCreateOrUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-eventgrid.EventSubscription" />&gt;
  - name: beginDelete(string, string, EventSubscriptionsDeleteOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.beginDelete'
    package: '@azure/arm-eventgrid'
    summary: Delete an existing event subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDelete(scope: string, eventSubscriptionName: string,
        options?: EventSubscriptionsDeleteOptionalParams):
        Promise<SimplePollerLike<OperationState<void>, void>>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource
                         group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
                         For example, use '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: Name of the event subscription to be deleted.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsDeleteOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;void&gt;, void&gt;&gt;
  - name: beginDeleteAndWait(string, string, EventSubscriptionsDeleteOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.beginDeleteAndWait'
    package: '@azure/arm-eventgrid'
    summary: Delete an existing event subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAndWait(scope: string, eventSubscriptionName:
        string, options?: EventSubscriptionsDeleteOptionalParams): Promise<void>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource
                         group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
                         For example, use '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: Name of the event subscription to be deleted.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsDeleteOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      beginUpdate(string, string, EventSubscriptionUpdateParameters,
      EventSubscriptionsUpdateOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.beginUpdate'
    package: '@azure/arm-eventgrid'
    summary: Asynchronously updates an existing event subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdate(scope: string, eventSubscriptionName: string,
        eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,
        options?: EventSubscriptionsUpdateOptionalParams):
        Promise<SimplePollerLike<OperationState<EventSubscription>,
        EventSubscription>>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of existing event subscription. The scope can be a
            subscription, or a
                         resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
                         topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: Name of the event subscription to be updated.
        - id: eventSubscriptionUpdateParameters
          type: >-
            <xref uid="@azure/arm-eventgrid.EventSubscriptionUpdateParameters"
            />
          description: Updated event subscription information.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsUpdateOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />&gt;, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />&gt;&gt;
  - name: >-
      beginUpdateAndWait(string, string, EventSubscriptionUpdateParameters,
      EventSubscriptionsUpdateOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.beginUpdateAndWait'
    package: '@azure/arm-eventgrid'
    summary: Asynchronously updates an existing event subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateAndWait(scope: string, eventSubscriptionName:
        string, eventSubscriptionUpdateParameters:
        EventSubscriptionUpdateParameters, options?:
        EventSubscriptionsUpdateOptionalParams): Promise<EventSubscription>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of existing event subscription. The scope can be a
            subscription, or a
                         resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
                         topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: Name of the event subscription to be updated.
        - id: eventSubscriptionUpdateParameters
          type: >-
            <xref uid="@azure/arm-eventgrid.EventSubscriptionUpdateParameters"
            />
          description: Updated event subscription information.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsUpdateOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-eventgrid.EventSubscription" />&gt;
  - name: get(string, string, EventSubscriptionsGetOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.get'
    package: '@azure/arm-eventgrid'
    summary: Get properties of an event subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, eventSubscriptionName: string, options?:
        EventSubscriptionsGetOptionalParams): Promise<EventSubscription>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource
                         group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
                         For example, use '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: Name of the event subscription to be found.
        - id: options
          type: >-
            <xref uid="@azure/arm-eventgrid.EventSubscriptionsGetOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-eventgrid.EventSubscription" />&gt;
  - name: >-
      getDeliveryAttributes(string, string,
      EventSubscriptionsGetDeliveryAttributesOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.getDeliveryAttributes'
    package: '@azure/arm-eventgrid'
    summary: Get all delivery attributes for an event subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeliveryAttributes(scope: string, eventSubscriptionName:
        string, options?:
        EventSubscriptionsGetDeliveryAttributesOptionalParams):
        Promise<DeliveryAttributeListResult>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource
                         group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
                         For example, use '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: Name of the event subscription.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsGetDeliveryAttributesOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-eventgrid.DeliveryAttributeListResult" />&gt;
  - name: getFullUrl(string, string, EventSubscriptionsGetFullUrlOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.getFullUrl'
    package: '@azure/arm-eventgrid'
    summary: Get the full endpoint URL for an event subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFullUrl(scope: string, eventSubscriptionName: string,
        options?: EventSubscriptionsGetFullUrlOptionalParams):
        Promise<EventSubscriptionFullUrl>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the event subscription. The scope can be a
            subscription, or a resource
                         group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
                         For example, use '/subscriptions/{subscriptionId}/' for a subscription,
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
                         for a resource, and
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
                         for an EventGrid topic.
        - id: eventSubscriptionName
          type: string
          description: Name of the event subscription.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsGetFullUrlOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-eventgrid.EventSubscriptionFullUrl"
          />&gt;
  - name: >-
      listByDomainTopic(string, string, string,
      EventSubscriptionsListByDomainTopicOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.listByDomainTopic'
    package: '@azure/arm-eventgrid'
    summary: >-
      List all event subscriptions that have been created for a specific domain
      topic.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listByDomainTopic(resourceGroupName: string, domainName:
        string, topicName: string, options?:
        EventSubscriptionsListByDomainTopicOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group within the user's subscription.
        - id: domainName
          type: string
          description: Name of the top level domain.
        - id: topicName
          type: string
          description: Name of the domain topic.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListByDomainTopicOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listByResource(string, string, string, string,
      EventSubscriptionsListByResourceOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.listByResource'
    package: '@azure/arm-eventgrid'
    summary: >-
      List all event subscriptions that have been created for a specific
      resource.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listByResource(resourceGroupName: string, providerNamespace:
        string, resourceTypeName: string, resourceName: string, options?:
        EventSubscriptionsListByResourceOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group within the user's subscription.
        - id: providerNamespace
          type: string
          description: Namespace of the provider of the topic.
        - id: resourceTypeName
          type: string
          description: Name of the resource type.
        - id: resourceName
          type: string
          description: Name of the resource.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListByResourceOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listGlobalByResourceGroup(string,
      EventSubscriptionsListGlobalByResourceGroupOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroup'
    package: '@azure/arm-eventgrid'
    summary: >-
      List all global event subscriptions under a specific Azure subscription
      and resource group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listGlobalByResourceGroup(resourceGroupName: string, options?:
        EventSubscriptionsListGlobalByResourceGroupOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group within the user's subscription.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListGlobalByResourceGroupOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listGlobalByResourceGroupForTopicType(string, string,
      EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams)
    uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listGlobalByResourceGroupForTopicType
    package: '@azure/arm-eventgrid'
    summary: >-
      List all global event subscriptions under a resource group for a specific
      topic type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listGlobalByResourceGroupForTopicType(resourceGroupName:
        string, topicTypeName: string, options?:
        EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group within the user's subscription.
        - id: topicTypeName
          type: string
          description: Name of the topic type.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listGlobalBySubscription(EventSubscriptionsListGlobalBySubscriptionOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscription'
    package: '@azure/arm-eventgrid'
    summary: >-
      List all aggregated global event subscriptions under a specific Azure
      subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listGlobalBySubscription(options?:
        EventSubscriptionsListGlobalBySubscriptionOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListGlobalBySubscriptionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listGlobalBySubscriptionForTopicType(string,
      EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams)
    uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listGlobalBySubscriptionForTopicType
    package: '@azure/arm-eventgrid'
    summary: >-
      List all global event subscriptions under an Azure subscription for a
      topic type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listGlobalBySubscriptionForTopicType(topicTypeName: string,
        options?:
        EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: topicTypeName
          type: string
          description: Name of the topic type.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listRegionalByResourceGroup(string, string,
      EventSubscriptionsListRegionalByResourceGroupOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroup'
    package: '@azure/arm-eventgrid'
    summary: >-
      List all event subscriptions from the given location under a specific
      Azure subscription and

      resource group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRegionalByResourceGroup(resourceGroupName: string,
        location: string, options?:
        EventSubscriptionsListRegionalByResourceGroupOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group within the user's subscription.
        - id: location
          type: string
          description: Name of the location.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListRegionalByResourceGroupOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listRegionalByResourceGroupForTopicType(string, string, string,
      EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams)
    uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listRegionalByResourceGroupForTopicType
    package: '@azure/arm-eventgrid'
    summary: >-
      List all event subscriptions from the given location under a specific
      Azure subscription and

      resource group and topic type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRegionalByResourceGroupForTopicType(resourceGroupName:
        string, location: string, topicTypeName: string, options?:
        EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group within the user's subscription.
        - id: location
          type: string
          description: Name of the location.
        - id: topicTypeName
          type: string
          description: Name of the topic type.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listRegionalBySubscription(string,
      EventSubscriptionsListRegionalBySubscriptionOptionalParams)
    uid: '@azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscription'
    package: '@azure/arm-eventgrid'
    summary: >-
      List all event subscriptions from the given location under a specific
      Azure subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRegionalBySubscription(location: string, options?:
        EventSubscriptionsListRegionalBySubscriptionOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: location
          type: string
          description: Name of the location.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListRegionalBySubscriptionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listRegionalBySubscriptionForTopicType(string, string,
      EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams)
    uid: >-
      @azure/arm-eventgrid.EventSubscriptions.listRegionalBySubscriptionForTopicType
    package: '@azure/arm-eventgrid'
    summary: >-
      List all event subscriptions from the given location under a specific
      Azure subscription and topic

      type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRegionalBySubscriptionForTopicType(location: string,
        topicTypeName: string, options?:
        EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams):
        PagedAsyncIterableIterator<EventSubscription, EventSubscription[],
        PageSettings>
      parameters:
        - id: location
          type: string
          description: Name of the location.
        - id: topicTypeName
          type: string
          description: Name of the topic type.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-eventgrid.EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-eventgrid.EventSubscription" />, <xref
          uid="@azure/arm-eventgrid.EventSubscription" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
