### YamlMime:TSType
name: ServiceBusSender
uid: '@azure/service-bus.ServiceBusSender'
package: '@azure/service-bus'
summary: >-
  A Sender can be used to send messages, schedule messages to be sent at a later
  time

  and cancel such scheduled messages.

  Use the `createSender` function on the ServiceBusClient to instantiate a
  Sender.

  The Sender class is an abstraction over the underlying AMQP sender link.
fullName: ServiceBusSender
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: entityPath
    uid: '@azure/service-bus.ServiceBusSender.entityPath'
    package: '@azure/service-bus'
    summary: Path of the entity for which the sender has been created.
    fullName: entityPath
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'entityPath: string'
      return:
        description: ''
        type: string
  - name: identifier
    uid: '@azure/service-bus.ServiceBusSender.identifier'
    package: '@azure/service-bus'
    summary: >-
      A name used to identify the sender. This can be used to correlate logs and
      exceptions.

      If not specified or empty, a random unique one will be generated.
    fullName: identifier
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'identifier: string'
      return:
        description: ''
        type: string
  - name: isClosed
    uid: '@azure/service-bus.ServiceBusSender.isClosed'
    package: '@azure/service-bus'
    summary: >-
      Returns `true` if either the sender or the client that created it has been
      closed.
    fullName: isClosed
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'isClosed: boolean'
      return:
        description: ''
        type: boolean
methods:
  - name: cancelScheduledMessages(Long | Long[], OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSender.cancelScheduledMessages'
    package: '@azure/service-bus'
    summary: >-
      Cancels multiple messages that were scheduled to appear on a ServiceBus
      Queue/Subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function cancelScheduledMessages(sequenceNumbers: Long | Long[],
        options?: OperationOptionsBase): Promise<void>
      parameters:
        - id: sequenceNumbers
          type: Long | Long[]
          description: >-
            Sequence number or an array of sequence numbers of the messages to
            be cancelled.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: close()
    uid: '@azure/service-bus.ServiceBusSender.close'
    package: '@azure/service-bus'
    summary: >-
      Closes the underlying AMQP sender link.

      Once closed, the sender cannot be used for any further operations.

      Use the `createSender` function on the QueueClient or TopicClient to
      instantiate a new Sender
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: createMessageBatch(CreateMessageBatchOptions)
    uid: '@azure/service-bus.ServiceBusSender.createMessageBatch'
    package: '@azure/service-bus'
    summary: >-
      Creates an instance of `ServiceBusMessageBatch` to which one can add
      messages until the maximum supported size is reached.

      The batch can be passed to the <xref:send> method to send the messages to
      Azure Service Bus.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createMessageBatch(options?: CreateMessageBatchOptions):
        Promise<ServiceBusMessageBatch>
      parameters:
        - id: options
          type: <xref uid="@azure/service-bus.CreateMessageBatchOptions" />
          description: >-
            Configures the behavior of the batch.

            - `maxSizeInBytes`: The upper limit for the size of batch. The
            `tryAdd` function will return `false` after this limit is reached.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusMessageBatch"
          />&gt;
  - name: >-
      scheduleMessages(ServiceBusMessage | ServiceBusMessage[] |
      AmqpAnnotatedMessage | AmqpAnnotatedMessage[], Date, OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSender.scheduleMessages'
    package: '@azure/service-bus'
    summary: >-
      Schedules given messages to appear on Service Bus Queue/Subscription at a
      later time.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function scheduleMessages(messages: ServiceBusMessage |
        ServiceBusMessage[] | AmqpAnnotatedMessage | AmqpAnnotatedMessage[],
        scheduledEnqueueTimeUtc: Date, options?: OperationOptionsBase):
        Promise<Long[]>
      parameters:
        - id: messages
          type: >-
            <xref uid="@azure/service-bus.ServiceBusMessage" /> | <xref
            uid="@azure/service-bus.ServiceBusMessage" />[] | <xref
            uid="@azure/core-amqp.AmqpAnnotatedMessage" /> | <xref
            uid="@azure/core-amqp.AmqpAnnotatedMessage" />[]
          description: Message or an array of messages that need to be scheduled.
        - id: scheduledEnqueueTimeUtc
          type: Date
          description: The UTC time at which the messages should be enqueued.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: >-
          The sequence numbers of messages that were scheduled.

          You will need the sequence number if you intend to cancel the
          scheduling of the messages.

          Save the `Long` type as-is in your application without converting to
          number. Since JavaScript

          only supports 53 bit numbers, converting the `Long` to number will
          cause loss in precision.
        type: Promise&lt;Long[]&gt;
  - name: >-
      sendMessages(ServiceBusMessage | ServiceBusMessage[] |
      ServiceBusMessageBatch | AmqpAnnotatedMessage | AmqpAnnotatedMessage[],
      OperationOptionsBase)
    uid: '@azure/service-bus.ServiceBusSender.sendMessages'
    package: '@azure/service-bus'
    summary: >-
      Sends the given messages after creating an AMQP Sender link if it doesn't
      already exist.


      - To send messages to a `session` and/or `partition` enabled Queue/Topic,
      set the `sessionId`

      and/or `partitionKey` properties respectively on the messages.

      - All messages passed to the same sendMessages() call should have the same
      `sessionId` (if using
       sessions) and the same `partitionKey` (if using partitions).

      **Note:**

         __If you want to send messages of size greater than 1MB, please send individual messages instead of sending a batched message or an array of messages like below.__

       `await sender.sendMessages(message);`

      __This is because the batched messages are not capable of sending the
      larger messages yet. You'll hit the `force detached` error in this case
      otherwise. Read
      [service-bus-premium-messaging#large-messages-support](https://learn.microsoft.com/azure/service-bus-messaging/service-bus-premium-messaging#large-messages-support).
      More info at
      [#23014](https://github.com/Azure/azure-sdk-for-js/pull/23014).__
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendMessages(messages: ServiceBusMessage | ServiceBusMessage[]
        | ServiceBusMessageBatch | AmqpAnnotatedMessage |
        AmqpAnnotatedMessage[], options?: OperationOptionsBase): Promise<void>
      parameters:
        - id: messages
          type: >-
            <xref uid="@azure/service-bus.ServiceBusMessage" /> | <xref
            uid="@azure/service-bus.ServiceBusMessage" />[] | <xref
            uid="@azure/service-bus.ServiceBusMessageBatch" /> | <xref
            uid="@azure/core-amqp.AmqpAnnotatedMessage" /> | <xref
            uid="@azure/core-amqp.AmqpAnnotatedMessage" />[]
          description: >-
            A single message or an array of messages or a batch of messages
            created via the createBatch()

            method to send.
        - id: options
          type: <xref uid="@azure/service-bus.OperationOptionsBase" />
          description: Options bag to pass an abort signal or tracing options.
      return:
        description: ''
        type: Promise&lt;void&gt;
