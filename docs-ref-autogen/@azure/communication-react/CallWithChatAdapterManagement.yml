### YamlMime:TSType
name: CallWithChatAdapterManagement
uid: '@azure/communication-react.CallWithChatAdapterManagement'
package: '@azure/communication-react'
summary: Functionality for managing the current call with chat.
fullName: CallWithChatAdapterManagement
remarks: ''
isDeprecated: false
type: interface
properties:
  - name: forbidAudio
    uid: '@azure/communication-react.CallWithChatAdapterManagement.forbidAudio'
    package: '@azure/communication-react'
    summary: forbids audio for the specified user ids.
    fullName: forbidAudio
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'forbidAudio: (userIds: string[]) => Promise<void>'
      return:
        description: ''
        type: '(userIds: string[]) =&gt; Promise&lt;void&gt;'
  - name: forbidOthersAudio
    uid: '@azure/communication-react.CallWithChatAdapterManagement.forbidOthersAudio'
    package: '@azure/communication-react'
    summary: forbids audio for Teams meeting attendees except the local user.
    fullName: forbidOthersAudio
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'forbidOthersAudio: () => Promise<void>'
      return:
        description: ''
        type: () =&gt; Promise&lt;void&gt;
  - name: forbidOthersVideo
    uid: '@azure/communication-react.CallWithChatAdapterManagement.forbidOthersVideo'
    package: '@azure/communication-react'
    summary: forbids video for Teams meeting attendees except the local user.
    fullName: forbidOthersVideo
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'forbidOthersVideo: () => Promise<void>'
      return:
        description: ''
        type: () =&gt; Promise&lt;void&gt;
  - name: forbidVideo
    uid: '@azure/communication-react.CallWithChatAdapterManagement.forbidVideo'
    package: '@azure/communication-react'
    summary: forbids video for the specified user ids.
    fullName: forbidVideo
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'forbidVideo: (userIds: string[]) => Promise<void>'
      return:
        description: ''
        type: '(userIds: string[]) =&gt; Promise&lt;void&gt;'
  - name: permitAudio
    uid: '@azure/communication-react.CallWithChatAdapterManagement.permitAudio'
    package: '@azure/communication-react'
    summary: permits audio for the specified user ids.
    fullName: permitAudio
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'permitAudio: (userIds: string[]) => Promise<void>'
      return:
        description: ''
        type: '(userIds: string[]) =&gt; Promise&lt;void&gt;'
  - name: permitOthersAudio
    uid: '@azure/communication-react.CallWithChatAdapterManagement.permitOthersAudio'
    package: '@azure/communication-react'
    summary: permits audio for Teams meeting attendees except the local user.
    fullName: permitOthersAudio
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'permitOthersAudio: () => Promise<void>'
      return:
        description: ''
        type: () =&gt; Promise&lt;void&gt;
  - name: permitOthersVideo
    uid: '@azure/communication-react.CallWithChatAdapterManagement.permitOthersVideo'
    package: '@azure/communication-react'
    summary: permits video for Teams meeting attendees except the local user.
    fullName: permitOthersVideo
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'permitOthersVideo: () => Promise<void>'
      return:
        description: ''
        type: () =&gt; Promise&lt;void&gt;
  - name: permitVideo
    uid: '@azure/communication-react.CallWithChatAdapterManagement.permitVideo'
    package: '@azure/communication-react'
    summary: permits video for the specified user ids.
    fullName: permitVideo
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'permitVideo: (userIds: string[]) => Promise<void>'
      return:
        description: ''
        type: '(userIds: string[]) =&gt; Promise&lt;void&gt;'
  - name: sendDtmfTone
    uid: '@azure/communication-react.CallWithChatAdapterManagement.sendDtmfTone'
    package: '@azure/communication-react'
    summary: send dtmf tone to another participant in the call in 1:1 calls
    fullName: sendDtmfTone
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'public sendDtmfTone: (dtmfTone: DtmfTone) => Promise<void>'
      return:
        description: ''
        type: '(dtmfTone: DtmfTone) =&gt; Promise&lt;void&gt;'
  - name: sendRealTimeText
    uid: '@azure/communication-react.CallWithChatAdapterManagement.sendRealTimeText'
    package: '@azure/communication-react'
    summary: Send real time text
    fullName: sendRealTimeText
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'sendRealTimeText: (text: string, isFinalized: boolean) => Promise<void>'
      return:
        description: ''
        type: '(text: string, isFinalized: boolean) =&gt; Promise&lt;void&gt;'
methods:
  - name: addParticipant(CommunicationUserIdentifier)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.addParticipant_1'
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addParticipant(participant: CommunicationUserIdentifier):
        Promise<void>
      parameters:
        - id: participant
          type: >-
            <xref uid="@azure/communication-common.CommunicationUserIdentifier"
            />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: addParticipant(PhoneNumberIdentifier, AddPhoneNumberOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.addParticipant'
    package: '@azure/communication-react'
    summary: Adds a new Participant to the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addParticipant(participant: PhoneNumberIdentifier, options?:
        AddPhoneNumberOptions): Promise<void>
      parameters:
        - id: participant
          type: <xref uid="@azure/communication-common.PhoneNumberIdentifier" />
          description: ''
        - id: options
          type: <xref uid="@azure/communication-calling.AddPhoneNumberOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: askDevicePermission(PermissionConstraints)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.askDevicePermission
    package: '@azure/communication-react'
    summary: Ask for permissions of devices.
    remarks: Browser permission window will pop up if permissions are not granted yet.
    isDeprecated: false
    syntax:
      content: >-
        function askDevicePermission(constrain: PermissionConstraints):
        Promise<DeviceAccess>
      parameters:
        - id: constrain
          type: <xref uid="@azure/communication-calling.PermissionConstraints" />
          description: >-
            Define constraints for accessing local devices
            [@azure/communication-calling#PermissionConstraints](xref:@azure/communication-react.CallAdapter.on_1)
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/communication-calling.DeviceAccess"
          />&gt;
  - name: createStreamView(string, VideoStreamOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.createStreamView'
    package: '@azure/communication-react'
    summary: Create the html view for a stream.
    remarks: This method is implemented for composite.
    isDeprecated: false
    syntax:
      content: >-
        function createStreamView(remoteUserId?: string, options?:
        VideoStreamOptions): Promise<void | CreateVideoStreamViewResult>
      parameters:
        - id: remoteUserId
          type: string
          description: >-
            Id of the participant to render, leave it undefined to create the
            local camera view
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >-
            Options to control how video streams are rendered
            [@azure/communication-calling#VideoStreamOptions](xref:@azure/communication-react.CallAdapter.on_1)
      return:
        description: ''
        type: >-
          Promise&lt;void | <xref
          uid="@azure/communication-react.CreateVideoStreamViewResult" />&gt;
  - name: createTogetherModeStreamView(TogetherModeStreamOptions)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.createTogetherModeStreamView
    package: '@azure/communication-react'
    summary: Create the html view for a togethermode stream.
    remarks: This method is implemented for composite
    isDeprecated: false
    syntax:
      content: >-
        function createTogetherModeStreamView(options?:
        TogetherModeStreamOptions): Promise<void | TogetherModeStreamViewResult>
      parameters:
        - id: options
          type: <xref uid="@azure/communication-react.TogetherModeStreamOptions" />
          description: >-
            Options to control how video streams are rendered
            [@azure/communication-calling#VideoStreamOptions](xref:@azure/communication-react.CallAdapter.on_1)
      return:
        description: ''
        type: >-
          Promise&lt;void | <xref
          uid="@azure/communication-react.TogetherModeStreamViewResult" />&gt;
  - name: deleteMessage(string)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.deleteMessage'
    package: '@azure/communication-react'
    summary: Delete a message in the thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deleteMessage(messageId: string): Promise<void>'
      parameters:
        - id: messageId
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: disposeLocalVideoStreamView()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.disposeLocalVideoStreamView
    package: '@azure/communication-react'
    summary: Dispose the html view for a local video stream
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function disposeLocalVideoStreamView(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: disposeRemoteVideoStreamView(string)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.disposeRemoteVideoStreamView
    package: '@azure/communication-react'
    summary: Dispose the html view for a remote video stream
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disposeRemoteVideoStreamView(remoteUserId: string):
        Promise<void>
      parameters:
        - id: remoteUserId
          type: string
          description: Id of the participant to dispose
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: disposeScreenShareStreamView(string)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.disposeScreenShareStreamView
    package: '@azure/communication-react'
    summary: Dispose the html view for a screen share stream
    remarks: this method is implemented for composite
    isDeprecated: false
    syntax:
      content: >-
        function disposeScreenShareStreamView(remoteUserId: string):
        Promise<void>
      parameters:
        - id: remoteUserId
          type: string
          description: Id of the participant to dispose the screen share stream view for.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: disposeStreamView(string, VideoStreamOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.disposeStreamView'
    package: '@azure/communication-react'
    summary: Dispose the html view for a stream.
    remarks: This method is implemented for composite.
    isDeprecated: false
    syntax:
      content: >-
        function disposeStreamView(remoteUserId?: string, options?:
        VideoStreamOptions): Promise<void>
      parameters:
        - id: remoteUserId
          type: string
          description: >-
            Id of the participant to render, leave it undefined to dispose the
            local camera view
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >-
            Options to control how video streams are rendered
            [@azure/communication-calling#VideoStreamOptions](xref:@azure/communication-react.CallAdapter.on_1)
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: disposeTogetherModeStreamView()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.disposeTogetherModeStreamView
    package: '@azure/communication-react'
    summary: Dispose the html view for a togethermode stream.
    remarks: This method is implemented for composite
    isDeprecated: false
    syntax:
      content: 'function disposeTogetherModeStreamView(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: downloadResourceToCache(ResourceDetails)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.downloadResourceToCache
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function downloadResourceToCache(resourceDetails: ResourceDetails):
        Promise<void>
      parameters:
        - id: resourceDetails
          type: <xref uid="@azure/communication-react.ResourceDetails" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: fetchInitialData()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.fetchInitialData'
    package: '@azure/communication-react'
    summary: |-
      Fetch initial state for the Chat adapter.

      Performs the minimal fetch necessary for ChatComposite and API methods.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function fetchInitialData(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: holdCall()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.holdCall'
    package: '@azure/communication-react'
    summary: Puts the Call in a Localhold.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function holdCall(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: joinCall(boolean)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.joinCall'
    package: '@azure/communication-react'
    summary: Join the call with microphone initially on/off.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use joinCall(options?:JoinCallOptions) instead.
    syntax:
      content: 'function joinCall(microphoneOn?: boolean): undefined | Call'
      parameters:
        - id: microphoneOn
          type: boolean
          description: Whether microphone is initially enabled
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.Call" />
  - name: joinCall(JoinCallOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.joinCall_1'
    package: '@azure/communication-react'
    summary: >-
      Join the call with options bag to set microphone/camera initial state when
      joining call

      true = turn on the device when joining call

      false = turn off the device when joining call

      'keep'/undefined = retain devices' precall state
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function joinCall(options?: JoinCallOptions): undefined | Call'
      parameters:
        - id: options
          type: <xref uid="@azure/communication-react.JoinCallOptions" />
          description: param to set microphone/camera initially on/off/use precall state.
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.Call" />
  - name: leaveCall(boolean)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.leaveCall'
    package: '@azure/communication-react'
    summary: Leave the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function leaveCall(forEveryone?: boolean): Promise<void>'
      parameters:
        - id: forEveryone
          type: boolean
          description: Whether to remove all participants when leaving
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: loadPreviousChatMessages(number)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.loadPreviousChatMessages
    package: '@azure/communication-react'
    summary: Load more previous messages in the chat thread history.
    remarks: This method is usually used to control incremental fetch/infinite scroll.
    isDeprecated: false
    syntax:
      content: >-
        function loadPreviousChatMessages(messagesToLoad: number):
        Promise<boolean>
      parameters:
        - id: messagesToLoad
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;boolean&gt;
  - name: lowerHand()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.lowerHand'
    package: '@azure/communication-react'
    summary: Lower hand for local user.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function lowerHand(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: mute()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.mute'
    package: '@azure/communication-react'
    summary: Mute the current user during the call or disable microphone locally.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function mute(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: muteAllRemoteParticipants()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.muteAllRemoteParticipants
    package: '@azure/communication-react'
    summary: Mute a participant
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function muteAllRemoteParticipants(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: muteParticipant(string)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.muteParticipant'
    package: '@azure/communication-react'
    summary: Mute a participant
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function muteParticipant(userId: string): Promise<void>'
      parameters:
        - id: userId
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: onReactionClick(Reaction)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.onReactionClick'
    package: '@azure/communication-react'
    summary: Send Reaction to ongoing meeting.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function onReactionClick(reaction: Reaction): Promise<void>'
      parameters:
        - id: reaction
          type: <xref uid="@azure/communication-calling.Reaction" />
          description: >-
            A value of type
            [@azure/communication-calling#Reaction](xref:@azure/communication-react.CallAdapter.on_1)
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: queryCameras()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.queryCameras'
    package: '@azure/communication-react'
    summary: Query for available camera devices.
    remarks: This method should be called after askDevicePermission()
    isDeprecated: false
    syntax:
      content: 'function queryCameras(): Promise<VideoDeviceInfo[]>'
      return:
        description: >-
          An array of video device information entities
          [@azure/communication-calling#VideoDeviceInfo](xref:@azure/communication-react.CallAdapter.on_1)
        type: >-
          Promise&lt;<xref uid="@azure/communication-calling.VideoDeviceInfo"
          />[]&gt;
  - name: queryMicrophones()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.queryMicrophones'
    package: '@azure/communication-react'
    summary: Query for available microphone devices.
    remarks: This method should be called after askDevicePermission()
    isDeprecated: false
    syntax:
      content: 'function queryMicrophones(): Promise<AudioDeviceInfo[]>'
      return:
        description: >-
          An array of audio device information entities
          [@azure/communication-calling#AudioDeviceInfo](xref:@azure/communication-react.CallAdapter.on_1)
        type: >-
          Promise&lt;<xref uid="@azure/communication-calling.AudioDeviceInfo"
          />[]&gt;
  - name: querySpeakers()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.querySpeakers'
    package: '@azure/communication-react'
    summary: Query for available microphone devices.
    remarks: This method should be called after askDevicePermission()
    isDeprecated: false
    syntax:
      content: 'function querySpeakers(): Promise<AudioDeviceInfo[]>'
      return:
        description: >-
          An array of audio device information entities
          [@azure/communication-calling#AudioDeviceInfo](xref:@azure/communication-react.CallAdapter.on_1)
        type: >-
          Promise&lt;<xref uid="@azure/communication-calling.AudioDeviceInfo"
          />[]&gt;
  - name: raiseHand()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.raiseHand'
    package: '@azure/communication-react'
    summary: Raise hand for local user.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function raiseHand(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: removeParticipant(CommunicationIdentifier)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.removeParticipant_1
    package: '@azure/communication-react'
    summary: Remove a participant from the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeParticipant(participant: CommunicationIdentifier):
        Promise<void>
      parameters:
        - id: participant
          type: <xref uid="@azure/communication-common.CommunicationIdentifier" />
          description: >-
            [@azure/communication-common#CommunicationIdentifier](xref:@azure/communication-react.CallAdapter.on_1)
            of the participant to be removed
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: removeParticipant(string)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.removeParticipant'
    package: '@azure/communication-react'
    summary: Remove a participant from a Call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeParticipant(userId: string): Promise<void>'
      parameters:
        - id: userId
          type: string
          description: UserId of the participant to remove.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: removeResourceFromCache(ResourceDetails)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.removeResourceFromCache
    package: '@azure/communication-react'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeResourceFromCache(resourceDetails: ResourceDetails)'
      parameters:
        - id: resourceDetails
          type: <xref uid="@azure/communication-react.ResourceDetails" />
          description: ''
  - name: resumeCall()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.resumeCall'
    package: '@azure/communication-react'
    summary: Resumes the call from a LocalHold state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function resumeCall(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: returnFromBreakoutRoom()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.returnFromBreakoutRoom
    package: '@azure/communication-react'
    summary: Return to origin call of breakout room
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function returnFromBreakoutRoom(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: sendMessage(string, SendMessageOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.sendMessage'
    package: '@azure/communication-react'
    summary: Send a message in the thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendMessage(content: string, options?: SendMessageOptions):
        Promise<void>
      parameters:
        - id: content
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/communication-chat.SendMessageOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: sendReadReceipt(string)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.sendReadReceipt'
    package: '@azure/communication-react'
    summary: Send a read receipt for a message.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function sendReadReceipt(chatMessageId: string): Promise<void>'
      parameters:
        - id: chatMessageId
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: sendTypingIndicator()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.sendTypingIndicator
    package: '@azure/communication-react'
    summary: Send typing indicator in the thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function sendTypingIndicator(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setCamera(VideoDeviceInfo, VideoStreamOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.setCamera'
    package: '@azure/communication-react'
    summary: Set the camera to use in the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCamera(sourceInfo: VideoDeviceInfo, options?:
        VideoStreamOptions): Promise<void>
      parameters:
        - id: sourceInfo
          type: <xref uid="@azure/communication-calling.VideoDeviceInfo" />
          description: >-
            Camera device to choose, pick one returned by 
            [queryCameras](xref:@azure/communication-react.CallAdapterDeviceManagement.queryCameras)
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >-
            Options to control how the camera stream is rendered
            [@azure/communication-calling#VideoStreamOptions](xref:@azure/communication-react.CallAdapter.on_1)
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setCaptionLanguage(string)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.setCaptionLanguage
    package: '@azure/communication-react'
    summary: Function to set caption language
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setCaptionLanguage(language: string): Promise<void>'
      parameters:
        - id: language
          type: string
          description: language set for caption
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setMicrophone(AudioDeviceInfo)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.setMicrophone'
    package: '@azure/communication-react'
    summary: Set the microphone to use in the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMicrophone(sourceInfo: AudioDeviceInfo): Promise<void>'
      parameters:
        - id: sourceInfo
          type: <xref uid="@azure/communication-calling.AudioDeviceInfo" />
          description: >-
            Microphone device to choose, pick one returned by
            [queryMicrophones](xref:@azure/communication-react.CallAdapterDeviceManagement.queryMicrophones)
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setSpeaker(AudioDeviceInfo)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.setSpeaker'
    package: '@azure/communication-react'
    summary: Set the speaker to use in the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setSpeaker(sourceInfo: AudioDeviceInfo): Promise<void>'
      parameters:
        - id: sourceInfo
          type: <xref uid="@azure/communication-calling.AudioDeviceInfo" />
          description: >-
            Speaker device to choose, pick one returned by
            [querySpeakers](xref:@azure/communication-react.CallAdapterDeviceManagement.querySpeakers)
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setSpokenLanguage(string)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.setSpokenLanguage'
    package: '@azure/communication-react'
    summary: Function to set spoken language
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setSpokenLanguage(language: string): Promise<void>'
      parameters:
        - id: language
          type: string
          description: spoken language
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setTogetherModeSceneSize(number, number)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.setTogetherModeSceneSize
    package: '@azure/communication-react'
    summary: Recalculate the seating positions for together mode.
    remarks: This method is implemented for composite
    isDeprecated: false
    syntax:
      content: 'function setTogetherModeSceneSize(width: number, height: number)'
      parameters:
        - id: width
          type: number
          description: Width of the container
        - id: height
          type: number
          description: Height of the container
  - name: >-
      startCall((CommunicationUserIdentifier | PhoneNumberIdentifier |
      MicrosoftTeamsUserIdentifier | MicrosoftTeamsAppIdentifier |
      UnknownIdentifier)[], StartCallOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startCall_1'
    package: '@azure/communication-react'
    summary: Start the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startCall(participants: (CommunicationUserIdentifier |
        PhoneNumberIdentifier | MicrosoftTeamsUserIdentifier |
        MicrosoftTeamsAppIdentifier | UnknownIdentifier)[], options?:
        StartCallOptions): undefined | Call
      parameters:
        - id: participants
          type: >-
            (<xref uid="@azure/communication-common.CommunicationUserIdentifier"
            /> | <xref uid="@azure/communication-common.PhoneNumberIdentifier"
            /> | <xref
            uid="@azure/communication-common.MicrosoftTeamsUserIdentifier" /> |
            <xref uid="@azure/communication-common.MicrosoftTeamsAppIdentifier"
            /> | <xref uid="@azure/communication-common.UnknownIdentifier" />)[]
          description: >-
            An array of
            [@azure/communication-common#CommunicationIdentifier](xref:@azure/communication-react.CallAdapter.on_1)
            to be called
        - id: options
          type: <xref uid="@azure/communication-calling.StartCallOptions" />
          description: ''
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.Call" />
  - name: startCall(string[], StartCallOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startCall'
    package: '@azure/communication-react'
    summary: Start the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startCall(participants: string[], options?: StartCallOptions):
        undefined | Call
      parameters:
        - id: participants
          type: string[]
          description: An array of participant ids to join
        - id: options
          type: <xref uid="@azure/communication-calling.StartCallOptions" />
          description: ''
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.Call" />
  - name: startCamera(VideoStreamOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startCamera'
    package: '@azure/communication-react'
    summary: >-
      Start the camera.


      This method will start rendering a local camera view when the call is not
      active.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function startCamera(options?: VideoStreamOptions): Promise<void>'
      parameters:
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >-
            Options to control how video streams are rendered
            [@azure/communication-calling#VideoStreamOptions](xref:@azure/communication-react.CallAdapter.on_1)
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: startCaptions(StartCaptionsAdapterOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startCaptions'
    package: '@azure/communication-react'
    summary: Function to Start captions
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startCaptions(options?: StartCaptionsAdapterOptions):
        Promise<void>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/communication-react.StartCaptionsAdapterOptions"
            />
          description: options for start captions
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: startNoiseSuppressionEffect()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.startNoiseSuppressionEffect
    package: '@azure/communication-react'
    summary: Start the noise suppression effect.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function startNoiseSuppressionEffect(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: startScreenShare()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startScreenShare'
    package: '@azure/communication-react'
    summary: Start sharing the screen during a call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function startScreenShare(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: startSpotlight(string[])
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startSpotlight'
    package: '@azure/communication-react'
    summary: Start spotlight
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function startSpotlight(userIds?: string[]): Promise<void>'
      parameters:
        - id: userIds
          type: string[]
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: startTogetherMode()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startTogetherMode'
    package: '@azure/communication-react'
    summary: Start together mode.
    remarks: This method is implemented for composite
    isDeprecated: false
    syntax:
      content: 'function startTogetherMode(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: startVideoBackgroundEffect(VideoBackgroundEffect)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.startVideoBackgroundEffect
    package: '@azure/communication-react'
    summary: Start the video background effect.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startVideoBackgroundEffect(videoBackgroundEffect:
        VideoBackgroundEffect): Promise<void>
      parameters:
        - id: videoBackgroundEffect
          type: <xref uid="@azure/communication-react.VideoBackgroundEffect" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopAllSpotlight()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.stopAllSpotlight'
    package: '@azure/communication-react'
    summary: Stop all spotlights
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopAllSpotlight(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopCamera()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.stopCamera'
    package: '@azure/communication-react'
    summary: >-
      Stop the camera.


      This method will stop rendering a local camera view when the call is not
      active.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopCamera(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopCaptions(StopCaptionsAdapterOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.stopCaptions'
    package: '@azure/communication-react'
    summary: Funtion to stop captions
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function stopCaptions(options?: StopCaptionsAdapterOptions):
        Promise<void>
      parameters:
        - id: options
          type: <xref uid="@azure/communication-react.StopCaptionsAdapterOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopNoiseSuppressionEffect()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.stopNoiseSuppressionEffect
    package: '@azure/communication-react'
    summary: Start the noise suppression effect.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopNoiseSuppressionEffect(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopScreenShare()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.stopScreenShare'
    package: '@azure/communication-react'
    summary: Stop sharing the screen.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopScreenShare(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopSpotlight(string[])
    uid: '@azure/communication-react.CallWithChatAdapterManagement.stopSpotlight'
    package: '@azure/communication-react'
    summary: Stop spotlight
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopSpotlight(userIds?: string[]): Promise<void>'
      parameters:
        - id: userIds
          type: string[]
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopVideoBackgroundEffects()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.stopVideoBackgroundEffects
    package: '@azure/communication-react'
    summary: Stop the video background effect.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopVideoBackgroundEffects(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: submitSurvey(CallSurvey)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.submitSurvey'
    package: '@azure/communication-react'
    summary: Send the end of call survey result
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function submitSurvey(survey: CallSurvey): Promise<undefined |
        CallSurveyResponse>
      parameters:
        - id: survey
          type: <xref uid="@azure/communication-calling.CallSurvey" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;undefined | <xref
          uid="@azure/communication-calling.CallSurveyResponse" />&gt;
  - name: unmute()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.unmute'
    package: '@azure/communication-react'
    summary: Unmute the current user during the call or enable microphone locally.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function unmute(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: updateBackgroundPickerImages(VideoBackgroundImage[])
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.updateBackgroundPickerImages
    package: '@azure/communication-react'
    summary: Override the background picker images for background replacement effect.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateBackgroundPickerImages(backgroundImages:
        VideoBackgroundImage[])
      parameters:
        - id: backgroundImages
          type: <xref uid="@azure/communication-react.VideoBackgroundImage" />[]
          description: Array of custom background images.
  - name: updateMessage(string, string, Record<string, string>)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.updateMessage'
    package: '@azure/communication-react'
    summary: Update a message content.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateMessage(messageId: string, content: string, options?:
        Record<string, string>): Promise<void>
      parameters:
        - id: messageId
          type: string
          description: ''
        - id: content
          type: string
          description: ''
        - id: options
          type: Record&lt;string, string&gt;
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: updateSelectedVideoBackgroundEffect(VideoBackgroundEffect)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.updateSelectedVideoBackgroundEffect
    package: '@azure/communication-react'
    summary: Update the selected video background effect
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateSelectedVideoBackgroundEffect(selectedVideoBackground:
        VideoBackgroundEffect)
      parameters:
        - id: selectedVideoBackground
          type: <xref uid="@azure/communication-react.VideoBackgroundEffect" />
          description: ''
