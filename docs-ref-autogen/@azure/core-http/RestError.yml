### YamlMime:TSType
name: RestError
uid: '@azure/core-http.RestError'
package: '@azure/core-http'
summary: An error resulting from an HTTP request to a service endpoint.
fullName: RestError
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: RestError(string, string, number, WebResourceLike, HttpOperationResponse)
    uid: '@azure/core-http.RestError.constructor'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new RestError(message: string, code?: string, statusCode?: number,
        request?: WebResourceLike, response?: HttpOperationResponse)
      parameters:
        - id: message
          type: string
          description: ''
        - id: code
          type: string
          description: ''
        - id: statusCode
          type: number
          description: ''
        - id: request
          type: <xref uid="@azure/core-http.WebResourceLike" />
          description: ''
        - id: response
          type: <xref uid="@azure/core-http.HttpOperationResponse" />
          description: ''
properties:
  - name: code
    uid: '@azure/core-http.RestError.code'
    package: '@azure/core-http'
    summary: >-
      The error code, if any. Can be one of the static error code properties
      (REQUEST_SEND_ERROR / PARSE_ERROR) or can be a string code from an
      underlying system call (E_NOENT).
    fullName: code
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'code?: string'
      return:
        description: ''
        type: string
  - name: details
    uid: '@azure/core-http.RestError.details'
    package: '@azure/core-http'
    summary: >-
      Any additional details. In the case of deserialization errors, can be the
      processed response.
    fullName: details
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'details?: unknown'
      return:
        description: ''
        type: unknown
  - name: PARSE_ERROR
    uid: '@azure/core-http.RestError.PARSE_ERROR'
    package: '@azure/core-http'
    summary: >-
      A constant string to identify errors that may arise from parsing an
      incoming HTTP response. Usually indicates a malformed HTTP body, such as
      an encoded JSON payload that is incomplete.
    fullName: PARSE_ERROR
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static PARSE_ERROR: string'
      return:
        description: ''
        type: string
  - name: request
    uid: '@azure/core-http.RestError.request'
    package: '@azure/core-http'
    summary: Outgoing request.
    fullName: request
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'request?: WebResourceLike'
      return:
        description: ''
        type: <xref uid="@azure/core-http.WebResourceLike" />
  - name: REQUEST_SEND_ERROR
    uid: '@azure/core-http.RestError.REQUEST_SEND_ERROR'
    package: '@azure/core-http'
    summary: >-
      A constant string to identify errors that may arise when making an HTTP
      request that indicates an issue with the transport layer (e.g. the
      hostname of the URL cannot be resolved via DNS.)
    fullName: REQUEST_SEND_ERROR
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static REQUEST_SEND_ERROR: string'
      return:
        description: ''
        type: string
  - name: response
    uid: '@azure/core-http.RestError.response'
    package: '@azure/core-http'
    summary: Incoming response.
    fullName: response
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'response?: HttpOperationResponse'
      return:
        description: ''
        type: <xref uid="@azure/core-http.HttpOperationResponse" />
  - name: statusCode
    uid: '@azure/core-http.RestError.statusCode'
    package: '@azure/core-http'
    summary: The HTTP status code of the response, if one was returned.
    fullName: statusCode
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'statusCode?: number'
      return:
        description: ''
        type: number
inheritedProperties:
  - name: message
    uid: '@azure/core-http.RestError.message'
    package: '@azure/core-http'
    summary: ''
    fullName: message
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'message: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Error.message
  - name: name
    uid: '@azure/core-http.RestError.name'
    package: '@azure/core-http'
    summary: ''
    fullName: name
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'name: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Error.name
  - name: stack
    uid: '@azure/core-http.RestError.stack'
    package: '@azure/core-http'
    summary: ''
    fullName: stack
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'stack?: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Error.stack
  - name: stackTraceLimit
    uid: '@azure/core-http.RestError.stackTraceLimit'
    package: '@azure/core-http'
    summary: >-
      The `Error.stackTraceLimit` property specifies the number of stack frames

      collected by a stack trace (whether generated by `new Error().stack` or

      `Error.captureStackTrace(obj)`).


      The default value is `10` but may be set to any valid JavaScript number.
      Changes

      will affect any stack trace captured _after_ the value has been changed.


      If set to a non-number value, or set to a negative number, stack traces
      will

      not capture any frames.
    fullName: stackTraceLimit
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static stackTraceLimit: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Error.stackTraceLimit
inheritedMethods:
  - name: captureStackTrace(object, Function)
    uid: '@azure/core-http.RestError.captureStackTrace'
    package: '@azure/core-http'
    summary: >-
      Creates a `.stack` property on `targetObject`, which when accessed returns

      a string representing the location in the code at which

      `Error.captureStackTrace()` was called.


      ```js

      const myObject = {};

      Error.captureStackTrace(myObject);

      myObject.stack;  // Similar to `new Error().stack`

      ```


      The first line of the trace will be prefixed with

      `${myObject.name}: ${myObject.message}`.


      The optional `constructorOpt` argument accepts a function. If given, all
      frames

      above `constructorOpt`, including `constructorOpt`, will be omitted from
      the

      generated stack trace.


      The `constructorOpt` argument is useful for hiding implementation

      details of error generation from the user. For instance:


      ```js

      function a() {
        b();
      }


      function b() {
        c();
      }


      function c() {
        // Create an error without stack trace to avoid calculating the stack trace twice.
        const { stackTraceLimit } = Error;
        Error.stackTraceLimit = 0;
        const error = new Error();
        Error.stackTraceLimit = stackTraceLimit;

        // Capture the stack trace above function b
        Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace
        throw error;
      }


      a();

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function captureStackTrace(targetObject: object, constructorOpt?:
        Function)
      parameters:
        - id: targetObject
          type: object
          description: ''
        - id: constructorOpt
          type: Function
          description: ''
    inheritanceDescription: <b>Inherited From</b> Error.captureStackTrace
  - name: prepareStackTrace(Error, CallSite[])
    uid: '@azure/core-http.RestError.prepareStackTrace'
    package: '@azure/core-http'
    summary: |-


      See https://v8.dev/docs/stack-trace-api#customizing-stack-traces
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function prepareStackTrace(err: Error, stackTraces: CallSite[]):
        any
      parameters:
        - id: err
          type: Error
          description: ''
        - id: stackTraces
          type: CallSite[]
          description: ''
      return:
        description: ''
        type: any
    inheritanceDescription: <b>Inherited From</b> Error.prepareStackTrace
extends: Error
